/*!
 * 
 *   red5pro-sdk - Red5 Pro HTML Publisher and Subscriber SDK.
 *   Author: Infrared5 Inc.
 *   Version: 3.1.1
 *   Url: https://github.com/red5pro/red5pro-html-sdk#readme
 *   License(s): MIT
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["red5prosdk"] = factory();
	else
		root["red5prosdk"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(298);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	__webpack_require__(2);
	
	__webpack_require__(293);
	
	__webpack_require__(295);
	
	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;
	
	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	
	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);
	
	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(52);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(57);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(70);
	__webpack_require__(72);
	__webpack_require__(74);
	__webpack_require__(76);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(85);
	__webpack_require__(87);
	__webpack_require__(89);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(107);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(113);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(136);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(141);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(156);
	__webpack_require__(157);
	__webpack_require__(159);
	__webpack_require__(160);
	__webpack_require__(166);
	__webpack_require__(167);
	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(175);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(181);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(187);
	__webpack_require__(189);
	__webpack_require__(190);
	__webpack_require__(191);
	__webpack_require__(193);
	__webpack_require__(195);
	__webpack_require__(197);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(201);
	__webpack_require__(202);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(211);
	__webpack_require__(214);
	__webpack_require__(215);
	__webpack_require__(217);
	__webpack_require__(218);
	__webpack_require__(221);
	__webpack_require__(222);
	__webpack_require__(224);
	__webpack_require__(225);
	__webpack_require__(226);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(249);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(255);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(260);
	__webpack_require__(261);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(269);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(278);
	__webpack_require__(279);
	__webpack_require__(280);
	__webpack_require__(281);
	__webpack_require__(282);
	__webpack_require__(283);
	__webpack_require__(284);
	__webpack_require__(285);
	__webpack_require__(286);
	__webpack_require__(287);
	__webpack_require__(288);
	__webpack_require__(291);
	__webpack_require__(292);
	module.exports = __webpack_require__(9);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(4)
	  , has            = __webpack_require__(5)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , META           = __webpack_require__(22).KEY
	  , $fails         = __webpack_require__(7)
	  , shared         = __webpack_require__(23)
	  , setToStringTag = __webpack_require__(24)
	  , uid            = __webpack_require__(19)
	  , wks            = __webpack_require__(25)
	  , wksExt         = __webpack_require__(26)
	  , wksDefine      = __webpack_require__(27)
	  , keyOf          = __webpack_require__(29)
	  , enumKeys       = __webpack_require__(42)
	  , isArray        = __webpack_require__(45)
	  , anObject       = __webpack_require__(12)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , createDesc     = __webpack_require__(17)
	  , _create        = __webpack_require__(46)
	  , gOPNExt        = __webpack_require__(49)
	  , $GOPD          = __webpack_require__(51)
	  , $DP            = __webpack_require__(11)
	  , $keys          = __webpack_require__(30)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f  = $propertyIsEnumerable;
	  __webpack_require__(43).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(28)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 4 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 5 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(7)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , core      = __webpack_require__(9)
	  , hide      = __webpack_require__(10)
	  , redefine  = __webpack_require__(18)
	  , ctx       = __webpack_require__(20)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 9 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11)
	  , createDesc = __webpack_require__(17);
	module.exports = __webpack_require__(6) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(12)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , toPrimitive    = __webpack_require__(16)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(6) && !__webpack_require__(7)(function(){
	  return Object.defineProperty(__webpack_require__(15)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , document = __webpack_require__(4).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(13);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , hide      = __webpack_require__(10)
	  , has       = __webpack_require__(5)
	  , SRC       = __webpack_require__(19)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(9).inspectSource = function(it){
	  return $toString.call(it);
	};
	
	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 19 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(19)('meta')
	  , isObject = __webpack_require__(13)
	  , has      = __webpack_require__(5)
	  , setDesc  = __webpack_require__(11).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(7)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(11).f
	  , has = __webpack_require__(5)
	  , TAG = __webpack_require__(25)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(23)('wks')
	  , uid        = __webpack_require__(19)
	  , Symbol     = __webpack_require__(4).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(25);

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(4)
	  , core           = __webpack_require__(9)
	  , LIBRARY        = __webpack_require__(28)
	  , wksExt         = __webpack_require__(26)
	  , defineProperty = __webpack_require__(11).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(31)
	  , enumBugKeys = __webpack_require__(41);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(5)
	  , toIObject    = __webpack_require__(32)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(40)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33)
	  , defined = __webpack_require__(35);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 34 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(39);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(23)('keys')
	  , uid    = __webpack_require__(19);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30)
	  , gOPS    = __webpack_require__(43)
	  , pIE     = __webpack_require__(44);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 44 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(12)
	  , dPs         = __webpack_require__(47)
	  , enumBugKeys = __webpack_require__(41)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(15)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(48).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(11)
	  , anObject = __webpack_require__(12)
	  , getKeys  = __webpack_require__(30);
	
	module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4).document && document.documentElement;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32)
	  , gOPN      = __webpack_require__(50).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(31)
	  , hiddenKeys = __webpack_require__(41).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(44)
	  , createDesc     = __webpack_require__(17)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , has            = __webpack_require__(5)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(46)});

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperty: __webpack_require__(11).f});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperties: __webpack_require__(47)});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(32)
	  , $getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	__webpack_require__(56)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8)
	  , core    = __webpack_require__(9)
	  , fails   = __webpack_require__(7);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(58)
	  , $getPrototypeOf = __webpack_require__(59);
	
	__webpack_require__(56)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(5)
	  , toObject    = __webpack_require__(58)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(58)
	  , $keys    = __webpack_require__(30);
	
	__webpack_require__(56)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(56)('getOwnPropertyNames', function(){
	  return __webpack_require__(49).f;
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(69)});

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(30)
	  , gOPS     = __webpack_require__(43)
	  , pIE      = __webpack_require__(44)
	  , toObject = __webpack_require__(58)
	  , IObject  = __webpack_require__(33)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(7)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {is: __webpack_require__(71)});

/***/ },
/* 71 */
/***/ function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(73).set});

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(13)
	  , anObject = __webpack_require__(12);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(20)(Function.call, __webpack_require__(51).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(75)
	  , test    = {};
	test[__webpack_require__(25)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(18)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34)
	  , TAG = __webpack_require__(25)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Function', {bind: __webpack_require__(77)});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(21)
	  , isObject   = __webpack_require__(13)
	  , invoke     = __webpack_require__(78)
	  , arraySlice = [].slice
	  , factories  = {};
	
	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 78 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11).f
	  , createDesc = __webpack_require__(17)
	  , has        = __webpack_require__(5)
	  , FProto     = Function.prototype
	  , nameRE     = /^\s*function ([^ (]*)/
	  , NAME       = 'name';
	
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
	  configurable: true,
	  get: function(){
	    try {
	      var that = this
	        , name = ('' + that).match(nameRE)[1];
	      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
	      return name;
	    } catch(e){
	      return '';
	    }
	  }
	});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObject       = __webpack_require__(13)
	  , getPrototypeOf = __webpack_require__(59)
	  , HAS_INSTANCE   = __webpack_require__(25)('hasInstance')
	  , FunctionProto  = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(11).f(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(typeof this != 'function' || !isObject(O))return false;
	  if(!isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(4).parseInt
	  , $trim     = __webpack_require__(83).trim
	  , ws        = __webpack_require__(84)
	  , hex       = /^[\-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , defined = __webpack_require__(35)
	  , fails   = __webpack_require__(7)
	  , spaces  = __webpack_require__(84)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');
	
	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;

/***/ },
/* 84 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(4).parseFloat
	  , $trim       = __webpack_require__(83).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(84) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , has               = __webpack_require__(5)
	  , cof               = __webpack_require__(34)
	  , inheritIfRequired = __webpack_require__(88)
	  , toPrimitive       = __webpack_require__(16)
	  , fails             = __webpack_require__(7)
	  , gOPN              = __webpack_require__(50).f
	  , gOPD              = __webpack_require__(51).f
	  , dP                = __webpack_require__(11).f
	  , $trim             = __webpack_require__(83).trim
	  , NUMBER            = 'Number'
	  , $Number           = global[NUMBER]
	  , Base              = $Number
	  , proto             = $Number.prototype
	  // Opera ~12 has broken Object#toString
	  , BROKEN_COF        = cof(__webpack_require__(46)(proto)) == NUMBER
	  , TRIM              = 'trim' in String.prototype;
	
	// 7.1.3 ToNumber(argument)
	var toNumber = function(argument){
	  var it = toPrimitive(argument, false);
	  if(typeof it == 'string' && it.length > 2){
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0)
	      , third, radix, maxCode;
	    if(first === 43 || first === 45){
	      third = it.charCodeAt(2);
	      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if(first === 48){
	      switch(it.charCodeAt(1)){
	        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default : return +it;
	      }
	      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if(code < 48 || code > maxCode)return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};
	
	if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
	  $Number = function Number(value){
	    var it = arguments.length < 1 ? 0 : value
	      , that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for(var keys = __webpack_require__(6) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++){
	    if(has(Base, key = keys[j]) && !has($Number, key)){
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(18)(global, NUMBER, $Number);
	}

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(13)
	  , setPrototypeOf = __webpack_require__(73).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , toInteger    = __webpack_require__(38)
	  , aNumberValue = __webpack_require__(90)
	  , repeat       = __webpack_require__(91)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';
	
	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(7)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(34);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	
	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $fails       = __webpack_require__(7)
	  , aNumberValue = __webpack_require__(90)
	  , $toPrecision = 1..toPrecision;
	
	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(8)
	  , _isFinite = __webpack_require__(4).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {isInteger: __webpack_require__(96)});

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(13)
	  , floor    = Math.floor;
	module.exports = function isInteger(it){
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export   = __webpack_require__(8)
	  , isInteger = __webpack_require__(96)
	  , abs       = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(8)
	  , log1p   = __webpack_require__(104)
	  , sqrt    = Math.sqrt
	  , $acosh  = Math.acosh;
	
	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ },
/* 104 */
/***/ function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x){
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(8)
	  , $asinh  = Math.asinh;
	
	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}
	
	// Tor Browser bug: Math.asinh(0) -> -0 
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(8)
	  , $atanh  = Math.atanh;
	
	// Tor Browser bug: Math.atanh(-0) -> 0 
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(8)
	  , sign    = __webpack_require__(108);
	
	$export($export.S, 'Math', {
	  cbrt: function cbrt(x){
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ },
/* 108 */
/***/ function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(8)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(8)
	  , $expm1  = __webpack_require__(112);
	
	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ },
/* 112 */
/***/ function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export   = __webpack_require__(8)
	  , sign      = __webpack_require__(108)
	  , pow       = Math.pow
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);
	
	var roundTiesToEven = function(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	};
	
	
	$export($export.S, 'Math', {
	  fround: function fround(x){
	    var $abs  = Math.abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  }
	});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(8)
	  , abs     = Math.abs;
	
	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , aLen = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < aLen){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(8)
	  , $imul   = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y){
	    var UINT16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UINT16 & xn
	      , yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log10: function log10(x){
	    return Math.log(x) / Math.LN10;
	  }
	});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {log1p: __webpack_require__(104)});

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log2: function log2(x){
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {sign: __webpack_require__(108)});

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;
	
	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x){
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  trunc: function trunc(it){
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var $export        = __webpack_require__(8)
	  , toIndex        = __webpack_require__(39)
	  , fromCharCode   = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res  = []
	      , aLen = arguments.length
	      , i    = 0
	      , code;
	    while(aLen > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl  = toIObject(callSite.raw)
	      , len  = toLength(tpl.length)
	      , aLen = arguments.length
	      , res  = []
	      , i    = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < aLen)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(83)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(127)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(128)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(28)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , hide           = __webpack_require__(10)
	  , has            = __webpack_require__(5)
	  , Iterators      = __webpack_require__(129)
	  , $iterCreate    = __webpack_require__(130)
	  , setToStringTag = __webpack_require__(24)
	  , getPrototypeOf = __webpack_require__(59)
	  , ITERATOR       = __webpack_require__(25)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(46)
	  , descriptor     = __webpack_require__(17)
	  , setToStringTag = __webpack_require__(24)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(25)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $at     = __webpack_require__(127)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(8)
	  , toLength  = __webpack_require__(37)
	  , context   = __webpack_require__(133)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(134)
	  , defined  = __webpack_require__(35);
	
	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(13)
	  , cof      = __webpack_require__(34)
	  , MATCH    = __webpack_require__(25)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(25)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(8)
	  , context  = __webpack_require__(133)
	  , INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(135)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(91)
	});

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export     = __webpack_require__(8)
	  , toLength    = __webpack_require__(37)
	  , context     = __webpack_require__(133)
	  , STARTS_WITH = 'startsWith'
	  , $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    var that   = context(this, searchString, STARTS_WITH)
	      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
	      , search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(140)('anchor', function(createHTML){
	  return function anchor(name){
	    return createHTML(this, 'a', 'name', name);
	  }
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , defined = __webpack_require__(35)
	  , quot    = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function(string, tag, attribute, value) {
	  var S  = String(defined(string))
	    , p1 = '<' + tag;
	  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function(NAME, exec){
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function(){
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(140)('big', function(createHTML){
	  return function big(){
	    return createHTML(this, 'big', '', '');
	  }
	});

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(140)('blink', function(createHTML){
	  return function blink(){
	    return createHTML(this, 'blink', '', '');
	  }
	});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(140)('bold', function(createHTML){
	  return function bold(){
	    return createHTML(this, 'b', '', '');
	  }
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(140)('fixed', function(createHTML){
	  return function fixed(){
	    return createHTML(this, 'tt', '', '');
	  }
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(140)('fontcolor', function(createHTML){
	  return function fontcolor(color){
	    return createHTML(this, 'font', 'color', color);
	  }
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(140)('fontsize', function(createHTML){
	  return function fontsize(size){
	    return createHTML(this, 'font', 'size', size);
	  }
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(140)('italics', function(createHTML){
	  return function italics(){
	    return createHTML(this, 'i', '', '');
	  }
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(140)('link', function(createHTML){
	  return function link(url){
	    return createHTML(this, 'a', 'href', url);
	  }
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(140)('small', function(createHTML){
	  return function small(){
	    return createHTML(this, 'small', '', '');
	  }
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(140)('strike', function(createHTML){
	  return function strike(){
	    return createHTML(this, 'strike', '', '');
	  }
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(140)('sub', function(createHTML){
	  return function sub(){
	    return createHTML(this, 'sub', '', '');
	  }
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(140)('sup', function(createHTML){
	  return function sup(){
	    return createHTML(this, 'sup', '', '');
	  }
	});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(8)
	  , toObject    = __webpack_require__(58)
	  , toPrimitive = __webpack_require__(16);
	
	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , getTime = Date.prototype.getTime;
	
	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var DateProto    = Date.prototype
	  , INVALID_DATE = 'Invalid Date'
	  , TO_STRING    = 'toString'
	  , $toString    = DateProto[TO_STRING]
	  , getTime      = DateProto.getTime;
	if(new Date(NaN) + '' != INVALID_DATE){
	  __webpack_require__(18)(DateProto, TO_STRING, function toString(){
	    var value = getTime.call(this);
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(25)('toPrimitive')
	  , proto        = Date.prototype;
	
	if(!(TO_PRIMITIVE in proto))__webpack_require__(10)(proto, TO_PRIMITIVE, __webpack_require__(158));

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16)
	  , NUMBER      = 'number';
	
	module.exports = function(hint){
	  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Array', {isArray: __webpack_require__(45)});

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(20)
	  , $export        = __webpack_require__(8)
	  , toObject       = __webpack_require__(58)
	  , call           = __webpack_require__(161)
	  , isArrayIter    = __webpack_require__(162)
	  , toLength       = __webpack_require__(37)
	  , createProperty = __webpack_require__(163)
	  , getIterFn      = __webpack_require__(164);
	
	$export($export.S + $export.F * !__webpack_require__(165)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(12);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(129)
	  , ITERATOR   = __webpack_require__(25)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(11)
	  , createDesc      = __webpack_require__(17);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(75)
	  , ITERATOR  = __webpack_require__(25)('iterator')
	  , Iterators = __webpack_require__(129);
	module.exports = __webpack_require__(9).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(25)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export        = __webpack_require__(8)
	  , createProperty = __webpack_require__(163);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  function F(){}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , aLen   = arguments.length
	      , result = new (typeof this == 'function' ? this : Array)(aLen);
	    while(aLen > index)createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(168)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(7);
	
	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(8)
	  , html       = __webpack_require__(48)
	  , cof        = __webpack_require__(34)
	  , toIndex    = __webpack_require__(39)
	  , toLength   = __webpack_require__(37)
	  , arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , fails     = __webpack_require__(7)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(168)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(8)
	  , $forEach = __webpack_require__(172)(0)
	  , STRICT   = __webpack_require__(168)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(20)
	  , IObject  = __webpack_require__(33)
	  , toObject = __webpack_require__(58)
	  , toLength = __webpack_require__(37)
	  , asc      = __webpack_require__(173);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(174);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , isArray  = __webpack_require__(45)
	  , SPECIES  = __webpack_require__(25)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $map    = __webpack_require__(172)(1);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $filter = __webpack_require__(172)(2);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $some   = __webpack_require__(172)(3);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $every  = __webpack_require__(172)(4);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , IObject   = __webpack_require__(33)
	  , toLength  = __webpack_require__(37);
	
	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , $indexOf      = __webpack_require__(36)(false)
	  , $native       = [].indexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , toIObject     = __webpack_require__(32)
	  , toInteger     = __webpack_require__(38)
	  , toLength      = __webpack_require__(37)
	  , $native       = [].lastIndexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    // convert -0 to +0
	    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
	    return -1;
	  }
	});

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', {copyWithin: __webpack_require__(185)});
	
	__webpack_require__(186)('copyWithin');

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	
	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
	  var O     = toObject(this)
	    , len   = toLength(O.length)
	    , to    = toIndex(target, len)
	    , from  = toIndex(start, len)
	    , end   = arguments.length > 2 ? arguments[2] : undefined
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
	    , inc   = 1;
	  if(from < to && to < from + count){
	    inc  = -1;
	    from += count - 1;
	    to   += count - 1;
	  }
	  while(count-- > 0){
	    if(from in O)O[to] = O[from];
	    else delete O[to];
	    to   += inc;
	    from += inc;
	  } return O;
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(25)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', {fill: __webpack_require__(188)});
	
	__webpack_require__(186)('fill');

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	module.exports = function fill(value /*, start = 0, end = @length */){
	  var O      = toObject(this)
	    , length = toLength(O.length)
	    , aLen   = arguments.length
	    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
	    , end    = aLen > 2 ? arguments[2] : undefined
	    , endPos = end === undefined ? length : toIndex(end, length);
	  while(endPos > index)O[index++] = value;
	  return O;
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(5)
	  , KEY     = 'find'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(192)('Array');

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(4)
	  , dP          = __webpack_require__(11)
	  , DESCRIPTORS = __webpack_require__(6)
	  , SPECIES     = __webpack_require__(25)('species');
	
	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(186)
	  , step             = __webpack_require__(194)
	  , Iterators        = __webpack_require__(129)
	  , toIObject        = __webpack_require__(32);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(128)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 194 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var global            = __webpack_require__(4)
	  , inheritIfRequired = __webpack_require__(88)
	  , dP                = __webpack_require__(11).f
	  , gOPN              = __webpack_require__(50).f
	  , isRegExp          = __webpack_require__(134)
	  , $flags            = __webpack_require__(196)
	  , $RegExp           = global.RegExp
	  , Base              = $RegExp
	  , proto             = $RegExp.prototype
	  , re1               = /a/g
	  , re2               = /a/g
	  // "new" creates a new object, old webkit buggy here
	  , CORRECT_NEW       = new $RegExp(re1) !== re1;
	
	if(__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(7)(function(){
	  re2[__webpack_require__(25)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))){
	  $RegExp = function RegExp(p, f){
	    var tiRE = this instanceof $RegExp
	      , piRE = isRegExp(p)
	      , fiU  = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function(key){
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function(){ return Base[key]; },
	      set: function(it){ Base[key] = it; }
	    });
	  };
	  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(18)(global, 'RegExp', $RegExp);
	}
	
	__webpack_require__(192)('RegExp');

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(12);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(198);
	var anObject    = __webpack_require__(12)
	  , $flags      = __webpack_require__(196)
	  , DESCRIPTORS = __webpack_require__(6)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];
	
	var define = function(fn){
	  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(7)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(6) && /./g.flags != 'g')__webpack_require__(11).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(196)
	});

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(200)('match', 1, function(defined, MATCH, $match){
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hide     = __webpack_require__(10)
	  , redefine = __webpack_require__(18)
	  , fails    = __webpack_require__(7)
	  , defined  = __webpack_require__(35)
	  , wks      = __webpack_require__(25);
	
	module.exports = function(KEY, length, exec){
	  var SYMBOL   = wks(KEY)
	    , fns      = exec(defined, SYMBOL, ''[KEY])
	    , strfn    = fns[0]
	    , rxfn     = fns[1];
	  if(fails(function(){
	    var O = {};
	    O[SYMBOL] = function(){ return 7; };
	    return ''[KEY](O) != 7;
	  })){
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function(string, arg){ return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function(string){ return rxfn.call(string, this); }
	    );
	  }
	};

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(200)('replace', 2, function(defined, REPLACE, $replace){
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue){
	    'use strict';
	    var O  = defined(this)
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(200)('search', 1, function(defined, SEARCH, $search){
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(200)('split', 2, function(defined, SPLIT, $split){
	  'use strict';
	  var isRegExp   = __webpack_require__(134)
	    , _split     = $split
	    , $push      = [].push
	    , $SPLIT     = 'split'
	    , LENGTH     = 'length'
	    , LAST_INDEX = 'lastIndex';
	  if(
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ){
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function(separator, limit){
	      var string = String(this);
	      if(separator === undefined && limit === 0)return [];
	      // If `separator` is not a regex, use native split
	      if(!isRegExp(separator))return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while(match = separatorCopy.exec(string)){
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if(lastIndex > lastLastIndex){
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
	            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
	          });
	          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if(output[LENGTH] >= splitLimit)break;
	        }
	        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if(lastLastIndex === string[LENGTH]){
	        if(lastLength || !separatorCopy.test(''))output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
	    $split = function(separator, limit){
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit){
	    var O  = defined(this)
	      , fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(28)
	  , global             = __webpack_require__(4)
	  , ctx                = __webpack_require__(20)
	  , classof            = __webpack_require__(75)
	  , $export            = __webpack_require__(8)
	  , isObject           = __webpack_require__(13)
	  , aFunction          = __webpack_require__(21)
	  , anInstance         = __webpack_require__(205)
	  , forOf              = __webpack_require__(206)
	  , speciesConstructor = __webpack_require__(207)
	  , task               = __webpack_require__(208).set
	  , microtask          = __webpack_require__(209)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(25)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(210)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(24)($Promise, PROMISE);
	__webpack_require__(192)(PROMISE);
	Wrapper = __webpack_require__(9)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(165)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 205 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(20)
	  , call        = __webpack_require__(161)
	  , isArrayIter = __webpack_require__(162)
	  , anObject    = __webpack_require__(12)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(164)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(12)
	  , aFunction = __webpack_require__(21)
	  , SPECIES   = __webpack_require__(25)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(20)
	  , invoke             = __webpack_require__(78)
	  , html               = __webpack_require__(48)
	  , cel                = __webpack_require__(15)
	  , global             = __webpack_require__(4)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(34)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , macrotask = __webpack_require__(208).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(34)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(18);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(213)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(11).f
	  , create      = __webpack_require__(46)
	  , redefineAll = __webpack_require__(210)
	  , ctx         = __webpack_require__(20)
	  , anInstance  = __webpack_require__(205)
	  , defined     = __webpack_require__(35)
	  , forOf       = __webpack_require__(206)
	  , $iterDefine = __webpack_require__(128)
	  , step        = __webpack_require__(194)
	  , setSpecies  = __webpack_require__(192)
	  , DESCRIPTORS = __webpack_require__(6)
	  , fastKey     = __webpack_require__(22).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , $export           = __webpack_require__(8)
	  , redefine          = __webpack_require__(18)
	  , redefineAll       = __webpack_require__(210)
	  , meta              = __webpack_require__(22)
	  , forOf             = __webpack_require__(206)
	  , anInstance        = __webpack_require__(205)
	  , isObject          = __webpack_require__(13)
	  , fails             = __webpack_require__(7)
	  , $iterDetect       = __webpack_require__(165)
	  , setToStringTag    = __webpack_require__(24)
	  , inheritIfRequired = __webpack_require__(88);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(213)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(172)(0)
	  , redefine     = __webpack_require__(18)
	  , meta         = __webpack_require__(22)
	  , assign       = __webpack_require__(69)
	  , weak         = __webpack_require__(216)
	  , isObject     = __webpack_require__(13)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;
	
	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(213)('WeakMap', wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(210)
	  , getWeak           = __webpack_require__(22).getWeak
	  , anObject          = __webpack_require__(12)
	  , isObject          = __webpack_require__(13)
	  , anInstance        = __webpack_require__(205)
	  , forOf             = __webpack_require__(206)
	  , createArrayMethod = __webpack_require__(172)
	  , $has              = __webpack_require__(5)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(216);
	
	// 23.4 WeakSet Objects
	__webpack_require__(213)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $typed       = __webpack_require__(219)
	  , buffer       = __webpack_require__(220)
	  , anObject     = __webpack_require__(12)
	  , toIndex      = __webpack_require__(39)
	  , toLength     = __webpack_require__(37)
	  , isObject     = __webpack_require__(13)
	  , ArrayBuffer  = __webpack_require__(4).ArrayBuffer
	  , speciesConstructor = __webpack_require__(207)
	  , $ArrayBuffer = buffer.ArrayBuffer
	  , $DataView    = buffer.DataView
	  , $isView      = $typed.ABV && ArrayBuffer.isView
	  , $slice       = $ArrayBuffer.prototype.slice
	  , VIEW         = $typed.VIEW
	  , ARRAY_BUFFER = 'ArrayBuffer';
	
	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});
	
	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it){
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});
	
	$export($export.P + $export.U + $export.F * __webpack_require__(7)(function(){
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end){
	    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
	    var len    = anObject(this).byteLength
	      , first  = toIndex(start, len)
	      , final  = toIndex(end === undefined ? len : end, len)
	      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
	      , viewS  = new $DataView(this)
	      , viewT  = new $DataView(result)
	      , index  = 0;
	    while(first < final){
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});
	
	__webpack_require__(192)(ARRAY_BUFFER);

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , hide   = __webpack_require__(10)
	  , uid    = __webpack_require__(19)
	  , TYPED  = uid('typed_array')
	  , VIEW   = uid('view')
	  , ABV    = !!(global.ArrayBuffer && global.DataView)
	  , CONSTR = ABV
	  , i = 0, l = 9, Typed;
	
	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');
	
	while(i < l){
	  if(Typed = global[TypedArrayConstructors[i++]]){
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	
	module.exports = {
	  ABV:    ABV,
	  CONSTR: CONSTR,
	  TYPED:  TYPED,
	  VIEW:   VIEW
	};

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(4)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , LIBRARY        = __webpack_require__(28)
	  , $typed         = __webpack_require__(219)
	  , hide           = __webpack_require__(10)
	  , redefineAll    = __webpack_require__(210)
	  , fails          = __webpack_require__(7)
	  , anInstance     = __webpack_require__(205)
	  , toInteger      = __webpack_require__(38)
	  , toLength       = __webpack_require__(37)
	  , gOPN           = __webpack_require__(50).f
	  , dP             = __webpack_require__(11).f
	  , arrayFill      = __webpack_require__(188)
	  , setToStringTag = __webpack_require__(24)
	  , ARRAY_BUFFER   = 'ArrayBuffer'
	  , DATA_VIEW      = 'DataView'
	  , PROTOTYPE      = 'prototype'
	  , WRONG_LENGTH   = 'Wrong length!'
	  , WRONG_INDEX    = 'Wrong index!'
	  , $ArrayBuffer   = global[ARRAY_BUFFER]
	  , $DataView      = global[DATA_VIEW]
	  , Math           = global.Math
	  , RangeError     = global.RangeError
	  , Infinity       = global.Infinity
	  , BaseBuffer     = $ArrayBuffer
	  , abs            = Math.abs
	  , pow            = Math.pow
	  , floor          = Math.floor
	  , log            = Math.log
	  , LN2            = Math.LN2
	  , BUFFER         = 'buffer'
	  , BYTE_LENGTH    = 'byteLength'
	  , BYTE_OFFSET    = 'byteOffset'
	  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
	  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
	  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	
	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function(value, mLen, nBytes){
	  var buffer = Array(nBytes)
	    , eLen   = nBytes * 8 - mLen - 1
	    , eMax   = (1 << eLen) - 1
	    , eBias  = eMax >> 1
	    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
	    , i      = 0
	    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
	    , e, m, c;
	  value = abs(value)
	  if(value != value || value === Infinity){
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if(value * (c = pow(2, -e)) < 1){
	      e--;
	      c *= 2;
	    }
	    if(e + eBias >= 1){
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if(value * c >= 2){
	      e++;
	      c /= 2;
	    }
	    if(e + eBias >= eMax){
	      m = 0;
	      e = eMax;
	    } else if(e + eBias >= 1){
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	};
	var unpackIEEE754 = function(buffer, mLen, nBytes){
	  var eLen  = nBytes * 8 - mLen - 1
	    , eMax  = (1 << eLen) - 1
	    , eBias = eMax >> 1
	    , nBits = eLen - 7
	    , i     = nBytes - 1
	    , s     = buffer[i--]
	    , e     = s & 127
	    , m;
	  s >>= 7;
	  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if(e === 0){
	    e = 1 - eBias;
	  } else if(e === eMax){
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	};
	
	var unpackI32 = function(bytes){
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	};
	var packI8 = function(it){
	  return [it & 0xff];
	};
	var packI16 = function(it){
	  return [it & 0xff, it >> 8 & 0xff];
	};
	var packI32 = function(it){
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	};
	var packF64 = function(it){
	  return packIEEE754(it, 52, 8);
	};
	var packF32 = function(it){
	  return packIEEE754(it, 23, 4);
	};
	
	var addGetter = function(C, key, internal){
	  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
	};
	
	var get = function(view, bytes, index, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	};
	var set = function(view, bytes, index, conversion, value, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = conversion(+value);
	  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	};
	
	var validateArrayBufferArguments = function(that, length){
	  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
	  var numberLength = +length
	    , byteLength   = toLength(numberLength);
	  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
	  return byteLength;
	};
	
	if(!$typed.ABV){
	  $ArrayBuffer = function ArrayBuffer(length){
	    var byteLength = validateArrayBufferArguments(this, length);
	    this._b       = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	
	  $DataView = function DataView(buffer, byteOffset, byteLength){
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH]
	      , offset       = toInteger(byteOffset);
	    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	
	  if(DESCRIPTORS){
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset){
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset){
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if(!fails(function(){
	    new $ArrayBuffer;     // eslint-disable-line no-new
	  }) || !fails(function(){
	    new $ArrayBuffer(.5); // eslint-disable-line no-new
	  })){
	    $ArrayBuffer = function ArrayBuffer(length){
	      return new BaseBuffer(validateArrayBufferArguments(this, length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
	      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
	    };
	    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2))
	    , $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	$export($export.G + $export.W + $export.F * !__webpack_require__(219).ABV, {
	  DataView: __webpack_require__(220).DataView
	});

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int8', 1, function(init){
	  return function Int8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	if(__webpack_require__(6)){
	  var LIBRARY             = __webpack_require__(28)
	    , global              = __webpack_require__(4)
	    , fails               = __webpack_require__(7)
	    , $export             = __webpack_require__(8)
	    , $typed              = __webpack_require__(219)
	    , $buffer             = __webpack_require__(220)
	    , ctx                 = __webpack_require__(20)
	    , anInstance          = __webpack_require__(205)
	    , propertyDesc        = __webpack_require__(17)
	    , hide                = __webpack_require__(10)
	    , redefineAll         = __webpack_require__(210)
	    , toInteger           = __webpack_require__(38)
	    , toLength            = __webpack_require__(37)
	    , toIndex             = __webpack_require__(39)
	    , toPrimitive         = __webpack_require__(16)
	    , has                 = __webpack_require__(5)
	    , same                = __webpack_require__(71)
	    , classof             = __webpack_require__(75)
	    , isObject            = __webpack_require__(13)
	    , toObject            = __webpack_require__(58)
	    , isArrayIter         = __webpack_require__(162)
	    , create              = __webpack_require__(46)
	    , getPrototypeOf      = __webpack_require__(59)
	    , gOPN                = __webpack_require__(50).f
	    , getIterFn           = __webpack_require__(164)
	    , uid                 = __webpack_require__(19)
	    , wks                 = __webpack_require__(25)
	    , createArrayMethod   = __webpack_require__(172)
	    , createArrayIncludes = __webpack_require__(36)
	    , speciesConstructor  = __webpack_require__(207)
	    , ArrayIterators      = __webpack_require__(193)
	    , Iterators           = __webpack_require__(129)
	    , $iterDetect         = __webpack_require__(165)
	    , setSpecies          = __webpack_require__(192)
	    , arrayFill           = __webpack_require__(188)
	    , arrayCopyWithin     = __webpack_require__(185)
	    , $DP                 = __webpack_require__(11)
	    , $GOPD               = __webpack_require__(51)
	    , dP                  = $DP.f
	    , gOPD                = $GOPD.f
	    , RangeError          = global.RangeError
	    , TypeError           = global.TypeError
	    , Uint8Array          = global.Uint8Array
	    , ARRAY_BUFFER        = 'ArrayBuffer'
	    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
	    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
	    , PROTOTYPE           = 'prototype'
	    , ArrayProto          = Array[PROTOTYPE]
	    , $ArrayBuffer        = $buffer.ArrayBuffer
	    , $DataView           = $buffer.DataView
	    , arrayForEach        = createArrayMethod(0)
	    , arrayFilter         = createArrayMethod(2)
	    , arraySome           = createArrayMethod(3)
	    , arrayEvery          = createArrayMethod(4)
	    , arrayFind           = createArrayMethod(5)
	    , arrayFindIndex      = createArrayMethod(6)
	    , arrayIncludes       = createArrayIncludes(true)
	    , arrayIndexOf        = createArrayIncludes(false)
	    , arrayValues         = ArrayIterators.values
	    , arrayKeys           = ArrayIterators.keys
	    , arrayEntries        = ArrayIterators.entries
	    , arrayLastIndexOf    = ArrayProto.lastIndexOf
	    , arrayReduce         = ArrayProto.reduce
	    , arrayReduceRight    = ArrayProto.reduceRight
	    , arrayJoin           = ArrayProto.join
	    , arraySort           = ArrayProto.sort
	    , arraySlice          = ArrayProto.slice
	    , arrayToString       = ArrayProto.toString
	    , arrayToLocaleString = ArrayProto.toLocaleString
	    , ITERATOR            = wks('iterator')
	    , TAG                 = wks('toStringTag')
	    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
	    , DEF_CONSTRUCTOR     = uid('def_constructor')
	    , ALL_CONSTRUCTORS    = $typed.CONSTR
	    , TYPED_ARRAY         = $typed.TYPED
	    , VIEW                = $typed.VIEW
	    , WRONG_LENGTH        = 'Wrong length!';
	
	  var $map = createArrayMethod(1, function(O, length){
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	
	  var LITTLE_ENDIAN = fails(function(){
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
	    new Uint8Array(1).set({});
	  });
	
	  var strictToLength = function(it, SAME){
	    if(it === undefined)throw TypeError(WRONG_LENGTH);
	    var number = +it
	      , length = toLength(it);
	    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
	    return length;
	  };
	
	  var toOffset = function(it, BYTES){
	    var offset = toInteger(it);
	    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
	    return offset;
	  };
	
	  var validate = function(it){
	    if(isObject(it) && TYPED_ARRAY in it)return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	
	  var allocate = function(C, length){
	    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };
	
	  var speciesFromList = function(O, list){
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	
	  var fromList = function(C, list){
	    var index  = 0
	      , length = list.length
	      , result = allocate(C, length);
	    while(length > index)result[index] = list[index++];
	    return result;
	  };
	
	  var addGetter = function(it, key, internal){
	    dP(it, key, {get: function(){ return this._d[internal]; }});
	  };
	
	  var $from = function from(source /*, mapfn, thisArg */){
	    var O       = toObject(source)
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , iterFn  = getIterFn(O)
	      , i, length, values, result, step, iterator;
	    if(iterFn != undefined && !isArrayIter(iterFn)){
	      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
	        values.push(step.value);
	      } O = values;
	    }
	    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
	    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	
	  var $of = function of(/*...items*/){
	    var index  = 0
	      , length = arguments.length
	      , result = allocate(this, length);
	    while(length > index)result[index] = arguments[index++];
	    return result;
	  };
	
	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });
	
	  var $toLocaleString = function toLocaleString(){
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	
	  var proto = {
	    copyWithin: function copyWithin(target, start /*, end */){
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /*, thisArg */){
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /*, thisArg */){
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /*, thisArg */){
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /*, thisArg */){
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /*, thisArg */){
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /*, fromIndex */){
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /*, fromIndex */){
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator){ // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /*, thisArg */){
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse(){
	      var that   = this
	        , length = validate(that).length
	        , middle = Math.floor(length / 2)
	        , index  = 0
	        , value;
	      while(index < middle){
	        value         = that[index];
	        that[index++] = that[--length];
	        that[length]  = value;
	      } return that;
	    },
	    some: function some(callbackfn /*, thisArg */){
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn){
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end){
	      var O      = validate(this)
	        , length = O.length
	        , $begin = toIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
	      );
	    }
	  };
	
	  var $slice = function slice(start, end){
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	
	  var $set = function set(arrayLike /*, offset */){
	    validate(this);
	    var offset = toOffset(arguments[1], 1)
	      , length = this.length
	      , src    = toObject(arrayLike)
	      , len    = toLength(src.length)
	      , index  = 0;
	    if(len + offset > length)throw RangeError(WRONG_LENGTH);
	    while(index < len)this[offset + index] = src[index++];
	  };
	
	  var $iterators = {
	    entries: function entries(){
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys(){
	      return arrayKeys.call(validate(this));
	    },
	    values: function values(){
	      return arrayValues.call(validate(this));
	    }
	  };
	
	  var isTAIndex = function(target, key){
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key){
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc){
	    if(isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ){
	      target[key] = desc.value;
	      return target;
	    } else return dP(target, key, desc);
	  };
	
	  if(!ALL_CONSTRUCTORS){
	    $GOPD.f = $getDesc;
	    $DP.f   = $setDesc;
	  }
	
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty:           $setDesc
	  });
	
	  if(fails(function(){ arrayToString.call({}); })){
	    arrayToString = arrayToLocaleString = function toString(){
	      return arrayJoin.call(this);
	    }
	  }
	
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice:          $slice,
	    set:            $set,
	    constructor:    function(){ /* noop */ },
	    toString:       arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function(){ return this[TYPED_ARRAY]; }
	  });
	
	  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
	    CLAMPED = !!CLAMPED;
	    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
	      , ISNT_UINT8 = NAME != 'Uint8Array'
	      , GETTER     = 'get' + KEY
	      , SETTER     = 'set' + KEY
	      , TypedArray = global[NAME]
	      , Base       = TypedArray || {}
	      , TAC        = TypedArray && getPrototypeOf(TypedArray)
	      , FORCED     = !TypedArray || !$typed.ABV
	      , O          = {}
	      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function(that, index){
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function(that, index, value){
	      var data = that._d;
	      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function(that, index){
	      dP(that, index, {
	        get: function(){
	          return getter(this, index);
	        },
	        set: function(value){
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if(FORCED){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME, '_d');
	        var index  = 0
	          , offset = 0
	          , buffer, byteLength, length, klass;
	        if(!isObject(data)){
	          length     = strictToLength(data, true)
	          byteLength = length * BYTES;
	          buffer     = new $ArrayBuffer(byteLength);
	        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if($length === undefined){
	            if($len % BYTES)throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if(TYPED_ARRAY in data){
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while(index < length)addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if(!$iterDetect(function(iter){
	      // V8 works with iterators, but fails in many other cases
	      // https://code.google.com/p/v8/issues/detail?id=4552
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
	        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
	        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
	      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
	      , $iterator         = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	
	    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
	      dP(TypedArrayPrototype, TAG, {
	        get: function(){ return NAME; }
	      });
	    }
	
	    O[NAME] = TypedArray;
	
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	
	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES,
	      from: $from,
	      of: $of
	    });
	
	    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	
	    $export($export.P, NAME, proto);
	
	    setSpecies(NAME);
	
	    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});
	
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	
	    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});
	
	    $export($export.P + $export.F * fails(function(){
	      new TypedArray(1).slice();
	    }), NAME, {slice: $slice});
	
	    $export($export.P + $export.F * (fails(function(){
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
	    }) || !fails(function(){
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, {toLocaleString: $toLocaleString});
	
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function(){ /* empty */ };

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8ClampedArray(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int16', 2, function(init){
	  return function Int16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint16', 2, function(init){
	  return function Uint16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int32', 4, function(init){
	  return function Int32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint32', 4, function(init){
	  return function Uint32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float32', 4, function(init){
	  return function Float32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float64', 8, function(init){
	  return function Float64Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , anObject  = __webpack_require__(12)
	  , rApply    = (__webpack_require__(4).Reflect || {}).apply
	  , fApply    = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(7)(function(){
	  rApply(function(){});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList){
	    var T = aFunction(target)
	      , L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export    = __webpack_require__(8)
	  , create     = __webpack_require__(46)
	  , aFunction  = __webpack_require__(21)
	  , anObject   = __webpack_require__(12)
	  , isObject   = __webpack_require__(13)
	  , fails      = __webpack_require__(7)
	  , bind       = __webpack_require__(77)
	  , rConstruct = (__webpack_require__(4).Reflect || {}).construct;
	
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function(){
	  function F(){}
	  return !(rConstruct(function(){}, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function(){
	  rConstruct(function(){});
	});
	
	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /*, newTarget*/){
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
	    if(Target == newTarget){
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch(args.length){
	        case 0: return new Target;
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args));
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto    = newTarget.prototype
	      , instance = create(isObject(proto) ? proto : Object.prototype)
	      , result   = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP          = __webpack_require__(11)
	  , $export     = __webpack_require__(8)
	  , anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16);
	
	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export  = __webpack_require__(8)
	  , gOPD     = __webpack_require__(51).f
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);
	var Enumerate = function(iterated){
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = []       // keys
	    , key;
	  for(key in iterated)keys.push(key);
	};
	__webpack_require__(130)(Enumerate, 'Object', function(){
	  var that = this
	    , keys = that._k
	    , key;
	  do {
	    if(that._i >= keys.length)return {value: undefined, done: true};
	  } while(!((key = keys[that._i++]) in that._t));
	  return {value: key, done: false};
	});
	
	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target){
	    return new Enumerate(target);
	  }
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , isObject       = __webpack_require__(13)
	  , anObject       = __webpack_require__(12);
	
	function get(target, propertyKey/*, receiver*/){
	  var receiver = arguments.length < 3 ? target : arguments[2]
	    , desc, proto;
	  if(anObject(target) === receiver)return target[propertyKey];
	  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
	}
	
	$export($export.S, 'Reflect', {get: get});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD     = __webpack_require__(51)
	  , $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export  = __webpack_require__(8)
	  , getProto = __webpack_require__(59)
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(anObject(target));
	  }
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  }
	});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export       = __webpack_require__(8)
	  , anObject      = __webpack_require__(12)
	  , $isExtensible = Object.isExtensible;
	
	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target){
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {ownKeys: __webpack_require__(243)});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN     = __webpack_require__(50)
	  , gOPS     = __webpack_require__(43)
	  , anObject = __webpack_require__(12)
	  , Reflect  = __webpack_require__(4).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
	  var keys       = gOPN.f(anObject(it))
	    , getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export            = __webpack_require__(8)
	  , anObject           = __webpack_require__(12)
	  , $preventExtensions = Object.preventExtensions;
	
	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target){
	    anObject(target);
	    try {
	      if($preventExtensions)$preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP             = __webpack_require__(11)
	  , gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , createDesc     = __webpack_require__(17)
	  , anObject       = __webpack_require__(12)
	  , isObject       = __webpack_require__(13);
	
	function set(target, propertyKey, V/*, receiver*/){
	  var receiver = arguments.length < 4 ? target : arguments[3]
	    , ownDesc  = gOPD.f(anObject(target), propertyKey)
	    , existingDescriptor, proto;
	  if(!ownDesc){
	    if(isObject(proto = getPrototypeOf(target))){
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if(has(ownDesc, 'value')){
	    if(ownDesc.writable === false || !isObject(receiver))return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}
	
	$export($export.S, 'Reflect', {set: set});

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export  = __webpack_require__(8)
	  , setProto = __webpack_require__(73);
	
	if(setProto)$export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto){
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export   = __webpack_require__(8)
	  , $includes = __webpack_require__(36)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(186)('includes');

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(8)
	  , $at     = __webpack_require__(127)(true);
	
	$export($export.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8)
	  , $pad    = __webpack_require__(250);
	
	$export($export.P, 'String', {
	  padStart: function padStart(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(37)
	  , repeat   = __webpack_require__(91)
	  , defined  = __webpack_require__(35);
	
	module.exports = function(that, maxLength, fillString, left){
	  var S            = String(defined(that))
	    , stringLength = S.length
	    , fillStr      = fillString === undefined ? ' ' : String(fillString)
	    , intMaxLength = toLength(maxLength);
	  if(intMaxLength <= stringLength || fillStr == '')return S;
	  var fillLen = intMaxLength - stringLength
	    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(8)
	  , $pad    = __webpack_require__(250);
	
	$export($export.P, 'String', {
	  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimLeft', function($trim){
	  return function trimLeft(){
	    return $trim(this, 1);
	  };
	}, 'trimStart');

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(83)('trimRight', function($trim){
	  return function trimRight(){
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	var $export     = __webpack_require__(8)
	  , defined     = __webpack_require__(35)
	  , toLength    = __webpack_require__(37)
	  , isRegExp    = __webpack_require__(134)
	  , getFlags    = __webpack_require__(196)
	  , RegExpProto = RegExp.prototype;
	
	var $RegExpStringIterator = function(regexp, string){
	  this._r = regexp;
	  this._s = string;
	};
	
	__webpack_require__(130)($RegExpStringIterator, 'RegExp String', function next(){
	  var match = this._r.exec(this._s);
	  return {value: match, done: match === null};
	});
	
	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp){
	    defined(this);
	    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
	    var S     = String(this)
	      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
	      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('asyncIterator');

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(27)('observable');

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export        = __webpack_require__(8)
	  , ownKeys        = __webpack_require__(243)
	  , toIObject      = __webpack_require__(32)
	  , gOPD           = __webpack_require__(51)
	  , createProperty = __webpack_require__(163);
	
	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O       = toIObject(object)
	      , getDesc = gOPD.f
	      , keys    = ownKeys(O)
	      , result  = {}
	      , i       = 0
	      , key;
	    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
	    return result;
	  }
	});

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(8)
	  , $values = __webpack_require__(259)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it){
	    return $values(it);
	  }
	});

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32)
	  , isEnum    = __webpack_require__(44).f;
	module.exports = function(isEntries){
	  return function(it){
	    var O      = toIObject(it)
	      , keys   = getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = []
	      , key;
	    while(length > i)if(isEnum.call(O, key = keys[i++])){
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export  = __webpack_require__(8)
	  , $entries = __webpack_require__(259)(true);
	
	$export($export.S, 'Object', {
	  entries: function entries(it){
	    return $entries(it);
	  }
	});

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(8)
	  , toObject        = __webpack_require__(58)
	  , aFunction       = __webpack_require__(21)
	  , $defineProperty = __webpack_require__(11);
	
	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter){
	    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	// Forced replacement prototype accessors methods
	module.exports = __webpack_require__(28)|| !__webpack_require__(7)(function(){
	  var K = Math.random();
	  // In FF throws only define methods
	  __defineSetter__.call(null, K, function(){ /* empty */});
	  delete __webpack_require__(4)[K];
	});

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(8)
	  , toObject        = __webpack_require__(58)
	  , aFunction       = __webpack_require__(21)
	  , $defineProperty = __webpack_require__(11);
	
	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter){
	    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(8)
	  , toObject                 = __webpack_require__(58)
	  , toPrimitive              = __webpack_require__(16)
	  , getPrototypeOf           = __webpack_require__(59)
	  , getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.get;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(8)
	  , toObject                 = __webpack_require__(58)
	  , toPrimitive              = __webpack_require__(16)
	  , getPrototypeOf           = __webpack_require__(59)
	  , getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(6) && $export($export.P + __webpack_require__(262), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.set;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(267)('Map')});

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(75)
	  , from    = __webpack_require__(268);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(206);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(8);
	
	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(267)('Set')});

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-global
	var $export = __webpack_require__(8);
	
	$export($export.S, 'System', {global: __webpack_require__(4)});

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(8)
	  , cof     = __webpack_require__(34);
	
	$export($export.S, 'Error', {
	  isError: function isError(it){
	    return cof(it) === 'Error';
	  }
	});

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  imulh: function imulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >> 16
	      , v1 = $v >> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  umulh: function umulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >>> 16
	      , v1 = $v >>> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(277)
	  , anObject                  = __webpack_require__(12)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(211)
	  , $export = __webpack_require__(8)
	  , shared  = __webpack_require__(23)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(215)));
	
	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};
	
	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;
	
	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};
	
	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(214)
	  , from                    = __webpack_require__(268)
	  , metadata                = __webpack_require__(277)
	  , anObject                = __webpack_require__(12)
	  , getPrototypeOf          = __webpack_require__(59)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};
	
	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(277)
	  , anObject                = __webpack_require__(12)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};
	
	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(277)
	  , anObject               = __webpack_require__(12)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(277)
	  , anObject                  = __webpack_require__(12)
	  , aFunction                 = __webpack_require__(21)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export   = __webpack_require__(8)
	  , microtask = __webpack_require__(209)()
	  , process   = __webpack_require__(4).process
	  , isNode    = __webpack_require__(34)(process) == 'process';
	
	$export($export.G, {
	  asap: function asap(fn){
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	var $export     = __webpack_require__(8)
	  , global      = __webpack_require__(4)
	  , core        = __webpack_require__(9)
	  , microtask   = __webpack_require__(209)()
	  , OBSERVABLE  = __webpack_require__(25)('observable')
	  , aFunction   = __webpack_require__(21)
	  , anObject    = __webpack_require__(12)
	  , anInstance  = __webpack_require__(205)
	  , redefineAll = __webpack_require__(210)
	  , hide        = __webpack_require__(10)
	  , forOf       = __webpack_require__(206)
	  , RETURN      = forOf.RETURN;
	
	var getMethod = function(fn){
	  return fn == null ? undefined : aFunction(fn);
	};
	
	var cleanupSubscription = function(subscription){
	  var cleanup = subscription._c;
	  if(cleanup){
	    subscription._c = undefined;
	    cleanup();
	  }
	};
	
	var subscriptionClosed = function(subscription){
	  return subscription._o === undefined;
	};
	
	var closeSubscription = function(subscription){
	  if(!subscriptionClosed(subscription)){
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};
	
	var Subscription = function(observer, subscriber){
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup      = subscriber(observer)
	      , subscription = cleanup;
	    if(cleanup != null){
	      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
	      else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch(e){
	    observer.error(e);
	    return;
	  } if(subscriptionClosed(this))cleanupSubscription(this);
	};
	
	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe(){ closeSubscription(this); }
	});
	
	var SubscriptionObserver = function(subscription){
	  this._s = subscription;
	};
	
	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if(m)return m.call(observer, value);
	      } catch(e){
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value){
	    var subscription = this._s;
	    if(subscriptionClosed(subscription))throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if(!m)throw value;
	      value = m.call(observer, value);
	    } catch(e){
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    } cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch(e){
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      } cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});
	
	var $Observable = function Observable(subscriber){
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};
	
	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer){
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn){
	    var that = this;
	    return new (core.Promise || global.Promise)(function(resolve, reject){
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next : function(value){
	          try {
	            return fn(value);
	          } catch(e){
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});
	
	redefineAll($Observable, {
	  from: function from(x){
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if(method){
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function(observer){
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          try {
	            if(forOf(x, false, function(it){
	              observer.next(it);
	              if(done)return RETURN;
	            }) === RETURN)return;
	          } catch(e){
	            if(done)throw e;
	            observer.error(e);
	            return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  },
	  of: function of(){
	    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
	    return new (typeof this === 'function' ? this : $Observable)(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          for(var i = 0; i < items.length; ++i){
	            observer.next(items[i]);
	            if(done)return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  }
	});
	
	hide($Observable.prototype, OBSERVABLE, function(){ return this; });
	
	$export($export.G, {Observable: $Observable});
	
	__webpack_require__(192)('Observable');

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global     = __webpack_require__(4)
	  , $export    = __webpack_require__(8)
	  , invoke     = __webpack_require__(78)
	  , partial    = __webpack_require__(289)
	  , navigator  = global.navigator
	  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	var wrap = function(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      typeof fn == 'function' ? fn : Function(fn)
	    ), time);
	  } : set;
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout:  wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var path      = __webpack_require__(290)
	  , invoke    = __webpack_require__(78)
	  , aFunction = __webpack_require__(21);
	module.exports = function(/* ...pargs */){
	  var fn     = aFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that = this
	      , aLen = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !aLen)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(aLen > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4);

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , $task   = __webpack_require__(208);
	$export($export.G + $export.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var $iterators    = __webpack_require__(193)
	  , redefine      = __webpack_require__(18)
	  , global        = __webpack_require__(4)
	  , hide          = __webpack_require__(10)
	  , Iterators     = __webpack_require__(129)
	  , wks           = __webpack_require__(25)
	  , ITERATOR      = wks('iterator')
	  , TO_STRING_TAG = wks('toStringTag')
	  , ArrayValues   = Iterators.Array;
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype
	    , key;
	  if(proto){
	    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
	    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
	  }
	}

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };
	
	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value instanceof AwaitArgument) {
	          return Promise.resolve(value.arg).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;
	
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }
	
	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }
	
	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );
	
	          if (record.type === "throw") {
	            context.delegate = null;
	
	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }
	
	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;
	
	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }
	
	          context.delegate = null;
	        }
	
	        if (method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = arg;
	
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }
	
	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          var info = {
	            value: record.arg,
	            done: context.done
	          };
	
	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }
	
	      return ContinueSentinel;
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(294)))

/***/ },
/* 294 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(296);
	module.exports = __webpack_require__(9).RegExp.escape;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(8)
	  , $re     = __webpack_require__(297)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
	
	$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ },
/* 297 */
/***/ function(module, exports) {

	module.exports = function(regExp, replace){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(it).replace(regExp, replacer);
	  };
	};

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.setLogLevel = exports.PlaybackVideoEncoder = exports.PlaybackAudioEncoder = exports.SharedObjectEventTypes = exports.FailoverSubscriberEventTypes = exports.RTCSubscriberEventTypes = exports.SubscriberEventTypes = exports.FailoverPublisherEventTypes = exports.RTCPublisherEventTypes = exports.PublisherEventTypes = exports.Red5ProSharedObject = exports.PublisherView = exports.RTCPublisher = exports.RTMPPublisher = exports.Red5ProPublisher = exports.PlaybackView = exports.RTMPSubscriber = exports.R5LiveSubscriber = exports.VideoJSSubscriber = exports.HLSSubscriber = exports.RTCSubscriber = exports.Red5ProSubscriber = exports.getLogger = exports.LogLevels = undefined;
	
	var _log = __webpack_require__(299);
	
	Object.defineProperty(exports, 'LogLevels', {
	  enumerable: true,
	  get: function get() {
	    return _log.LEVELS;
	  }
	});
	Object.defineProperty(exports, 'getLogger', {
	  enumerable: true,
	  get: function get() {
	    return _log.getLogger;
	  }
	});
	
	var _publisherEvent = __webpack_require__(302);
	
	Object.defineProperty(exports, 'PublisherEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _publisherEvent.common;
	  }
	});
	Object.defineProperty(exports, 'RTCPublisherEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _publisherEvent.rtc;
	  }
	});
	Object.defineProperty(exports, 'FailoverPublisherEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _publisherEvent.failover;
	  }
	});
	
	var _subscriberEvent = __webpack_require__(303);
	
	Object.defineProperty(exports, 'SubscriberEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _subscriberEvent.common;
	  }
	});
	Object.defineProperty(exports, 'RTCSubscriberEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _subscriberEvent.rtc;
	  }
	});
	Object.defineProperty(exports, 'FailoverSubscriberEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _subscriberEvent.failover;
	  }
	});
	
	var _sharedobjectEvent = __webpack_require__(304);
	
	Object.defineProperty(exports, 'SharedObjectEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _sharedobjectEvent.common;
	  }
	});
	
	var _playback = __webpack_require__(305);
	
	Object.defineProperty(exports, 'PlaybackAudioEncoder', {
	  enumerable: true,
	  get: function get() {
	    return _playback.PlaybackAudioEncoder;
	  }
	});
	Object.defineProperty(exports, 'PlaybackVideoEncoder', {
	  enumerable: true,
	  get: function get() {
	    return _playback.PlaybackVideoEncoder;
	  }
	});
	
	var _index = __webpack_require__(306);
	
	var subscriberLib = _interopRequireWildcard(_index);
	
	var _index2 = __webpack_require__(329);
	
	var publisherLib = _interopRequireWildcard(_index2);
	
	var _index3 = __webpack_require__(336);
	
	var sharedObjectLib = _interopRequireWildcard(_index3);
	
	var _playback2 = __webpack_require__(337);
	
	var _playback3 = _interopRequireDefault(_playback2);
	
	var _publish = __webpack_require__(338);
	
	var _publish2 = _interopRequireDefault(_publish);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/**
	 * Subscription related references.
	*/
	var Red5ProSubscriber = exports.Red5ProSubscriber = subscriberLib.Red5ProSubscriber;
	var RTCSubscriber = exports.RTCSubscriber = subscriberLib.RTCSubscriber;
	var HLSSubscriber = exports.HLSSubscriber = subscriberLib.HLSSubscriber;
	var VideoJSSubscriber = exports.VideoJSSubscriber = subscriberLib.VideoJSSubscriber;
	var R5LiveSubscriber = exports.R5LiveSubscriber = subscriberLib.R5LiveSubscriber;
	var RTMPSubscriber = exports.RTMPSubscriber = subscriberLib.RTMPSubscriber;
	exports.PlaybackView = _playback3.default;
	
	/**
	 * Broadcast related references.
	 */
	
	var Red5ProPublisher = exports.Red5ProPublisher = publisherLib.Red5ProPublisher;
	var RTMPPublisher = exports.RTMPPublisher = publisherLib.RTMPPublisher;
	var RTCPublisher = exports.RTCPublisher = publisherLib.RTCPublisher;
	exports.PublisherView = _publish2.default;
	
	/**
	 * Shared Object references.
	 */
	
	var Red5ProSharedObject = exports.Red5ProSharedObject = sharedObjectLib.Red5ProSharedObject;
	
	/**
	 * Events
	 */
	
	
	(0, _log.establishLogger)('' + ("debug") || _log.LEVELS.DEBUG); // eslint-disable-line no-undef
	(0, _log.getLogger)().debug('Red5 Pro SDK Version ' + ("3.1.1")); // eslint-disable-line no-undef
	
	var setLogLevel = exports.setLogLevel = function setLogLevel(level) {
	  if (_log.LEVELS.hasOwnProperty(level.toUpperCase())) {
	    (0, _log.establishLogger)(level);
	  }
	};

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fatal = exports.error = exports.warn = exports.debug = exports.info = exports.trace = exports.getLogger = exports.establishLogger = exports.LEVELS = undefined;
	
	var _browserBunyan = __webpack_require__(300);
	
	var _bunyanWriter = __webpack_require__(301);
	
	var logger = void 0;
	var formatMessage = function formatMessage(dispatcher) {
	  return function (message) {
	    return '(' + dispatcher + ') ' + message;
	  };
	};
	var decorate = function decorate(level) {
	  return function (source, message) {
	    logger[level](formatMessage(source)(message));
	  };
	};
	var LEVELS = exports.LEVELS = {
	  TRACE: 'trace',
	  INFO: 'info',
	  DEBUG: 'debug',
	  WARN: 'warn',
	  ERROR: 'error',
	  FATAL: 'fatal'
	};
	
	var establishLogger = exports.establishLogger = function establishLogger(level) {
	  var streamList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
	
	  var streams = [];
	  streams.push({
	    level: level,
	    stream: new _bunyanWriter.RawStream(),
	    type: 'raw'
	  });
	  if (streamList) {
	    var list = streamList.map(function (item) {
	      item.level = level;
	    });
	    streams = streams.concat(list);
	  }
	  logger = (0, _browserBunyan.createLogger)({
	    level: level,
	    name: 'red5pro-sdk',
	    streams: streams
	  });
	};
	
	var getLogger = exports.getLogger = function getLogger() {
	  return logger;
	};
	
	var trace = exports.trace = decorate(LEVELS.TRACE);
	var info = exports.info = decorate(LEVELS.INFO);
	var debug = exports.debug = decorate(LEVELS.DEBUG);
	var warn = exports.warn = decorate(LEVELS.WARN);
	var error = exports.error = decorate(LEVELS.ERROR);
	var fatal = exports.fatal = decorate(LEVELS.FATAL);

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * !This is a stripped down version of Bunyan targeted specifically for the browser
	 *
	 * -------------------------------------------------------------------------------
	 *
	 * Copyright (c) 2014 Trent Mick. All rights reserved.
	 * Copyright (c) 2014 Joyent Inc. All rights reserved.
	 *
	 * The bunyan logging library for node.js.
	 *
	 * -*- mode: js -*-
	 * vim: expandtab:ts=4:sw=4
	 */
	
	'use strict';
	
	var VERSION = '0.2.3';
	
	// Bunyan log format version. This becomes the 'v' field on all log records.
	// `0` is until I release a version '1.0.0' of node-bunyan. Thereafter,
	// starting with `1`, this will be incremented if there is any backward
	// incompatible change to the log record format. Details will be in
	// 'CHANGES.md' (the change log).
	var LOG_VERSION = 0;
	
	//---- Internal support stuff
	
	/**
	 * A shallow copy of an object. Bunyan logging attempts to never cause
	 * exceptions, so this function attempts to handle non-objects gracefully.
	 */
	function objCopy(obj) {
	    if (typeof obj === 'undefined' || obj === null) {  // null or undefined
	        return obj;
	    } else if (Array.isArray(obj)) {
	        return obj.slice();
	    } else if (typeof (obj) === 'object') {
	        var copy = {};
	        Object.keys(obj).forEach(function (k) {
	            copy[k] = obj[k];
	        });
	        return copy;
	    } else {
	        return obj;
	    }
	}
	
	var format = function(f) {
	
	    if(f === null) {
	        return 'null';
	    }
	
	    if(typeof f !== 'string') {
	        return f.toString();
	    }
	    var formatRegExp = /%[sdj%]/g;
	
	    var i = 1;
	    var args = arguments;
	    var len = args.length;
	    var str = String(f).replace(formatRegExp, function(x) {
	        if (x === '%%') {
	            return '%';
	        }
	        if (i >= len) {
	            return x;
	        }
	        switch (x) {
	            case '%s': return String(args[i++]);
	            case '%d': return Number(args[i++]);
	            case '%j':
	                try {
	                    return JSON.stringify(args[i++]);
	                } catch (_) {
	                    return '[Circular]';
	                }
	                break;
	            default:
	                return x;
	        }
	    });
	    for (var x = args[i]; i < len; x = args[++i]) {
	        str += ' ' + x;
	    }
	    return str;
	};
	
	/**
	 * Gather some caller info 3 stack levels up.
	 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
	 */
	function getCaller3Info() {
	    var obj = {};
	    var saveLimit = Error.stackTraceLimit;
	    var savePrepare = Error.prepareStackTrace;
	    Error.stackTraceLimit = 3;
	    //Error.captureStackTrace(this, getCaller3Info);
	
	    Error.prepareStackTrace = function (_, stack) {
	        var caller = stack[2];
	        obj.file = caller.getFileName();
	        obj.line = caller.getLineNumber();
	        var func = caller.getFunctionName();
	        if (func) {
	            obj.func = func;
	        }
	    };
	    Error.stackTraceLimit = saveLimit;
	    Error.prepareStackTrace = savePrepare;
	    return obj;
	}
	
	
	function _indent(s, indent) {
	    if (!indent) {
	        indent = '    ';
	    }
	    var lines = s.split(/\r?\n/g);
	    return indent + lines.join('\n' + indent);
	}
	
	
	/**
	 * Warn about an bunyan processing error.
	 *
	 * @param msg {String} Message with which to warn.
	 * @param dedupKey {String} Optional. A short string key for this warning to
	 *      have its warning only printed once.
	 */
	function _warn(msg, dedupKey) {
	    if (dedupKey) {
	        if (_warned[dedupKey]) {
	            return;
	        }
	        _warned[dedupKey] = true;
	    }
	    console.error(msg + '\n');
	}
	function _haveWarned(dedupKey) {
	    return _warned[dedupKey];
	}
	var _warned = {};
	
	
	function ConsoleRawStream() {
	}
	ConsoleRawStream.prototype.write = function (rec) {
	    if (rec.level < INFO) {
	        console.log(rec);
	    } else if (rec.level < WARN) {
	        console.info(rec);
	    } else if (rec.level < ERROR) {
	        console.warn(rec);
	    } else {
	        console.error(rec);
	    }
	
	    if(rec.err && rec.err.stack) {
	        console.error(rec.err.stack);
	    }
	};
	
	function ConsoleFormattedStream() {}
	ConsoleFormattedStream.prototype.write = function (rec) {
	
	    var levelCss, defaultCss = 'color: DimGray', msgCss = 'color: SteelBlue';
	
	    if (rec.level < (false)) {
	        levelCss = 'color: DeepPink';
	    } else if (rec.level < INFO) {
	        levelCss = 'color: GoldenRod';
	    } else if (rec.level < WARN) {
	        levelCss = 'color: DarkTurquoise';
	    } else if (rec.level < ERROR) {
	        levelCss = 'color: Purple';
	    } else if (rec.level < FATAL) {
	        levelCss = 'color: Crimson';
	    } else {
	        levelCss = 'color: Black';
	    }
	
	    var loggerName = rec.childName ? rec.name + '/' + rec.childName : rec.name;
	
	    //get level name and pad start with spacs
	    var levelName = nameFromLevel[rec.level].toUpperCase();
	    levelName = Array(6 - levelName.length).join(' ') + levelName;
	
	    function padZeros(number, len) {
	        return Array((len + 1) - (number + '').length).join('0') + number;
	    }
	
	    console.log('[%s:%s:%s:%s] %c%s%c: %s: %c%s',
	        padZeros(rec.time.getHours(), 2), padZeros(rec.time.getMinutes(), 2),
	        padZeros(rec.time.getSeconds(), 2), padZeros(rec.time.getMilliseconds(), 4),
	        levelCss, levelName,
	        defaultCss, loggerName,
	        msgCss, rec.msg);
	    if(rec.err && rec.err.stack) {
	        console.log('%c%s,', levelCss, rec.err.stack);
	    }
	};
	
	//---- Levels
	
	var TRACE = 10;
	var DEBUG = 20;
	var INFO = 30;
	var WARN = 40;
	var ERROR = 50;
	var FATAL = 60;
	
	var levelFromName = {
	    'trace': TRACE,
	    'debug': DEBUG,
	    'info': INFO,
	    'warn': WARN,
	    'error': ERROR,
	    'fatal': FATAL
	};
	var nameFromLevel = {};
	Object.keys(levelFromName).forEach(function (name) {
	    nameFromLevel[levelFromName[name]] = name;
	});
	
	
	/**
	 * Resolve a level number, name (upper or lowercase) to a level number value.
	 *
	 * @api public
	 */
	function resolveLevel(nameOrNum) {
	    var level = (typeof (nameOrNum) === 'string' ? levelFromName[nameOrNum.toLowerCase()] : nameOrNum);
	    return level;
	}
	
	
	//---- Logger class
	
	/**
	 * Create a Logger instance.
	 *
	 * @param options {Object} See documentation for full details. At minimum
	 *    this must include a 'name' string key. Configuration keys:
	 *      - `streams`: specify the logger output streams. This is an array of
	 *        objects with these fields:
	 *          - `type`: The stream type. See README.md for full details.
	 *            Often this is implied by the other fields. Examples are
	 *            'file', 'stream' and "raw".
	 *          - `level`: Defaults to 'info'.
	 *          - `path` or `stream`: The specify the file path or writeable
	 *            stream to which log records are written. E.g.
	 *            `stream: process.stdout`.
	 *          - `closeOnExit` (boolean): Optional. Default is true for a
	 *            'file' stream when `path` is given, false otherwise.
	 *        See README.md for full details.
	 *      - `level`: set the level for a single output stream (cannot be used
	 *        with `streams`)
	 *      - `stream`: the output stream for a logger with just one, e.g.
	 *        `process.stdout` (cannot be used with `streams`)
	 *      - `serializers`: object mapping log record field names to
	 *        serializing functions. See README.md for details.
	 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
	 *        field with log call source info.
	 *    All other keys are log record fields.
	 *
	 * An alternative *internal* call signature is used for creating a child:
	 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
	 *
	 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
	 *    (a) only add fields (no config) and (b) no serialization handling is
	 *    required for them. IOW, this is a fast path for frequent child
	 *    creation.
	 */
	function Logger(options, _childOptions, _childSimple) {
	    if (!(this instanceof Logger)) {
	        return new Logger(options, _childOptions);
	    }
	
	    // Input arg validation.
	    var parent;
	    if (_childOptions !== undefined) {
	        parent = options;
	        options = _childOptions;
	        if (!(parent instanceof Logger)) {
	            throw new TypeError(
	                'invalid Logger creation: do not pass a second arg');
	        }
	    }
	    if (!options) {
	        throw new TypeError('options (object) is required');
	    }
	    if (!parent) {
	        if (!options.name) {
	            throw new TypeError('options.name (string) is required');
	        }
	    } else {
	        if (options.name) {
	            throw new TypeError(
	                'invalid options.name: child cannot set logger name');
	        }
	    }
	    if (options.stream && options.streams) {
	        throw new TypeError('cannot mix "streams" and "stream" options');
	    }
	    if (options.streams && !Array.isArray(options.streams)) {
	        throw new TypeError('invalid options.streams: must be an array');
	    }
	    if (options.serializers && (typeof (options.serializers) !== 'object' || Array.isArray(options.serializers))) {
	        throw new TypeError('invalid options.serializers: must be an object');
	    }
	
	    var fields, name, i;
	
	    // Fast path for simple child creation.
	    if (parent && _childSimple) {
	        // `_isSimpleChild` is a signal to stream close handling that this child
	        // owns none of its streams.
	        this._isSimpleChild = true;
	
	        this._level = parent._level;
	        this.streams = parent.streams;
	        this.serializers = parent.serializers;
	        this.src = parent.src;
	        fields = this.fields = {};
	        var parentFieldNames = Object.keys(parent.fields);
	        for (i = 0; i < parentFieldNames.length; i++) {
	            name = parentFieldNames[i];
	            fields[name] = parent.fields[name];
	        }
	        var names = Object.keys(options);
	        for (i = 0; i < names.length; i++) {
	            name = names[i];
	            fields[name] = options[name];
	        }
	        return;
	    }
	
	    // Null values.
	    var self = this;
	    if (parent) {
	        this._level = parent._level;
	        this.streams = [];
	        for (i = 0; i < parent.streams.length; i++) {
	            var s = objCopy(parent.streams[i]);
	            s.closeOnExit = false; // Don't own parent stream.
	            this.streams.push(s);
	        }
	        this.serializers = objCopy(parent.serializers);
	        this.src = parent.src;
	        this.fields = objCopy(parent.fields);
	        if (options.level) {
	            this.level(options.level);
	        }
	    } else {
	        this._level = Number.POSITIVE_INFINITY;
	        this.streams = [];
	        this.serializers = null;
	        this.src = false;
	        this.fields = {};
	    }
	
	    // Handle *config* options (i.e. options that are not just plain data
	    // for log records).
	    if (options.stream) {
	        self.addStream({
	            type: 'stream',
	            stream: options.stream,
	            closeOnExit: false,
	            level: options.level
	        });
	    } else if (options.streams) {
	        options.streams.forEach(function (s) {
	            self.addStream(s, options.level);
	        });
	    } else if (parent && options.level) {
	        this.level(options.level);
	    } else if (!parent) {
	
	        /*
	         * In the browser we'll be emitting to console.log by default.
	         * Any console.log worth its salt these days can nicely render
	         * and introspect objects (e.g. the Firefox and Chrome console)
	         * so let's emit the raw log record. Are there browsers for which
	         * that breaks things?
	         */
	        self.addStream({
	            type: 'raw',
	            stream: new ConsoleRawStream(),
	            closeOnExit: false,
	            level: options.level
	        });
	
	    }
	    if (options.serializers) {
	        self.addSerializers(options.serializers);
	    }
	    if (options.src) {
	        this.src = true;
	    }
	
	    // Fields.
	    // These are the default fields for log records (minus the attributes
	    // removed in this constructor). To allow storing raw log records
	    // (unrendered), `this.fields` must never be mutated. Create a copy for
	    // any changes.
	    fields = objCopy(options);
	    delete fields.stream;
	    delete fields.level;
	    delete fields.streams;
	    delete fields.serializers;
	    delete fields.src;
	    if (this.serializers) {
	        this._applySerializers(fields);
	    }
	    Object.keys(fields).forEach(function (k) {
	        self.fields[k] = fields[k];
	    });
	}
	
	/**
	 * Add a stream
	 *
	 * @param stream {Object}. Object with these fields:
	 *    - `type`: The stream type. See README.md for full details.
	 *      Often this is implied by the other fields. Examples are
	 *      'file', 'stream' and "raw".
	 *    - `path` or `stream`: The specify the file path or writeable
	 *      stream to which log records are written. E.g.
	 *      `stream: process.stdout`.
	 *    - `level`: Optional. Falls back to `defaultLevel`.
	 *    - `closeOnExit` (boolean): Optional. Default is true for a
	 *      'file' stream when `path` is given, false otherwise.
	 *    See README.md for full details.
	 * @param defaultLevel {Number|String} Optional. A level to use if
	 *      `stream.level` is not set. If neither is given, this defaults to INFO.
	 */
	Logger.prototype.addStream = function addStream(s, defaultLevel) {
	    var self = this;
	    if (defaultLevel === null || defaultLevel === undefined) {
	        defaultLevel = INFO;
	    }
	
	    s = objCopy(s);
	
	    // Implicit 'type' from other args.
	    if (!s.type && s.stream) {
	        s.type = 'raw';
	    }
	    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.
	
	    if (s.level) {
	        s.level = resolveLevel(s.level);
	    } else {
	        s.level = resolveLevel(defaultLevel);
	    }
	    if (s.level < self._level) {
	        self._level = s.level;
	    }
	
	    switch (s.type) {
	        case 'stream':
	            if (!s.closeOnExit) {
	                s.closeOnExit = false;
	            }
	            break;
	        case 'raw':
	            if (!s.closeOnExit) {
	                s.closeOnExit = false;
	            }
	            break;
	        default:
	            throw new TypeError('unknown stream type "' + s.type + '"');
	    }
	
	    self.streams.push(s);
	    delete self.haveNonRawStreams;  // reset
	};
	
	
	/**
	 * Add serializers
	 *
	 * @param serializers {Object} Optional. Object mapping log record field names
	 *    to serializing functions. See README.md for details.
	 */
	Logger.prototype.addSerializers = function addSerializers(serializers) {
	    var self = this;
	
	    if (!self.serializers) {
	        self.serializers = {};
	    }
	    Object.keys(serializers).forEach(function (field) {
	        var serializer = serializers[field];
	        if (typeof (serializer) !== 'function') {
	            throw new TypeError(format(
	                'invalid serializer for "%s" field: must be a function',
	                field));
	        } else {
	            self.serializers[field] = serializer;
	        }
	    });
	};
	
	
	/**
	 * Create a child logger, typically to add a few log record fields.
	 *
	 * This can be useful when passing a logger to a sub-component, e.g. a
	 * 'wuzzle' component of your service:
	 *
	 *    var wuzzleLog = log.child({component: 'wuzzle'})
	 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
	 *
	 * Then log records from the wuzzle code will have the same structure as
	 * the app log, *plus the component='wuzzle' field*.
	 *
	 * @param options {Object} Optional. Set of options to apply to the child.
	 *    All of the same options for a new Logger apply here. Notes:
	 *      - The parent's streams are inherited and cannot be removed in this
	 *        call. Any given `streams` are *added* to the set inherited from
	 *        the parent.
	 *      - The parent's serializers are inherited, though can effectively be
	 *        overwritten by using duplicate keys.
	 *      - Can use `level` to set the level of the streams inherited from
	 *        the parent. The level for the parent is NOT affected.
	 * @param simple {Boolean} Optional. Set to true to assert that `options`
	 *    (a) only add fields (no config) and (b) no serialization handling is
	 *    required for them. IOW, this is a fast path for frequent child
	 *    creation. See 'tools/timechild.js' for numbers.
	 */
	Logger.prototype.child = function (options, simple) {
	    return new (this.constructor)(this, options || {}, simple);
	};
	
	/**
	 * Get/set the level of all streams on this logger.
	 *
	 * Get Usage:
	 *    // Returns the current log level (lowest level of all its streams).
	 *    log.level() -> INFO
	 *
	 * Set Usage:
	 *    log.level(INFO)       // set all streams to level INFO
	 *    log.level('info')     // can use 'info' et al aliases
	 */
	Logger.prototype.level = function level(value) {
	    if (value === undefined) {
	        return this._level;
	    }
	    var newLevel = resolveLevel(value);
	    var len = this.streams.length;
	    for (var i = 0; i < len; i++) {
	        this.streams[i].level = newLevel;
	    }
	    this._level = newLevel;
	};
	
	
	/**
	 * Get/set the level of a particular stream on this logger.
	 *
	 * Get Usage:
	 *    // Returns an array of the levels of each stream.
	 *    log.levels() -> [TRACE, INFO]
	 *
	 *    // Returns a level of the identified stream.
	 *    log.levels(0) -> TRACE      // level of stream at index 0
	 *    log.levels('foo')           // level of stream with name 'foo'
	 *
	 * Set Usage:
	 *    log.levels(0, INFO)         // set level of stream 0 to INFO
	 *    log.levels(0, 'info')       // can use 'info' et al aliases
	 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
	 *
	 * Stream names: When streams are defined, they can optionally be given
	 * a name. For example,
	 *       log = new Logger({
	 *         streams: [
	 *           {
	 *             name: 'foo',
	 *             path: '/var/log/my-service/foo.log'
	 *             level: 'trace'
	 *           },
	 *         ...
	 *
	 * @param name {String|Number} The stream index or name.
	 * @param value {Number|String} The level value (INFO) or alias ('info').
	 *    If not given, this is a 'get' operation.
	 * @throws {Error} If there is no stream with the given name.
	 */
	Logger.prototype.levels = function levels(name, value) {
	    if (name === undefined) {
	        return this.streams.map(
	            function (s) {
	                return s.level;
	            });
	    }
	    var stream;
	    if (typeof (name) === 'number') {
	        stream = this.streams[name];
	        if (stream === undefined) {
	            throw new Error('invalid stream index: ' + name);
	        }
	    } else {
	        var len = this.streams.length;
	        for (var i = 0; i < len; i++) {
	            var s = this.streams[i];
	            if (s.name === name) {
	                stream = s;
	                break;
	            }
	        }
	        if (!stream) {
	            throw new Error(format('no stream with name "%s"', name));
	        }
	    }
	    if (value === undefined) {
	        return stream.level;
	    } else {
	        var newLevel = resolveLevel(value);
	        stream.level = newLevel;
	        if (newLevel < this._level) {
	            this._level = newLevel;
	        }
	    }
	};
	
	
	/**
	 * Apply registered serializers to the appropriate keys in the given fields.
	 *
	 * Pre-condition: This is only called if there is at least one serializer.
	 *
	 * @param fields (Object) The log record fields.
	 * @param excludeFields (Object) Optional mapping of keys to `true` for
	 *    keys to NOT apply a serializer.
	 */
	Logger.prototype._applySerializers = function (fields, excludeFields) {
	    var self = this;
	
	    // Check each serializer against these (presuming number of serializers
	    // is typically less than number of fields).
	    Object.keys(this.serializers).forEach(function (name) {
	        if (fields[name] === undefined ||
	            (excludeFields && excludeFields[name])) {
	            return;
	        }
	        try {
	            fields[name] = self.serializers[name](fields[name]);
	        } catch (err) {
	            _warn(format('bunyan: ERROR: Exception thrown from the "%s" ' +
	                    'Bunyan serializer. This should never happen. This is a bug' +
	                    'in that serializer function.\n%s',
	                name, err.stack || err));
	            fields[name] = format('(Error in Bunyan log "%s" serializer broke field. See stderr for details.)', name);
	        }
	    });
	};
	
	
	/**
	 * Emit a log record.
	 *
	 * @param rec {log record}
	 * @param noemit {Boolean} Optional. Set to true to skip emission
	 *      and just return the JSON string.
	 */
	Logger.prototype._emit = function (rec, noemit) {
	    var i;
	
	    // Lazily determine if this Logger has non-'raw' streams. If there are
	    // any, then we need to stringify the log record.
	    if (this.haveNonRawStreams === undefined) {
	        this.haveNonRawStreams = false;
	        for (i = 0; i < this.streams.length; i++) {
	            if (!this.streams[i].raw) {
	                this.haveNonRawStreams = true;
	                break;
	            }
	        }
	    }
	
	    // Stringify the object. Attempt to warn/recover on error.
	    var str;
	    if (noemit || this.haveNonRawStreams) {
	        try {
	            str = JSON.stringify(rec, safeCycles()) + '\n';
	        } catch (e) {
	            var dedupKey = e.stack.split(/\n/g, 2).join('\n');
	            _warn('bunyan: ERROR: Exception in ' +
	                    '`JSON.stringify(rec)`. You can install the ' +
	                    '"safe-json-stringify" module to have Bunyan fallback ' +
	                    'to safer stringification. Record:\n' +
	                    _indent(format('%s\n%s', rec, e.stack)),
	                dedupKey);
	            str = format('(Exception in JSON.stringify(rec): %j. See stderr for details.)\n', e.message);
	
	        }
	    }
	
	    if (noemit) {
	        return str;
	    }
	
	
	    var level = rec.level;
	    for (i = 0; i < this.streams.length; i++) {
	        var s = this.streams[i];
	        if (s.level <= level) {
	            s.stream.write(s.raw ? rec : str);
	        }
	    }
	
	    return str;
	};
	
	
	/**
	 * Build a log emitter function for level minLevel. I.e. this is the
	 * creator of `log.info`, `log.error`, etc.
	 */
	function mkLogEmitter(minLevel) {
	    return function () {
	        var log = this;
	
	        function mkRecord(args) {
	            var excludeFields;
	            if (args[0] instanceof Error) {
	                // `log.<level>(err, ...)`
	                fields = {
	                    // Use this Logger's err serializer, if defined.
	                    err: (log.serializers && log.serializers.err ? log.serializers.err(args[0]) : Logger.stdSerializers.err(args[0]))
	                };
	                excludeFields = {err: true};
	                if (args.length === 1) {
	                    msgArgs = [fields.err.message];
	                } else {
	                    msgArgs = Array.prototype.slice.call(args, 1);
	                }
	            } else if (typeof (args[0]) !== 'object' && args[0] !== null ||
	                Array.isArray(args[0])) {
	                // `log.<level>(msg, ...)`
	                fields = null;
	                msgArgs = Array.prototype.slice.call(args);
	            } else {  // `log.<level>(fields, msg, ...)`
	                fields = args[0];
	                msgArgs = Array.prototype.slice.call(args, 1);
	            }
	
	            // Build up the record object.
	            var rec = objCopy(log.fields);
	            rec.level = minLevel;
	            var recFields = (fields ? objCopy(fields) : null);
	            if (recFields) {
	                if (log.serializers) {
	                    log._applySerializers(recFields, excludeFields);
	                }
	                Object.keys(recFields).forEach(function (k) {
	                    rec[k] = recFields[k];
	                });
	            }
	            rec.levelName = nameFromLevel[minLevel];
	            rec.msg = format.apply(log, msgArgs);
	            if (!rec.time) {
	                rec.time = (new Date());
	            }
	            // Get call source info
	            if (log.src && !rec.src) {
	                rec.src = getCaller3Info();
	            }
	            rec.v = LOG_VERSION;
	
	            return rec;
	        }
	
	        var fields = null;
	        var msgArgs = arguments;
	        var rec = null;
	        if (!this._emit) {
	            /*
	             * Show this invalid Bunyan usage warning *once*.
	             *
	             * See <https://github.com/trentm/node-bunyan/issues/100> for
	             * an example of how this can happen.
	             */
	            var dedupKey = 'unbound';
	            if (!_haveWarned[dedupKey]) {
	                var caller = getCaller3Info();
	                _warn(format('bunyan usage error: %s:%s: attempt to log with an unbound log method: `this` is: %s',
	                        caller.file, caller.line, this.toString()),
	                    dedupKey);
	            }
	            return;
	        } else if (arguments.length === 0) {   // `log.<level>()`
	            return (this._level <= minLevel);
	        } else if (this._level > minLevel) {
	            /* pass through */
	        } else {
	            rec = mkRecord(msgArgs);
	            this._emit(rec);
	        }
	    };
	}
	
	
	/**
	 * The functions below log a record at a specific level.
	 *
	 * Usages:
	 *    log.<level>()  -> boolean is-trace-enabled
	 *    log.<level>(<Error> err, [<string> msg, ...])
	 *    log.<level>(<string> msg, ...)
	 *    log.<level>(<object> fields, <string> msg, ...)
	 *
	 * where <level> is the lowercase version of the log level. E.g.:
	 *
	 *    log.info()
	 *
	 * @params fields {Object} Optional set of additional fields to log.
	 * @params msg {String} Log message. This can be followed by additional
	 *    arguments that are handled like
	 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
	 */
	Logger.prototype.trace = mkLogEmitter(TRACE);
	Logger.prototype.debug = mkLogEmitter(DEBUG);
	Logger.prototype.info = mkLogEmitter(INFO);
	Logger.prototype.warn = mkLogEmitter(WARN);
	Logger.prototype.error = mkLogEmitter(ERROR);
	Logger.prototype.fatal = mkLogEmitter(FATAL);
	
	
	//---- Standard serializers
	// A serializer is a function that serializes a JavaScript object to a
	// JSON representation for logging. There is a standard set of presumed
	// interesting objects in node.js-land.
	
	Logger.stdSerializers = {};
	
	/*
	 * This function dumps long stack traces for exceptions having a cause()
	 * method. The error classes from
	 * [verror](https://github.com/davepacheco/node-verror) and
	 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
	 *
	 * Based on `dumpException` in
	 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
	 */
	function getFullErrorStack(ex) {
	    var ret = ex.stack || ex.toString();
	    if (ex.cause && typeof (ex.cause) === 'function') {
	        var cex = ex.cause();
	        if (cex) {
	            ret += '\nCaused by: ' + getFullErrorStack(cex);
	        }
	    }
	    return (ret);
	}
	
	// Serialize an Error object
	// (Core error properties are enumerable in node 0.4, not in 0.6).
	Logger.stdSerializers.err = function(err) {
	    if (!err || !err.stack) {
	        return err;
	    }
	
	    var obj = {
	        message: err.message,
	        name: err.name,
	        stack: getFullErrorStack(err),
	        code: err.code,
	        signal: err.signal
	    };
	    return obj;
	};
	
	
	// A JSON stringifier that handles cycles safely.
	// Usage: JSON.stringify(obj, safeCycles())
	function safeCycles() {
	    var seen = [];
	    return function (key, val) {
	        if (!val || typeof (val) !== 'object') {
	            return val;
	        }
	        if (seen.indexOf(val) !== -1) {
	            return '[Circular]';
	        }
	        seen.push(val);
	        return val;
	    };
	}
	
	//---- Exports
	
	module.exports = Logger;
	
	module.exports.TRACE = TRACE;
	module.exports.DEBUG = DEBUG;
	module.exports.INFO = INFO;
	module.exports.WARN = WARN;
	module.exports.ERROR = ERROR;
	module.exports.FATAL = FATAL;
	module.exports.resolveLevel = resolveLevel;
	module.exports.levelFromName = levelFromName;
	module.exports.nameFromLevel = nameFromLevel;
	
	module.exports.VERSION = VERSION;
	module.exports.LOG_VERSION = LOG_VERSION;
	
	module.exports.createLogger = function createLogger(options) {
	    return new Logger(options);
	};
	
	// Useful for custom `type == 'raw'` streams that may do JSON stringification
	// of log records themselves. Usage:
	//    var str = JSON.stringify(rec, bunyan.safeCycles());
	module.exports.safeCycles = safeCycles;
	
	//streams
	module.exports.ConsoleFormattedStream = ConsoleFormattedStream;
	module.exports.ConsoleRawStream = ConsoleRawStream;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RawStream = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _browserBunyan = __webpack_require__(300);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RawStream = exports.RawStream = function () {
	  function RawStream() {
	    _classCallCheck(this, RawStream);
	  }
	
	  _createClass(RawStream, [{
	    key: 'write',
	    value: function write(rec) {
	      console.log('[%s] %s: %s',
	      //                rec.time.toISOString(),
	      rec.name, _browserBunyan.nameFromLevel[rec.level], rec.msg);
	    }
	  }]);

	  return RawStream;
	}();

/***/ },
/* 302 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var common = exports.common = Object.freeze({
	  CONNECT_SUCCESS: 'Connect.Success',
	  CONNECT_FAILURE: 'Connect.Failure',
	  PUBLISH_START: 'Publish.Start',
	  PUBLISH_FAIL: 'Publish.Fail',
	  PUBLISH_INVALID_NAME: 'Publish.InvalidName',
	  UNPUBLISH_SUCCESS: 'Unpublish.Success',
	  PUBLISH_METADATA: 'Publish.Metadata'
	});
	
	var failover = exports.failover = Object.freeze({
	  PUBLISHER_REJECT: 'Publisher.Reject',
	  PUBLISHER_ACCEPT: 'Publisher.Accept'
	});
	
	var rtc = exports.rtc = Object.freeze({
	  MEDIA_STREAM_AVAILABLE: 'WebRTC.MediaStream.Available',
	  PEER_CONNECTION_AVAILABLE: 'WebRTC.PeerConnection.Available',
	  OFFER_START: 'WebRTC.Offer.Start',
	  OFFER_END: 'WebRTC.Offer.End',
	  ICE_TRICKLE_COMPLETE: 'WebRTC.IceTrickle.Complete'
	});
	
	var rtmp = exports.rtmp = Object.freeze({
	  EMBED_SUCCESS: 'FlashPlayer.Embed.Success',
	  EMBED_FAILURE: 'FlashPlayer.Embed.Failure'
	});

/***/ },
/* 303 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var common = exports.common = Object.freeze({
	  CONNECT_SUCCESS: 'Connect.Success',
	  CONNECT_FAILURE: 'Connect.Failure',
	  SUBSCRIBE_START: 'Subscribe.Start',
	  SUBSCRIBE_STOP: 'Subscribe.Stop',
	  SUBSCRIBE_FAIL: 'Subscribe.Fail',
	  SUBSCRIBE_INVALID_NAME: 'Subscribe.InvalidName',
	  SUBSCRIBE_METADATA: 'Subscribe.Metadata',
	  PLAY_UNPUBLISH: 'Subscriber.Play.Unpublish',
	  CONNECTION_CLOSED: 'Subscriber.Connection.Closed'
	});
	
	var failover = exports.failover = Object.freeze({
	  SUBSCRIBER_REJECT: 'Subscriber.Reject',
	  SUBSCRIBER_ACCEPT: 'Subscriber.Accept'
	});
	
	var rtc = exports.rtc = Object.freeze({
	  PEER_CONNECTION_AVAILABLE: 'WebRTC.PeerConnection.Available',
	  OFFER_START: 'WebRTC.Offer.Start',
	  OFFER_END: 'WebRTC.Offer.End',
	  ANSWER_START: 'WebRTC.Answer.Start',
	  ANSWER_END: 'WebRTC.Answer.End',
	  CANDIDATE_START: 'WebRTC.Candidate.Start',
	  CANDIDATE_END: 'WebRTC.Candidate.End',
	  ICE_TRICKLE_COMPLETE: 'WebRTC.IceTrickle.Complete'
	});
	
	var rtmp = exports.rtmp = Object.freeze({
	  EMBED_SUCCESS: 'FlashPlayer.Embed.Success',
	  EMBED_FAILURE: 'FlashPlayer.Embed.Failure'
	});

/***/ },
/* 304 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var common = exports.common = Object.freeze({
	  CONNECT_SUCCESS: 'Connect.Success',
	  CONNECT_FAILURE: 'Connect.Failure',
	  PROPERTY_UPDATE: 'SharedObject.PropertyUpdate',
	  METHOD_UPDATE: 'SharedObject.MethodUpdate'
	});

/***/ },
/* 305 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var PlaybackTypes = exports.PlaybackTypes = Object.freeze({
	  RTMP: 'rtmp',
	  RTC: 'rtc',
	  HLS: 'hls'
	});
	
	var PlaybackAudioEncoder = exports.PlaybackAudioEncoder = Object.freeze({
	  OPUS: 'Opus',
	  PCMU: 'PCMU',
	  PCMA: 'PCMA',
	  SPEEX: 'Speex',
	  NONE: 'NONE'
	});
	
	var PlaybackVideoEncoder = exports.PlaybackVideoEncoder = Object.freeze({
	  VP8: 'VP8',
	  H264: 'H264',
	  NONE: 'NONE'
	});

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Main entry for failover support of all subscriber implementations.
	 */
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RTMPSubscriber = exports.R5LiveSubscriber = exports.VideoJSSubscriber = exports.HLSSubscriber = exports.RTCSubscriber = exports.Red5ProSubscriber = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _red5proRtc = __webpack_require__(308);
	
	var _red5proRtc2 = _interopRequireDefault(_red5proRtc);
	
	var _red5proHls = __webpack_require__(319);
	
	var _red5proHls2 = _interopRequireDefault(_red5proHls);
	
	var _red5proRtmp = __webpack_require__(322);
	
	var _red5proRtmp2 = _interopRequireDefault(_red5proRtmp);
	
	var _red5proRtmpLive = __webpack_require__(324);
	
	var _red5proRtmpLive2 = _interopRequireDefault(_red5proRtmpLive);
	
	var _red5proRtmpVideojs = __webpack_require__(323);
	
	var _red5proRtmpVideojs2 = _interopRequireDefault(_red5proRtmpVideojs);
	
	var _implFactoryOrder = __webpack_require__(328);
	
	var _implFactoryOrder2 = _interopRequireDefault(_implFactoryOrder);
	
	var _promise = __webpack_require__(310);
	
	var _playback = __webpack_require__(305);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProSubscriber';
	var playbackFactory = new _implFactoryOrder2.default();
	
	var playbackImpl = function () {
	  var map = new Map();
	  map.set(_playback.PlaybackTypes.RTMP, _red5proRtmp2.default);
	  map.set(_playback.PlaybackTypes.RTC, _red5proRtc2.default);
	  map.set(_playback.PlaybackTypes.HLS, _red5proHls2.default);
	  return map;
	}();
	
	var Red5ProSubscriber = function (_EventEmitter) {
	  _inherits(Red5ProSubscriber, _EventEmitter);
	
	  function Red5ProSubscriber() {
	    _classCallCheck(this, Red5ProSubscriber);
	
	    // Configuration options
	    var _this = _possibleConstructorReturn(this, (Red5ProSubscriber.__proto__ || Object.getPrototypeOf(Red5ProSubscriber)).call(this));
	
	    _this._options = undefined;
	    // The playback view
	    _this._view = undefined;
	    // Selected failover subscriber.
	    _this._currentSubscriber = undefined;
	    // Default order.
	    _this._order = [_playback.PlaybackTypes.RTMP, _playback.PlaybackTypes.RTC, _playback.PlaybackTypes.HLS];
	    _this._boundBubbleSubscriberEvent = _this.bubbleSubscriberEvent.bind(_this);
	    return _this;
	  }
	
	  _createClass(Red5ProSubscriber, [{
	    key: 'getPlaybackOrder',
	    value: function getPlaybackOrder() {
	      return this._order;
	    }
	  }, {
	    key: 'setPlaybackOrder',
	    value: function setPlaybackOrder(order) {
	      // Allow for string value to define single item in order.
	      order = typeof order === 'string' ? [order] : order;
	
	      // Filter out values not available in enumeration of playback types.
	      var t = order.filter(function (entry) {
	        var key = void 0;
	        for (key in _playback.PlaybackTypes) {
	          if (_playback.PlaybackTypes[key].toLowerCase() === entry.toLowerCase()) {
	            return true;
	          }
	        }
	        return false;
	      }).map(function (entry) {
	        return entry.toLowerCase();
	      });
	
	      // Define new order.
	      this._order = [].concat(_toConsumableArray(new Set(t)));
	      (0, _log.debug)(NAME, '[orderupdate]: ' + this._order);
	      return this;
	    }
	  }, {
	    key: 'setView',
	    value: function setView(playbackView) {
	      this._view = playbackView;
	      return this;
	    }
	  }, {
	    key: 'getPlaybackFromOrder',
	    value: function getPlaybackFromOrder(order, options) {
	      return playbackFactory.create(order, playbackImpl, options, 'init');
	    }
	  }, {
	    key: 'init',
	    value: function init(options) {
	      var _this2 = this;
	
	      this._options = options;
	      var deferred = new _promise.DeferredPromise();
	      (0, _log.debug)(NAME, '[play]');
	      this.getPlaybackFromOrder(this._order, this._options).then(function (subscriber) {
	        (0, _log.debug)(NAME, '[playsuccess]: subscriber found ' + subscriber.getType());
	        subscriber.on('*', _this2._boundBubbleSubscriberEvent);
	        _this2._currentSubscriber = subscriber;
	        if (_this2._view) {
	          _this2._currentSubscriber.setView(_this2._view);
	        }
	        deferred.resolve(_this2._currentSubscriber);
	      }).catch(function (err) {
	        (0, _log.warn)(NAME, '[playerror]: Could not implement a subscriber: ' + err);
	        deferred.reject(err);
	      });
	      return deferred.promise;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      var _this3 = this;
	
	      var deferred = new _promise.DeferredPromise();
	      if (!this._currentSubscriber) {
	        (0, _log.warn)(NAME, '[stop]: Could not invoke stop() on undefined subscriber.');
	        deferred.reject('A current subscriber is not available to issue a :stop() command to.');
	      } else {
	        (0, _log.debug)(NAME, '[stop]: Invoking stop on held subscriber.');
	        this._currentSubscriber.stop().then(function () {
	          (0, _log.debug)(NAME, '[stopsuccess]');
	          _this3._currentSubscriber.off('*', _this3._boundBubbleSubscriberEvent);
	          _this3._currentSubscriber = undefined;
	          deferred.resolve();
	        }).catch(function (err) {
	          (0, _log.debug)(NAME, '[stoperror]: ' + err);
	          if (_this3._currentSubscriber) {
	            _this3._currentSubscriber.off('*', _this3._boundBubbleSubscriberEvent);
	          }
	          _this3._currentSubscriber = undefined;
	          deferred.reject(err);
	        });
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'bubbleSubscriberEvent',
	    value: function bubbleSubscriberEvent(subscriberEvent) {
	      this.trigger.call(this, subscriberEvent);
	    }
	  }, {
	    key: 'playbackTypes',
	    get: function get() {
	      return _playback.PlaybackTypes;
	    }
	  }, {
	    key: 'currentSubscriber',
	    get: function get() {
	      return this._currentSubscriber;
	    }
	  }]);
	
	  return Red5ProSubscriber;
	}(_eventEmitter2.default);
	
	exports.Red5ProSubscriber = Red5ProSubscriber;
	exports.RTCSubscriber = _red5proRtc2.default;
	exports.HLSSubscriber = _red5proHls2.default;
	exports.VideoJSSubscriber = _red5proRtmpVideojs2.default;
	exports.R5LiveSubscriber = _red5proRtmpLive2.default;
	/**
	 * Using the RTMPSubscriber will determine the RTMP-based Subscriber
	 * to be used based on `options.useVideoJS` property.
	 *
	 * If `options.useVideoJS` is left undefined, it will default to `true`
	 * If `options.useVideoJs` is defined, it is required to be a boolean value
	 *
	 * true: VideoJSSubscriber - utilizes the videojs lib and custom SWF.
	 * false: R5LiveSubscriber - utilized the default "live" SWF shipped with Red5 Pro examples.
	*/
	
	var RTMPSubscriber = exports.RTMPSubscriber = _red5proRtmp2.default;

/***/ },
/* 307 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var WILDCARD = '*';
	var WILDCARD_KEY = 'RED5PRO';
	
	var EventEmitter = function () {
	  function EventEmitter() {
	    _classCallCheck(this, EventEmitter);
	
	    this._callbacks = {};
	    this._callbacks[WILDCARD_KEY] = [];
	  }
	
	  _createClass(EventEmitter, [{
	    key: '_notify',
	    value: function _notify(callbacks, event) {
	      var i = void 0,
	          length = callbacks.length;
	      for (i = 0; i < length; i++) {
	        callbacks[i](event);
	      }
	    }
	  }, {
	    key: 'on',
	    value: function on(type, fn) {
	      if (typeof fn !== 'function') {
	        return;
	      }
	
	      if (type === WILDCARD) {
	        this._callbacks[WILDCARD_KEY].push(fn);
	        return;
	      }
	
	      if (this._callbacks[type] === undefined) {
	        this._callbacks[type] = [];
	      }
	
	      if (this._callbacks[type].indexOf(fn) === -1) {
	        this._callbacks[type].push(fn);
	      }
	    }
	  }, {
	    key: 'off',
	    value: function off(type, fn) {
	      var map = this._callbacks[type];
	      if (type === WILDCARD) {
	        map = this._callbacks[WILDCARD_KEY];
	      }
	      if (map) {
	        var index = map.indexOf(fn);
	        if (index !== -1) {
	          map.splice(index, 1);
	        }
	      }
	    }
	  }, {
	    key: 'trigger',
	    value: function trigger(event) {
	      var type = event.type;
	      if (this._callbacks[type]) {
	        this._notify(this._callbacks[type], event);
	      }
	      this._notify(this._callbacks[WILDCARD_KEY], event);
	    }
	  }]);
	
	  return EventEmitter;
	}();
	
	exports.default = EventEmitter;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _event = __webpack_require__(313);
	
	var _socketHelperSub = __webpack_require__(314);
	
	var _socketHelperSub2 = _interopRequireDefault(_socketHelperSub);
	
	var _webrtcHelperSub = __webpack_require__(317);
	
	var _webrtcHelperSub2 = _interopRequireDefault(_webrtcHelperSub);
	
	var _promise = __webpack_require__(310);
	
	var _webrtc = __webpack_require__(318);
	
	var webrtc = _interopRequireWildcard(_webrtc);
	
	var _websocket = __webpack_require__(316);
	
	var websocket = _interopRequireWildcard(_websocket);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProRTCSubscriber';
	var defaultOptions = {
	  streamType: 'webrtc'
	};
	var generateSubscriptionId = function generateSubscriptionId() {
	  var id = Math.floor(Math.random() * 0x10000).toString(16);
	  return 'subscriber-' + id;
	};
	var endpointFromOptions = function endpointFromOptions(options) {
	  var protocol = options.wsprotocol || options.protocol;
	  var port = options.wsport || options.port;
	  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
	  var endpoint = protocol + '://' + options.host + ':' + port + '/' + appEndpoint + '?id=' + options.subscriptionId;
	  if (typeof options.connectionParams !== 'undefined') {
	    (function () {
	      var params = [];
	      Object.keys(options.connectionParams).forEach(function (key, index) {
	        // eslint-disable-line no-unused-vars
	        params.push([key, options.connectionParams[key]].join('='));
	      });
	      if (params.length > 0) {
	        endpoint += '&' + params.join('&');
	      }
	    })();
	  }
	  return endpoint;
	};
	
	var RTCSubscriber = function (_EventEmitter) {
	  _inherits(RTCSubscriber, _EventEmitter);
	
	  function RTCSubscriber() {
	    _classCallCheck(this, RTCSubscriber);
	
	    var _this = _possibleConstructorReturn(this, (RTCSubscriber.__proto__ || Object.getPrototypeOf(RTCSubscriber)).call(this));
	
	    _this._view = undefined;
	    _this._options = undefined;
	    _this._peerHelper = undefined;
	    _this._socketHelper = undefined;
	    _this._orientation = 0;
	    return _this;
	  }
	
	  _createClass(RTCSubscriber, [{
	    key: 'init',
	    value: function init(options) {
	      var deferred = new _promise.DeferredPromise();
	      if (!webrtc.isSupported() || !websocket.isSupported()) {
	        deferred.reject('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
	      } else {
	        this._options = Object.assign({}, defaultOptions, options);
	        this._options.subscriptionId = this._options.subscriptionId || generateSubscriptionId();
	        this._peerHelper = new _webrtcHelperSub2.default(this);
	        this._socketHelper = new _socketHelperSub2.default(this);
	        deferred.resolve(this);
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'setView',
	    value: function setView(view) {
	      this._view = view;
	      //  TODO: Normalize returns to either all be chainable or not be chainable
	      return this;
	    }
	  }, {
	    key: 'requestAvailability',
	    value: function requestAvailability(streamName, type) {
	      (0, _log.debug)(NAME, '[requestavailability]');
	      // message on socket returns -> onStream(Un)Available
	      this._socketHelper.post({
	        isAvailable: streamName,
	        type: type
	      });
	      //  TODO: Normalize returns to either all be chainable or not be chainable
	      return this;
	    }
	  }, {
	    key: 'requestOffer',
	    value: function requestOffer(streamName, subscriptionId) {
	      var vEncoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
	      var aEncoding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
	
	      (0, _log.debug)(NAME, '[requestoffer]');
	      var offer = {
	        requestOffer: streamName,
	        requestId: subscriptionId
	      };
	      if (typeof vEncoding !== 'undefined') {
	        offer.videoEncoding = vEncoding;
	      }
	      if (typeof aEncoding !== 'undefined') {
	        offer.audioEncoding = aEncoding;
	      }
	      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.OFFER_START, this));
	      // message on socket returns -> onSDPOffer
	      this._socketHelper.post(offer);
	    }
	  }, {
	    key: 'requestAnswer',
	    value: function requestAnswer(sdp) {
	      var _this2 = this;
	
	      (0, _log.debug)(NAME, '[requestanswer]');
	      // invokes -> sendAnswer
	      this._peerHelper.createAnswer(sdp).then(function (sessionDescription) {
	        (0, _log.debug)(NAME, '[onanswercreated]');
	        if (_this2._options.bandwidth) {
	          sessionDescription.sdp = webrtc.updateBandwidth(_this2._options.bandwidth, sessionDescription.sdp);
	        }
	        (0, _log.debug)(NAME, '[> sendanswer]');
	        _this2.sendAnswer(_this2._options.streamName, _this2._options.subscriptionId, sessionDescription);
	      }).catch(function (error) {
	        _this2.onSDPError(error);
	      });
	    }
	  }, {
	    key: 'sendAnswer',
	    value: function sendAnswer(streamName, subscriptionId, sdp) {
	      (0, _log.debug)(NAME, '[sendanswer]: streamname(' + streamName + '), subscriptionid(' + subscriptionId + ')');
	      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.ANSWER_START, this, sdp));
	      // message on socket response -> onAddIceCandidate
	      // message on peer response -> onaddstream
	      this._socketHelper.post({
	        handleAnswer: streamName,
	        requestId: subscriptionId,
	        data: {
	          sdp: sdp
	        }
	      });
	    }
	  }, {
	    key: 'sendCandidate',
	    value: function sendCandidate(candidate) {
	      (0, _log.debug)(NAME, '[sendcandidate]');
	      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.CANDIDATE_START, this, candidate));
	      // message on peer response -> onicecandidate
	      this._socketHelper.post({
	        handleCandidate: this._options.streamName,
	        requestId: this._options.subscriptionId,
	        data: {
	          candidate: candidate
	        }
	      });
	    }
	  }, {
	    key: 'sendSubscribe',
	    value: function sendSubscribe() {
	      (0, _log.debug)(NAME, '[sendsubscribe]');
	      this._socketHelper.post({
	        subscribe: this._options.streamName,
	        requestId: this._options.subscriptionId
	      });
	    }
	  }, {
	    key: 'onStreamAvailable',
	    value: function onStreamAvailable(receipt) {
	      (0, _log.debug)(NAME, '[onstreamavailable]: ' + JSON.stringify(receipt, null, 2));
	      this._connect(this._options.iceServers);
	    }
	  }, {
	    key: 'onStreamUnavailable',
	    value: function onStreamUnavailable(receipt) {
	      (0, _log.debug)(NAME, 'Stream ' + this._options.streamName + ' does not exist.');
	      (0, _log.debug)(NAME, '[onstreamunavailable]: ' + JSON.stringify(receipt, null, 2));
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_INVALID_NAME, this));
	      this._disconnect();
	    }
	  }, {
	    key: 'onSDPSuccess',
	    value: function onSDPSuccess(receipt) {
	      (0, _log.debug)(NAME, '[onsdpsuccess]: ' + JSON.stringify(receipt, null, 2));
	    }
	  }, {
	    key: 'onSDPOffer',
	    value: function onSDPOffer(receipt) {
	      (0, _log.debug)(NAME, '[onsdpoffer]: ' + JSON.stringify(receipt, null, 2));
	      var sdp = new webrtc.RTCSessionDescription(receipt.sdp);
	      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.OFFER_END, this));
	      this.requestAnswer(sdp);
	    }
	  }, {
	    key: 'onSDPError',
	    value: function onSDPError(receipt) {
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_FAIL, this, receipt));
	      (0, _log.error)(NAME, '[onsdperror]');
	      (0, _log.error)(receipt);
	    }
	  }, {
	    key: 'onAnswerMediaStream',
	    value: function onAnswerMediaStream() {
	      var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
	      // eslint-disable-line no-unused-vars
	      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.ANSWER_END, this));
	    }
	  }, {
	    key: 'onIceCandidate',
	    value: function onIceCandidate(candidate) {
	      (0, _log.debug)(NAME, '[onicecandidate]');
	      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.CANDIDATE_END, this));
	      this.sendCandidate(candidate);
	    }
	  }, {
	    key: 'onIceCandidateTrickleEnd',
	    value: function onIceCandidateTrickleEnd(stream) {
	      (0, _log.debug)(NAME, '[onicetrickleend]');
	      this._view.attachStream(stream, this._options.autoplay || true);
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_START, this));
	    }
	  }, {
	    key: 'onAddIceCandidate',
	    value: function onAddIceCandidate(candidate) {
	      (0, _log.debug)(NAME, '[onaddicecandidate]');
	      this._peerHelper.addIceCandidate(candidate);
	    }
	  }, {
	    key: 'onSocketIceCandidateEnd',
	    value: function onSocketIceCandidateEnd() {
	      (0, _log.debug)(NAME, '[onsocketicecandidateend]');
	      this.trigger(new _event.SubscriberEvent(_event.RTCSubscriberEventTypes.ICE_TRICKLE_COMPLETE, this));
	      this.sendSubscribe();
	    }
	  }, {
	    key: 'onSocketMessageError',
	    value: function onSocketMessageError(message) {
	      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
	
	      (0, _log.error)(NAME, 'Error in stream subscription: ' + message + '.\n[Optional detail]: ' + detail);
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_FAIL, this, message));
	    }
	  }, {
	    key: 'onUnpublish',
	    value: function onUnpublish() {
	      (0, _log.debug)(NAME, '[onunpublish]');
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.PLAY_UNPUBLISH, this));
	    }
	  }, {
	    key: 'onConnectionClosed',
	    value: function onConnectionClosed() {
	      (0, _log.debug)(NAME, '[onconnectionclosed]');
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECTION_CLOSED, this));
	    }
	  }, {
	    key: 'onMetadata',
	    value: function onMetadata(metadata) {
	      if (typeof metadata.orientation !== 'undefined' && metadata.orientation !== this._orientation) {
	        _browser2.default.applyOrientation(this._view.view, metadata.orientation);
	        this._orientation = metadata.orientation;
	      }
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_METADATA, this, metadata));
	    }
	  }, {
	    key: '_disconnect',
	    value: function _disconnect() {
	      (0, _log.debug)(NAME, '[disconnect]');
	      if (this._socketHelper) {
	        this._socketHelper.tearDown();
	      }
	      if (this._peerHelper) {
	        this._peerHelper.tearDown();
	      }
	    }
	  }, {
	    key: '_connect',
	    value: function _connect(iceServers) {
	      var _this3 = this;
	
	      (0, _log.debug)(NAME, '[connect]');
	      this._options.iceServers = iceServers;
	      var p = this._peerHelper.setUp(this._options.iceServers);
	      p.then(function () {
	        _this3.requestOffer(_this3._options.streamName, _this3._options.subscriptionId, _this3._options.videoEncoding, _this3._options.audioEncoding);
	      }).catch(function () {
	        (0, _log.warn)(NAME, 'Could not establish RTCPeerConnection.');
	        _this3.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE, _this3));
	      });
	      //  TODO: Normalize returns to either all be chainable or not be chainable
	      return this;
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	      var _this4 = this;
	
	      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      (0, _log.debug)(NAME, '[play]');
	      this._options.streamName = streamName || this._options.streamName;
	      var p = promise || new _promise.DeferredPromise();
	      var socketPromise = new _promise.DeferredPromise();
	      var socketurl = endpointFromOptions(this._options);
	      this._socketHelper.setUp(socketurl, socketPromise);
	      socketPromise.promise.then(function () {
	        p.resolve(_this4);
	        _this4.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_SUCCESS, _this4));
	        _this4.requestAvailability(_this4._options.streamName, _this4._options.streamType);
	      }).catch(function (error) {
	        p.reject(error);
	        _this4.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE, _this4, error));
	      });
	      return p.hasOwnProperty('promise') ? p.promise : p;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      (0, _log.debug)(NAME, '[stop]');
	      var deferred = new _promise.DeferredPromise();
	      this._disconnect();
	      this._view.stop();
	      deferred.resolve(this);
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.UNSUBSCRIBE_SUCCESS, this));
	      return deferred.promise;
	    }
	  }, {
	    key: 'getConnection',
	    value: function getConnection() {
	      return this._socketHelper;
	    }
	  }, {
	    key: 'getPeerConnection',
	    value: function getPeerConnection() {
	      return this._peerHelper ? this._peerHelper.connection : undefined;
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return this._options;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return 'RTC';
	    }
	  }]);
	
	  return RTCSubscriber;
	}(_eventEmitter2.default);
	
	exports.default = RTCSubscriber;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(310);
	
	var _errors = __webpack_require__(311);
	
	var _metadataUtil = __webpack_require__(312);
	
	var closeHandlers = [];
	function onwindowclose(e) {
	  // eslint-disable-line no-unused-vars
	  //  closeHandlers.forEach(h => h())
	  var i = void 0,
	      length = closeHandlers.length;
	  for (i = 0; i < length; i++) {
	    closeHandlers[i]();
	  }
	  // Returning a string value forces a leaving confirmation popup on the browser.
	  //  e.returnValue = 'goodbye'
	  //  return 'goodbye'
	}
	
	// https://github.com/videojs/video.js/blob/master/src/js/tech/flash.js#L476
	var flashVersion = function flashVersion() {
	  var version = '0,0,0';
	  // IE
	  try {
	    version = new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
	
	    // other browsers
	  } catch (e) {
	    try {
	      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
	        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
	      }
	    } catch (err) {
	      // nada
	    }
	  }
	  return version.split(',');
	};
	
	var isMoz = !!navigator.mozGetUserMedia;
	navigator.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia;
	
	var defaultUserMediaAudio = isMoz ? true : {
	  manditory: {
	    googAutoGainControl: true,
	    googHighpassFilter: true,
	    googEchoCancellation: true,
	    googNoiseSuppression: true
	  },
	  optional: [{
	    bandwidth: 50
	  }, {
	    echoCancellation: true
	  }]
	};
	var defaultUserMediaVideo = isMoz ? true : {
	  mandatory: {
	    minWidth: 320,
	    minHeight: 240,
	    minFrameRate: 4,
	    maxWidth: 640,
	    maxHeight: 480,
	    maxFrameRate: 24
	  },
	  optional: [{
	    bandwidth: 256
	  }]
	};
	
	var origin = ['webkitTransformOrigin', 'mozTransformOrigin', 'msTransformOrigin', 'oTransformOrigin', 'transformOrigin'];
	var styles = ['webkitTransform', 'mozTransform', 'msTransform', 'oTransform', 'transform'];
	var transition = ['webkitTransition', 'mozTransition', 'msTransition', 'oTransition', 'transition'];
	var rotationTranslations = {
	  '0': {
	    origin: 'center center',
	    transform: 'rotate(0deg)'
	  },
	  '90': {
	    origin: 'left top',
	    transform: 'rotate(90deg) translateY(-100%)'
	  },
	  '180': {
	    origin: 'center center',
	    transform: 'rotate(180deg)'
	  },
	  '270': {
	    origin: 'top left',
	    transform: 'rotate(270deg) translateX(-100%) translateY(0%)'
	  },
	  '-90': {
	    origin: 'left top',
	    transform: 'rotate(-90deg) translateX(-100%)'
	  },
	  '-180': {
	    origin: 'center center',
	    transform: 'rotate(-180deg)'
	  },
	  '-270': {
	    origin: 'top left',
	    transform: 'rotate(-270deg) translateY(-100%)'
	  }
	};
	
	exports.default = {
	  supportsWebSocket: function supportsWebSocket() {
	    return !!window.WebSocket;
	  },
	
	  supportsFlashVersion: function supportsFlashVersion(version) {
	    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.';
	
	    return flashVersion()[0] >= version.split(delimiter)[0];
	  },
	
	  resolveElement: function resolveElement(id) {
	    try {
	      var el = document.getElementById(id);
	      if (!el) {
	        throw new _errors.NoElementFoundError('Element with id(' + id + ') could not be found.');
	      }
	      return el;
	    } catch (e) {
	      throw new _errors.NoElementFoundError('Error in accessing element with id(' + id + '). ' + e.message);
	    }
	  },
	
	  createWebSocket: function createWebSocket(url) {
	    return new window.WebSocket(url);
	  },
	
	  setVideoSource: function setVideoSource(videoElement, mediaStream) {
	    var autoplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	    if (isMoz) {
	      videoElement['mozSrcObject'] = mediaStream;
	    } else {
	      videoElement.src = window.URL.createObjectURL(mediaStream);
	    }
	    if (autoplay) {
	      videoElement.play();
	    }
	  },
	
	  injectScript: function injectScript(url) {
	    var dfd = new _promise.DeferredPromise();
	    var script = document.createElement('script');
	    script.type = 'text/javascript';
	    script.onload = function () {
	      dfd.resolve();
	    };
	    script.onreadystatechange = function () {
	      if (script.readyState === 'loaded' || script.readyState === 'complete') {
	        script.onreadystatechange = null;
	        dfd.resolve();
	      }
	    };
	    script.src = url;
	    document.getElementsByTagName('head')[0].appendChild(script);
	    return dfd.promise;
	  },
	
	  setGlobal: function setGlobal(prop, value) {
	    window[prop] = value;
	  },
	
	  getSwfObject: function getSwfObject() {
	    return window.swfobject;
	  },
	
	  getEmbedObject: function getEmbedObject(id) {
	    return document.getElementById(id);
	  },
	
	  getElementId: function getElementId(el) {
	    return el.getAttribute('id');
	  },
	
	  getVideoJs: function getVideoJs() {
	    return window.videojs;
	  },
	
	  getUserMedia: function getUserMedia() {
	    var audio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	    var video = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	    var deferred = new _promise.DeferredPromise();
	    navigator.getUserMedia({
	      audio: audio || defaultUserMediaAudio,
	      video: video || defaultUserMediaVideo
	    }, deferred.resolve, deferred.reject);
	    return deferred.promise;
	  },
	
	  getDefaultPublishConstraints: function getDefaultPublishConstraints() {
	    var audio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var video = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	    if (isMoz) {
	      return {
	        offerToReceiveVideo: video,
	        offerToReceiveAudio: audio
	      };
	    }
	    return {
	      mandatory: {
	        offerToReceiveVideo: video,
	        offerToReceiveAudio: audio
	      }
	    };
	  },
	
	  getIsMoz: function getIsMoz() {
	    return isMoz;
	  },
	
	  addCloseHandler: function addCloseHandler(handler) {
	    var insertValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
	
	    closeHandlers.slice(insertValue === -1 ? closeHandlers.length : insertValue, 0, handler);
	    if (window.onbeforeunload !== onwindowclose) {
	      window.onbeforeunload = onwindowclose;
	      window.addEventListener('unload', onwindowclose);
	    }
	  },
	
	  removeCloseHandler: function removeCloseHandler(handler) {
	    var i = closeHandlers.length;
	    while (--i > -1) {
	      if (closeHandlers[i] === handler) {
	        closeHandlers.slice(i, 1);
	        break;
	      }
	    }
	  },
	
	  onOrientationMetadata: _metadataUtil.onOrientationMetadata,
	
	  applyOrientation: function applyOrientation(element, value) {
	    var i = void 0,
	        length = styles.length;
	    value = value % 360;
	    var translations = rotationTranslations[value.toString()];
	    for (i = 0; i < length; i++) {
	      element.style[origin[i]] = translations.origin;
	      element.style[styles[i]] = translations.transform;
	      element.style[transition[i]] = 'transform 0.0s linear';
	    }
	  }
	
	};

/***/ },
/* 310 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _DeferredPromise = function _DeferredPromise() {
	  var _this = this;
	
	  _classCallCheck(this, _DeferredPromise);
	
	  this.resolve = undefined;
	  this.reject = undefined;
	  this.promise = new Promise(function (resolve, reject) {
	    _this.resolve = resolve;
	    _this.reject = reject;
	  });
	};
	
	var _Future = {
	  createIfNotExist: function createIfNotExist(deferredIfExist) {
	    var f = deferredIfExist;
	    if (!f) {
	      f = new _DeferredPromise();
	    }
	    return f;
	  }
	};
	
	var DeferredPromise = exports.DeferredPromise = _DeferredPromise;
	var Future = exports.Future = _Future;

/***/ },
/* 311 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NoElementFoundError = exports.NoElementFoundError = function NoElementFoundError(message) {
	  _classCallCheck(this, NoElementFoundError);
	
	  this.name = 'NoElementFound';
	  this.message = message;
	};

/***/ },
/* 312 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var jsonAttr = /['"](.*?)['"]:/gi;
	var jsonVal = /:['"](.*?)['"]/gi;
	
	function readUTF(data, start, len) {
	  var result = '',
	      offset = start,
	      end = start + len;
	  do {
	    result += String.fromCharCode(data[offset++]);
	  } while (offset < end);
	  return result;
	}
	
	function parseJSONForOrientation(text) {
	  try {
	    var value = JSON.parse(text);
	    if (value.hasOwnProperty('orientation')) {
	      return {
	        orientation: parseInt(value.orientation)
	      };
	    }
	    return undefined;
	  } catch (e) {
	    var match = jsonAttr.exec(text);
	    var match2 = void 0;
	    if (match && match.length > 1) {
	      match2 = jsonVal.exec(text);
	      if (match[1] === 'orientation' && match2 && match2.length > 1) {
	        return {
	          orientation: parseInt(match2[1])
	        };
	      }
	    }
	    return undefined;
	  }
	}
	
	var onOrientationMetadata = exports.onOrientationMetadata = function onOrientationMetadata(player, callback) {
	
	  var textTracks = typeof player.textTracks === 'function' ? player.textTracks() : player.textTracks;
	
	  if (textTracks) {
	
	    player.addTextTrack('metadata');
	
	    textTracks.addEventListener('addtrack', function (addTrackEvent) {
	
	      var track = addTrackEvent.track;
	      track.mode = 'hidden';
	      /**
	      var cue = new VTTCue(1.0, 0, 'Testing')
	      cue.id = 1
	      cue.pauseOnExit = false
	      track.addCue(cue)
	      */
	
	      track.addEventListener('cuechange', function (cueChangeEvent) {
	        var cues = void 0;
	        var i = void 0;
	        // Mostly Chrome.
	        if (cueChangeEvent && cueChangeEvent.currentTarget) {
	          cues = cueChangeEvent.currentTarget.cues;
	        } else if (undefined === undefined) {
	          cues = track.cues;
	          cues = cues && cues.length > 0 ? cues : track.activeCues;
	        } else if (undefined !== undefined) {
	          // Mostly Firefox & Safari.
	          cues = cues && cues.length > 0 ? cues : undefined.activeCues;
	        }
	        // Mostly failure.
	        cues = cues || [];
	        for (i = 0; i < cues.length; i++) {
	          var data = cues[i];
	          if (data.value) {
	            var text = typeof data.value.data === 'string' ? data.value.data : readUTF(data.value.data, 0, data.size);
	            var orientation = parseJSONForOrientation(text);
	            if (typeof orientation !== 'undefined') {
	              callback(orientation);
	              break;
	            }
	          }
	        }
	      });
	    });
	  }
	};

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _publisherEvent = __webpack_require__(302);
	
	Object.defineProperty(exports, 'PublisherEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _publisherEvent.common;
	  }
	});
	Object.defineProperty(exports, 'RTCPublisherEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _publisherEvent.rtc;
	  }
	});
	Object.defineProperty(exports, 'RTMPPublisherEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _publisherEvent.rtmp;
	  }
	});
	Object.defineProperty(exports, 'FailoverPublisherEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _publisherEvent.failover;
	  }
	});
	
	var _subscriberEvent = __webpack_require__(303);
	
	Object.defineProperty(exports, 'SubscriberEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _subscriberEvent.common;
	  }
	});
	Object.defineProperty(exports, 'RTCSubscriberEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _subscriberEvent.rtc;
	  }
	});
	Object.defineProperty(exports, 'RTMPSubscriberEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _subscriberEvent.rtmp;
	  }
	});
	Object.defineProperty(exports, 'FailoverSubscriberEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _subscriberEvent.failover;
	  }
	});
	
	var _sharedobjectEvent = __webpack_require__(304);
	
	Object.defineProperty(exports, 'SharedObjectEventTypes', {
	  enumerable: true,
	  get: function get() {
	    return _sharedobjectEvent.common;
	  }
	});
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Event = function () {
	  function Event(type) {
	    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
	
	    _classCallCheck(this, Event);
	
	    this._type = type;
	    this._data = data;
	  }
	
	  _createClass(Event, [{
	    key: 'type',
	    get: function get() {
	      return this._type;
	    }
	  }, {
	    key: 'data',
	    get: function get() {
	      return this._data;
	    }
	  }]);
	
	  return Event;
	}();
	
	var PublisherEvent = function (_Event) {
	  _inherits(PublisherEvent, _Event);
	
	  function PublisherEvent(type, publisher, data) {
	    _classCallCheck(this, PublisherEvent);
	
	    var _this = _possibleConstructorReturn(this, (PublisherEvent.__proto__ || Object.getPrototypeOf(PublisherEvent)).call(this, type, data));
	
	    _this._publisher = publisher;
	    return _this;
	  }
	
	  _createClass(PublisherEvent, [{
	    key: 'publisher',
	    get: function get() {
	      return this._publisher;
	    }
	  }]);
	
	  return PublisherEvent;
	}(Event);
	
	var SubscriberEvent = function (_Event2) {
	  _inherits(SubscriberEvent, _Event2);
	
	  function SubscriberEvent(type, subscriber, data) {
	    _classCallCheck(this, SubscriberEvent);
	
	    var _this2 = _possibleConstructorReturn(this, (SubscriberEvent.__proto__ || Object.getPrototypeOf(SubscriberEvent)).call(this, type, data));
	
	    _this2._subscriber = subscriber;
	    return _this2;
	  }
	
	  _createClass(SubscriberEvent, [{
	    key: 'subscriber',
	    get: function get() {
	      return this._subscriber;
	    }
	  }]);
	
	  return SubscriberEvent;
	}(Event);
	
	var SharedObjectEvent = function (_Event3) {
	  _inherits(SharedObjectEvent, _Event3);
	
	  function SharedObjectEvent(type, sharedObjectName, data) {
	    _classCallCheck(this, SharedObjectEvent);
	
	    var _this3 = _possibleConstructorReturn(this, (SharedObjectEvent.__proto__ || Object.getPrototypeOf(SharedObjectEvent)).call(this, type, data));
	
	    _this3._name = sharedObjectName;
	    return _this3;
	  }
	
	  _createClass(SharedObjectEvent, [{
	    key: 'name',
	    get: function get() {
	      return this._name;
	    }
	  }]);
	
	  return SharedObjectEvent;
	}(Event);
	
	exports.PublisherEvent = PublisherEvent;
	exports.SubscriberEvent = SubscriberEvent;
	exports.SharedObjectEvent = SharedObjectEvent;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _socketHelper = __webpack_require__(315);
	
	var _socketHelper2 = _interopRequireDefault(_socketHelper);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProSubscriptionSocket';
	
	var SubscriptionSocketHelper = function (_SocketHelper) {
	  _inherits(SubscriptionSocketHelper, _SocketHelper);
	
	  function SubscriptionSocketHelper(responder) {
	    _classCallCheck(this, SubscriptionSocketHelper);
	
	    return _possibleConstructorReturn(this, (SubscriptionSocketHelper.__proto__ || Object.getPrototypeOf(SubscriptionSocketHelper)).call(this, responder, NAME));
	  }
	
	  _createClass(SubscriptionSocketHelper, [{
	    key: 'respond',
	    value: function respond(message) {
	      //    console.log(message)
	      if (message.data) {
	        var json = this.getJsonFromSocketMessage(message);
	        try {
	          if (!_get(SubscriptionSocketHelper.prototype.__proto__ || Object.getPrototypeOf(SubscriptionSocketHelper.prototype), 'respond', this).call(this, message)) {
	            if (json.data !== undefined) {
	              if (json.data.sdp !== undefined) {
	                if (json.data.sdp.type === 'offer') {
	                  this._responder.onSDPOffer(json.data);
	                }
	              }
	              if (json.data.candidate !== undefined) {
	                this._responder.onAddIceCandidate(json.data.candidate);
	              }
	              if (json.data.type === 'status') {
	                if (json.data.code === 'NetConnection.ICE.TricleCompleted' || json.data.code === 'NetConnection.ICE.TrickleCompleted') {
	                  this._responder.onSocketIceCandidateEnd();
	                } else if (json.data.code === 'NetStream.Play.UnpublishNotify') {
	                  this._responder.onUnpublish();
	                } else if (json.data.code === 'NetConnection.Connect.Closed') {
	                  this._responder.onConnectionClosed();
	                }
	              }
	              if (json.data.hasOwnProperty('status')) {
	                if (json.data.status === 'NetStream.Play.UnpublishNotify') {
	                  this._responder.onUnpublish();
	                }
	              }
	              if (json.type !== undefined) {
	                if (json.type === 'metadata') {
	                  this._responder.onMetadata(json.data);
	                }
	              }
	            } else if (json.type !== undefined) {
	              if (json.type === 'metadata') {
	                this._responder.onMetadata(json.metadata);
	              }
	            }
	          }
	        } catch (e) {
	          (0, _log.error)(NAME, '[ws.onmessage] - Error in accessing message data as JSON. ' + e.message);
	          this._responder.onSocketMessageError('[ws.onmessage] - Error in accessing message data as JSON. ' + e.message);
	        }
	      } else {
	        (0, _log.warn)(NAME, '[ws.onmessage] - No Message Data.');
	      }
	    }
	  }]);
	
	  return SubscriptionSocketHelper;
	}(_socketHelper2.default);
	
	exports.default = SubscriptionSocketHelper;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _websocket = __webpack_require__(316);
	
	var websocket = _interopRequireWildcard(_websocket);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SocketHelper = function () {
	  function SocketHelper(responder, name) {
	    _classCallCheck(this, SocketHelper);
	
	    this._responder = responder;
	    this._pendingPostRequests = [];
	    this._websocket = undefined;
	    this._connectionPromise = undefined;
	    this._name = name;
	    this._responseHandlers = [];
	    this._onclose = this.tearDown.bind(this);
	  }
	
	  _createClass(SocketHelper, [{
	    key: '_removeSocketHandlers',
	    value: function _removeSocketHandlers(ws) {
	      ws.onopen = undefined;
	      ws.onmessage = undefined;
	      ws.onerror = undefined;
	    }
	  }, {
	    key: '_addSocketHandlers',
	    value: function _addSocketHandlers(ws, promise) {
	      var _this = this;
	
	      ws.onopen = function () {
	        (0, _log.info)(_this._name, '[websocketopen]');
	        while (_this._pendingPostRequests.length > 0) {
	          _this.post(_this._pendingPostRequests.shift());
	        }
	      };
	
	      ws.onerror = function (error) {
	        _this.tearDown();
	        (0, _log.warn)(_this._name, '[websocketerror]: Error from WebSocket. ' + error.type);
	        promise.reject(error);
	      };
	
	      ws.onmessage = function (message) {
	        _this.respond(message);
	      };
	    }
	  }, {
	    key: 'setUp',
	    value: function setUp(url, setupPromise) {
	      this.tearDown();
	      this._connectionPromise = setupPromise;
	      _browser2.default.addCloseHandler(this._onclose);
	      this._websocket = websocket.create(url);
	      this._addSocketHandlers(this._websocket, this._connectionPromise);
	    }
	  }, {
	    key: 'tearDown',
	    value: function tearDown() {
	      this._pendingPostRequests.length = 0;
	      if (typeof this._websocket !== 'undefined') {
	        this._removeSocketHandlers(this._websocket);
	        this._websocket.close();
	      }
	      this._websocket = undefined;
	      while (this._responseHandlers.length > 0) {
	        this._responseHandlers.shift();
	      }
	      _browser2.default.removeCloseHandler(this._onclose);
	    }
	  }, {
	    key: 'getJsonFromSocketMessage',
	    value: function getJsonFromSocketMessage(message) {
	      try {
	        return typeof message.data === 'string' ? JSON.parse(message.data) : message.data;
	      } catch (e) {
	        (0, _log.warn)(this._name, 'Could not parse message as JSON. Message= ' + message.data + '. Error= ' + e.message);
	      }
	      return null;
	    }
	  }, {
	    key: 'addSharedObjectResponseHandler',
	    value: function addSharedObjectResponseHandler(handler) {
	      this._responseHandlers.push(handler);
	    }
	  }, {
	    key: 'removeSharedObjectResponseHandler',
	    value: function removeSharedObjectResponseHandler(handler) {
	      var i = this._responseHandlers.length;
	      var rHandler = void 0;
	      while (--i > -1) {
	        rHandler = this._responseHandlers[i];
	        if (rHandler === handler) {
	          this._responseHandlers.splice(i, 1);
	          return;
	        }
	      }
	    }
	  }, {
	    key: 'handleMessageResponse',
	    value: function handleMessageResponse(message) {
	      var i = void 0,
	          handler = void 0;
	      var length = this._responseHandlers.length;
	      for (i = 0; i < length; i++) {
	        handler = this._responseHandlers[i];
	        if (handler.respond(message)) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: 'post',
	    value: function post(sendRequest) {
	      if (this._websocket !== undefined && this._websocket.readyState === 1 /* WebSocket.OPEN */) {
	          try {
	            (0, _log.debug)(this._name, '[websocket-post]: ' + JSON.stringify(sendRequest, null, 2));
	            this._websocket.send(JSON.stringify(sendRequest));
	          } catch (e) {
	            (0, _log.debug)(this._name, 'Could not send request: ' + sendRequest + '. ' + e);
	          }
	        } else {
	        this._pendingPostRequests.push(sendRequest);
	      }
	    }
	  }, {
	    key: 'respond',
	    value: function respond(message) {
	      // eslint-disable-line no-unused-vars
	      var handled = this.handleMessageResponse(message);
	      if (!handled && message.data) {
	        var json = this.getJsonFromSocketMessage(message);
	        if (json === null) {
	          (0, _log.warn)(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
	          return true;
	        }
	        (0, _log.debug)(this._name, '[websocket-response]: ' + JSON.stringify(json, null, 2));
	        if (json.isAvailable !== undefined) {
	          if (typeof json.isAvailable === 'boolean' && json.isAvailable) {
	            this._responder.onStreamAvailable(json);
	            return true;
	          } else {
	            this._responder.onStreamUnavailable(json);
	            return true;
	          }
	        } else if (json.data !== undefined) {
	          if (json.data.message !== undefined) {
	            if (json.data.type === 'error') {
	              this._responder.onSocketMessageError(json.data.message, json.data.detail);
	              return true;
	            }
	          } else if (json.data.type === 'status') {
	            if (json.data.code === 'NetConnection.Connect.Success') {
	              this._connectionPromise.resolve();
	              return true;
	            } else if (json.data.code === 'NetConnection.Connect.Rejected') {
	              this._connectionPromise.reject('NetConnection.Connect.Rejected');
	              return true;
	            }
	          } else if (json.data.type === 'error') {
	            if (json.data.code === 'NetConnection.Connect.Rejected') {
	              this._connectionPromise.reject('NetConnection.Connect.Rejected');
	              return true;
	            }
	          }
	        }
	      }
	      return handled;
	    }
	  }, {
	    key: 'getRemoteSharedObject',
	    value: function getRemoteSharedObject(name) {
	      this.post({
	        sharedObjectGetRemote: {
	          name: name
	        }
	      });
	    }
	  }, {
	    key: 'connectToSharedObject',
	    value: function connectToSharedObject(name) {
	      this.post({
	        sharedObjectConnect: {
	          name: name
	        }
	      });
	    }
	  }, {
	    key: 'sendToSharedObject',
	    value: function sendToSharedObject(name, callName, data) {
	      this.post({
	        sharedObjectSend: {
	          name: name,
	          call: callName,
	          params: [data]
	        }
	      });
	    }
	  }, {
	    key: 'sendPropertyToSharedObject',
	    value: function sendPropertyToSharedObject(name, key, value) {
	      this.post({
	        sharedObjectSetProperty: {
	          name: name,
	          key: key,
	          value: value
	        }
	      });
	    }
	  }, {
	    key: 'closeSharedObject',
	    value: function closeSharedObject(name) {
	      this.post({
	        sharedObjectClose: {
	          name: name
	        }
	      });
	    }
	  }]);
	
	  return SocketHelper;
	}();
	
	exports.default = SocketHelper;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.create = exports.isSupported = undefined;
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isSupported = exports.isSupported = function isSupported() {
	  return _browser2.default.supportsWebSocket();
	};
	
	var create = exports.create = function create(url) {
	  return _browser2.default.createWebSocket(url);
	};

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _webrtc = __webpack_require__(318);
	
	var webrtc = _interopRequireWildcard(_webrtc);
	
	var _promise = __webpack_require__(310);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'R5ProSubscriptionPeer';
	
	var SubscriptionPeerHelper = function () {
	  function SubscriptionPeerHelper(responder) {
	    _classCallCheck(this, SubscriptionPeerHelper);
	
	    this._responder = responder;
	    this._peerConnection = undefined;
	    this._pendingMediaStream = undefined;
	  }
	
	  _createClass(SubscriptionPeerHelper, [{
	    key: '_removeConnectionHandlers',
	    value: function _removeConnectionHandlers(connection) {
	      connection.onconnectionstatechange = undefined;
	      connection.onicecandidate = undefined;
	      connection.onaddstream = undefined;
	      connection.ontrack = undefined;
	    }
	  }, {
	    key: '_addConnectionHandlers',
	    value: function _addConnectionHandlers(connection, promise) {
	      var _this = this;
	
	      connection.onconnectionstatechange = function () {
	        if (connection.connectionState === 'connected') {
	          (0, _log.debug)(NAME, '[peerconnection:open]');
	          if (promise) {
	            promise.resolve(_this);
	          }
	        } else if (connection.connectionState === 'failed' || connection.connectionState === 'disconnected') {
	          (0, _log.warn)(NAME, '[peerconnection:error]');
	          if (promise) {
	            promise.reject();
	          }
	        }
	      };
	
	      connection.onicecandidate = function (event) {
	        (0, _log.debug)(NAME, '[peer.onicecandidate] - Peer Candidate: ' + event.candidate);
	        if (event.candidate) {
	          _this._responder.onIceCandidate(event.candidate);
	        } else if (event.candidate === null) {
	          // null means they have finished sending candidates back and forth?
	          _this._responder.onIceCandidateTrickleEnd(_this._pendingMediaStream);
	          _this._pendingMediaStream = undefined;
	        }
	      };
	
	      connection.onaddstream = function (event) {
	        (0, _log.debug)(NAME, 'Peer Add Stream: ' + event.stream);
	        if (event.stream) {
	          _this._pendingMediaStream = event.stream;
	          _this._responder.onAnswerMediaStream(event.stream);
	        }
	      };
	
	      connection.ontrack = function (event) {
	        (0, _log.debug)(NAME, 'Peer Add Stream: ' + event.streams);
	        if (event.streams && event.streams.length > 0) {
	          _this._pendingMediaStream = event.streams[0];
	        }
	      };
	    }
	  }, {
	    key: 'setUp',
	    value: function setUp(iceServers, setUpPromise) {
	      this.tearDown();
	      (0, _log.debug)(NAME, '[setup]');
	      var p = setUpPromise || new _promise.DeferredPromise();
	      try {
	        var peer = new webrtc.RTCPeerConnection({
	          iceServers: iceServers,
	          rtcpMuxPolicy: 'negotiate'
	        }, {
	          optional: [{ DtlsSrtpKeyAgreement: true }, { RtpDataChannels: false }, { googCpuOveruseDetection: true }]
	        });
	        this._peerConnection = peer;
	        this._addConnectionHandlers(peer);
	        p.resolve();
	      } catch (e) {
	        (0, _log.warn)(NAME, 'Could not create a RTCPeerConnection. Error: ' + e.message);
	        p.reject(e.message);
	      }
	      return p.hasOwnProperty('promise') ? p.promise : p;
	    }
	  }, {
	    key: 'tearDown',
	    value: function tearDown() {
	      (0, _log.debug)(NAME, '[teardown]');
	      if (this._peerConnection) {
	        this._removeConnectionHandlers(this._peerConnection);
	        try {
	          this._peerConnection.close();
	        } catch (e) {
	          (0, _log.warn)(NAME, '[peerconnection.close] error: ' + e.message);
	        }
	      }
	      this._pendingMediaStream = undefined;
	      this._peerConnection = undefined;
	    }
	  }, {
	    key: 'createAnswer',
	    value: function createAnswer(sdp) {
	      var _this2 = this;
	
	      (0, _log.debug)(NAME, '[createanswer]');
	      var deferred = new _promise.DeferredPromise();
	
	      this._peerConnection.setRemoteDescription(sdp).then(this._responder.onSDPSuccess).catch(function (err) {
	        _this2._responder.onSDPError(err);
	      });
	
	      this._peerConnection.createAnswer().then(function (sessionDescription) {
	        _this2._peerConnection.setLocalDescription(sessionDescription).then(_this2._responder.onSDPSuccess).catch(function (err) {
	          _this2._responder.onSDPError(err);
	        });
	        deferred.resolve(sessionDescription);
	      }).catch(deferred.reject);
	
	      return deferred.promise;
	    }
	  }, {
	    key: 'addIceCandidate',
	    value: function addIceCandidate(candidate) {
	      (0, _log.debug)(NAME, '[addicecandidate]');
	      var iceCandidate = new webrtc.RTCIceCandidate({
	        sdpMLineIndex: candidate.sdpMLineIndex,
	        candidate: candidate.candidate
	      });
	      this._peerConnection.addIceCandidate(iceCandidate).then(function () {
	        // nada
	      }).catch(function (err) {
	        (0, _log.error)(NAME, 'Error in add of ICE Candidiate + ' + err);
	      });
	    }
	  }, {
	    key: 'connection',
	    get: function get() {
	      return this._peerConnection;
	    }
	  }]);
	
	  return SubscriptionPeerHelper;
	}();
	
	exports.default = SubscriptionPeerHelper;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RTCSessionDescription = exports.RTCIceCandidate = exports.RTCPeerConnection = exports.updateBandwidth = exports.isSupported = undefined;
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** -- handled by adapter.js -- */
	var _RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
	var _RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate || window.webkitRTCIceCandidate;
	var _RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription;
	
	var isSupported = exports.isSupported = function isSupported() {
	  return _RTCPeerConnection && _RTCIceCandidate && _RTCSessionDescription;
	};
	
	// https://github.com/muaz-khan/WebRTC-Experiment/blob/master/RTCPeerConnection/RTCPeerConnection-v1.6.js#L158
	// Muaz Khan     - github.com/muaz-khan
	// MIT License   - www.WebRTC-Experiment.com/licence
	// Documentation - github.com/muaz-khan/WebRTC-Experiment/tree/master/RTCPeerConnection
	var updateBandwidth = exports.updateBandwidth = function updateBandwidth(options, sdp) {
	  if (_browser2.default.getIsMoz()) {
	    return sdp;
	  }
	  sdp = sdp.replace(/b=AS([^\r\n]+\r\n)/g, '');
	  if (options.audio) {
	    sdp = sdp.replace(/a=mid:audio\r\n/g, 'a=mid:audio\r\nb=AS:' + options.audio + '\r\n');
	  }
	  if (options.video) {
	    sdp = sdp.replace(/a=mid:video\r\n/g, 'a=mid:video\r\nb=AS:' + options.video + '\r\n');
	  }
	  return sdp;
	};
	
	var RTCPeerConnection = exports.RTCPeerConnection = _RTCPeerConnection;
	var RTCIceCandidate = exports.RTCIceCandidate = _RTCIceCandidate;
	var RTCSessionDescription = exports.RTCSessionDescription = _RTCSessionDescription;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _event = __webpack_require__(313);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _videojsSourceHandler = __webpack_require__(320);
	
	var _videojsSourceHandler2 = _interopRequireDefault(_videojsSourceHandler);
	
	var _promise = __webpack_require__(310);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProHLSSubscriber';
	var videojs = _browser2.default.getVideoJs();
	var defaultOptions = {
	  protocol: 'https',
	  port: 80,
	  mimeType: 'application/x-mpegURL',
	  swf: 'lib/red5pro/red5pro-video-js.swf'
	};
	var optionsToHlsURL = function optionsToHlsURL(options) {
	  var protocol = options.hlsprotocol ? options.hlsprotocol : options.protocol;
	  var port = options.hlsport ? options.hlsport : options.port;
	  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
	  return protocol + '://' + options.host + ':' + port + '/' + appEndpoint + '/' + options.streamName + '.m3u8';
	};
	
	var HLSSubscriber = function (_EventEmitter) {
	  _inherits(HLSSubscriber, _EventEmitter);
	
	  function HLSSubscriber() {
	    _classCallCheck(this, HLSSubscriber);
	
	    var _this = _possibleConstructorReturn(this, (HLSSubscriber.__proto__ || Object.getPrototypeOf(HLSSubscriber)).call(this));
	
	    _this._options = undefined;
	    _this._view = undefined;
	    _this._videojsHandler = undefined;
	    _this._boundBubbleSubscriberEvents = _this.bubbleSubscriberEvents.bind(_this);
	    return _this;
	  }
	
	  _createClass(HLSSubscriber, [{
	    key: 'bubbleSubscriberEvents',
	    value: function bubbleSubscriberEvents(event) {
	      this.trigger(new _event.SubscriberEvent(event.type, this, event.data));
	    }
	  }, {
	    key: 'init',
	    value: function init(options) {
	      var deferred = new _promise.DeferredPromise();
	      if (!_browser2.default.getVideoJs()) {
	        deferred.reject('Could not resolve HLSSubscriber. Requires videojs library.');
	      } else {
	        this._options = Object.assign({}, defaultOptions, options);
	        deferred.resolve(this);
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'setView',
	    value: function setView(view) {
	      this._view = view;
	      if (this._videojsHandler !== undefined) {
	        this._videojsHandler.off('*', this._boundBubbleSubscriberEvents);
	        this._videojsHandler.disconnect();
	        this._videojsHandler = undefined;
	      }
	      this._videojsHandler = new _videojsSourceHandler2.default(this._view.view, this.getType());
	      return this;
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	      var _this2 = this;
	
	      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      var p = promise || new _promise.DeferredPromise();
	      var urlRegex = /^http(|s).*\.m3u8/g;
	      this._options.streamName = streamName || this._options.streamName;
	      var url = this._options.streamName.match(urlRegex) ? this._options.streamName : optionsToHlsURL(this._options);
	      var type = this._options.mimeType;
	      var swfURL = this._options.swf;
	      if (_typeof(this._options) === 'object') {
	        type = this._options.rtmpMimeType || this._options.mimeType;
	      }
	      (0, _log.debug)(NAME, '[play]: URL(' + url + ').');
	      this._videojsHandler.on('*', this._boundBubbleSubscriberEvents);
	      this._videojsHandler.addSource(url, type, videojs, swfURL).then(function () {
	        p.resolve(_this2);
	        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_SUCCESS));
	      }).catch(function (error) {
	        p.reject(error);
	        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE));
	      });
	      return p.hasOwnProperty('promise') ? p.promise : p;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      (0, _log.debug)(NAME, '[stop]');
	      var deferred = new _promise.DeferredPromise();
	      try {
	        this._videojsHandler.off('*', this._boundBubbleSubscriberEvents);
	        this._videojsHandler.disconnect();
	        deferred.resolve();
	      } catch (e) {
	        deferred.reject(e.message);
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return this._options;
	    }
	  }, {
	    key: 'getPlayer',
	    value: function getPlayer() {
	      return this._videojsHandler.getPlayer();
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return 'HLS';
	    }
	  }]);
	
	  return HLSSubscriber;
	}(_eventEmitter2.default);
	
	exports.default = HLSSubscriber;

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Base handler for utilizing the videojs
	 * library to intergate playback of live video.
	 *
	 * @see red5pro-hls
	 * @see red5pro-rtmp
	 */
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _event = __webpack_require__(313);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _object = __webpack_require__(321);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProBaseVideoJSHandler';
	
	var videojs = _browser2.default.getVideoJs();
	var mimeType = 'video/webm';
	var optionsToURL = function optionsToURL(options) {
	  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
	  return options.protocol + '://' + options.host + ':' + options.port + '/' + appEndpoint + '/' + options.streamName;
	};
	
	var BaseHandler = function (_EventEmitter) {
	  _inherits(BaseHandler, _EventEmitter);
	
	  function BaseHandler(video) {
	    var playerType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	    _classCallCheck(this, BaseHandler);
	
	    var _this = _possibleConstructorReturn(this, (BaseHandler.__proto__ || Object.getPrototypeOf(BaseHandler)).call(this));
	
	    _this.video = video;
	    _this.clone = _this.video.cloneNode(true);
	    _this.holder = _this.video.parentNode;
	    _this.videojs = null;
	    _this.source = null;
	    _this.playerType = playerType;
	    _this.hasAssignedEventListeners = false;
	
	    //  TODO: Temporary adjustment. Better to pass videojs up the chain so end users can set their own handlers.
	    _this.onVideoJSError = _this.onVideoJSError.bind(_this);
	    _this.onVideoJSLoadedData = _this.onVideoJSLoadedData.bind(_this);
	    _this.onVideoJSLoadedMetadata = _this.onVideoJSLoadedMetadata.bind(_this);
	    _this.onVideoJSTimeUpdate = _this.onVideoJSTimeUpdate.bind(_this);
	    _this.onVideoJSUserActive = _this.onVideoJSUserActive.bind(_this);
	    _this.onVideoJSUserInactive = _this.onVideoJSUserInactive.bind(_this);
	    _this.onVideoJSVolumeChange = _this.onVideoJSVolumeChange.bind(_this);
	    _this.onVideoJSEnded = _this.onVideoJSEnded.bind(_this);
	    return _this;
	  }
	
	  //  Assign all video.js listeners (those which are listed on http://docs.videojs.com/docs/api/player.html#events)
	
	
	  _createClass(BaseHandler, [{
	    key: 'addVideoJSEventListeners',
	    value: function addVideoJSEventListeners() {
	      if (this.hasAssignedEventListeners) {
	        return;
	      }
	      this.videojs.on('error', this.onVideoJSError);
	      this.videojs.on('loadeddata', this.onVideoJSLoadedData);
	      this.videojs.on('loadedmetadata', this.onVideoJSLoadedMetadata);
	      this.videojs.on('timeupdate', this.onVideoJSTimeUpdate);
	      this.videojs.on('useractive', this.onVideoJSUserActive);
	      this.videojs.on('userinactive', this.onVideoJSUserInactive);
	      this.videojs.on('volumechange', this.onVideoJSVolumeChange);
	      this.videojs.on('ended', this.onVideoJSEnded);
	      this.hasAssignedEventListeners = true;
	    }
	
	    //  Remove all video.js listeners (those which are listed on http://docs.videojs.com/docs/api/player.html#events)
	
	  }, {
	    key: 'removeVideoJSEventListeners',
	    value: function removeVideoJSEventListeners() {
	      if (!this.hasAssignedEventListeners) {
	        return;
	      }
	      this.videojs.off('error', this.onVideoJSError);
	      this.videojs.off('loadeddata', this.onVideoJSLoadedData);
	      this.videojs.off('loadedmetadata', this.onVideoJSLoadedMetadata);
	      this.videojs.off('timeupdate', this.onVideoJSTimeUpdate);
	      this.videojs.off('useractive', this.onVideoJSUserActive);
	      this.videojs.off('userinactive', this.onVideoJSUserInactive);
	      this.videojs.off('volumechange', this.onVideoJSVolumeChange);
	      this.videojs.off('ended', this.onVideoJSEnded);
	      this.hasAssignedEventListeners = false;
	    }
	
	    //  Cleanup our <source> if it exists
	
	  }, {
	    key: 'cleanup',
	    value: function cleanup() {
	      if (this.source) {
	        this.source.remove();
	      }
	      this.source = null;
	    }
	
	    //  Cleanup our video.js implementation
	
	  }, {
	    key: 'cleanupVideoJS',
	    value: function cleanupVideoJS() {
	      if (this.videojs) {
	        this.video.remove();
	        this.removeVideoJSEventListeners();
	        this.videojs.dispose();
	        //  This recreates our original <video> element and appends it to the original containing element
	        this.video = this.clone.cloneNode(true);
	        this.holder.appendChild(this.video);
	      }
	      this.videojs = null;
	    }
	
	    //  Add a new <source> for our <video> and startup video.js
	
	  }, {
	    key: 'addSource',
	    value: function addSource(src) {
	      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mimeType;
	      var videoImpl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : videojs;
	      var swfURL = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	      var self = this;
	
	      function createSource(_src, _type) {
	        var sourceEl = document.createElement('source');
	        sourceEl.src = _src;
	        sourceEl.type = _type;
	        return sourceEl;
	      }
	
	      function insertSourceInto(_src, _type, _parent) {
	        var sourceEl = createSource(_src, _type);
	        if (_parent.firstChild) {
	          _parent.insertBefore(sourceEl, _parent.firstChild);
	        } else {
	          _parent.appendChild(sourceEl);
	        }
	        return sourceEl;
	      }
	
	      return new Promise(function (resolve, reject) {
	        try {
	          (function () {
	            //  If we have a current <source> element, remove it
	            self.cleanup();
	            //  If video.js has already been instantiated, dispose of it
	            self.cleanupVideoJS();
	
	            //  Create the new <source> element
	            var srcURL = typeof src === 'string' ? src : optionsToURL(src);
	            var mimeType = typeof src === 'string' ? type : src.mimeType ? src.mimeType : type;
	            (0, _log.debug)(NAME, '"' + self.playerType + '" loading ' + srcURL);
	            self.source = insertSourceInto(srcURL, mimeType, self.video);
	
	            //  Instantiate video.js
	            var opts = {
	              techOrder: ['html5', 'flash']
	            };
	            if (swfURL) {
	              (0, _object.deepDefine)(videoImpl, ['options', 'flash', 'swf'], swfURL);
	            }
	
	            var orientation = 0;
	            self.videojs = videoImpl(self.video, opts, function () {
	              (0, _log.debug)(NAME, 'videoJS embed complete.');
	              var player = self.getPlayer();
	              if (player) {
	                _browser2.default.onOrientationMetadata(player, function (metadata) {
	                  (0, _log.debug)(NAME, 'Metadata received: ' + JSON.stringify(metadata, null, 2));
	                  if (orientation !== metadata.orientation) {
	                    _browser2.default.applyOrientation(self.video, metadata.orientation);
	                    self.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_METADATA, metadata));
	                  }
	                  orientation = metadata.orientation;
	                });
	              }
	              resolve(self);
	            });
	            self.addVideoJSEventListeners();
	          })();
	        } catch (e) {
	          (0, _log.error)(NAME, 'Could not instantiate new VideoJS-based "' + self.playerType + '" Player.\nReason: ' + e.message);
	          reject('Could not instantiate new VideoJS-based "' + self.playerType + '" Player.\nReason: ' + e.message);
	        }
	      });
	    }
	  }, {
	    key: 'onVideoJSError',
	    value: function onVideoJSError(e) {
	      (0, _log.error)(NAME, 'onVideoJSError: ' + JSON.stringify(e, null, 2));
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_FAIL, null, e));
	    }
	  }, {
	    key: 'onVideoJSLoadedData',
	    value: function onVideoJSLoadedData() {
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_START));
	    }
	  }, {
	    key: 'onVideoJSEnded',
	    value: function onVideoJSEnded() {
	      this.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_STOP));
	    }
	  }, {
	    key: 'onVideoJSLoadedMetadata',
	    value: function onVideoJSLoadedMetadata() {}
	  }, {
	    key: 'onVideoJSTimeUpdate',
	    value: function onVideoJSTimeUpdate() {}
	  }, {
	    key: 'onVideoJSUserActive',
	    value: function onVideoJSUserActive() {}
	  }, {
	    key: 'onVideoJSUserInactive',
	    value: function onVideoJSUserInactive() {}
	  }, {
	    key: 'onVideoJSVolumeChange',
	    value: function onVideoJSVolumeChange() {}
	  }, {
	    key: 'addSharedObjectResponseHandler',
	    value: function addSharedObjectResponseHandler(handler) {// eslint-disable-line no-unused-vars
	      // unsupported at the moment.
	    }
	  }, {
	    key: 'removeSharedObjectResponseHandler',
	    value: function removeSharedObjectResponseHandler(handler) {// eslint-disable-line no-unused-vars
	      // unsupported at the moment.
	    }
	  }, {
	    key: 'sendToSharedObject',
	    value: function sendToSharedObject(name, callName, message) {// eslint-disable-line no-unused-vars
	      // unsupported at the moment.
	    }
	  }, {
	    key: 'sendPropertyToSharedObject',
	    value: function sendPropertyToSharedObject(name, key, value) {// eslint-disable-line no-unused-vars
	      // unsupported at the moment.
	    }
	  }, {
	    key: 'getRemoteSharedObject',
	    value: function getRemoteSharedObject(sharedObjectName) {// eslint-disable-line no-unused-vars
	      // unsupported at the moment.
	    }
	  }, {
	    key: 'connectToSharedObject',
	    value: function connectToSharedObject(sharedObjectName) {// eslint-disable-line no-unused-vars
	      // unsupported at the moment.
	    }
	  }, {
	    key: 'disconnectFromSharedObject',
	    value: function disconnectFromSharedObject(sharedObjectName) {// eslint-disable-line no-unused-vars
	      // unsupported at the moment.
	    }
	  }, {
	    key: 'getPlayer',
	    value: function getPlayer() {
	      return this.videojs;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return this.playerType;
	    }
	  }, {
	    key: 'disconnect',
	    value: function disconnect() {
	      try {
	        this.video.pause();
	      } catch (e) {
	        // nada.
	      }
	      this.cleanup();
	      this.cleanupVideoJS();
	    }
	  }]);
	
	  return BaseHandler;
	}(_eventEmitter2.default);
	
	exports.default = BaseHandler;

/***/ },
/* 321 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Modifies target `object` in place with a namespaced value.
	 */
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var deepDefine = exports.deepDefine = function deepDefine(object, paths, value) {
	  var i = 0;
	  var tail = object;
	  var prop = paths.pop();
	  var length = paths.length;
	  for (i; i < length; i++) {
	    var path = paths[i];
	    tail[path] = tail[path] || {};
	    tail = tail[path];
	  }
	  tail[prop] = value;
	};

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _red5proRtmpVideojs = __webpack_require__(323);
	
	var _red5proRtmpVideojs2 = _interopRequireDefault(_red5proRtmpVideojs);
	
	var _red5proRtmpLive = __webpack_require__(324);
	
	var _red5proRtmpLive2 = _interopRequireDefault(_red5proRtmpLive);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProRTMPSubscriberProxy';
	
	var RTMPSubscriberProxy = function (_EventEmitter) {
	  _inherits(RTMPSubscriberProxy, _EventEmitter);
	
	  function RTMPSubscriberProxy() {
	    _classCallCheck(this, RTMPSubscriberProxy);
	
	    var _this = _possibleConstructorReturn(this, (RTMPSubscriberProxy.__proto__ || Object.getPrototypeOf(RTMPSubscriberProxy)).call(this));
	
	    _this._view = undefined;
	    _this._boundBubbleSubImplEvent = _this.bubbleSubscriberEvent.bind(_this);
	    return _this;
	  }
	
	  _createClass(RTMPSubscriberProxy, [{
	    key: 'init',
	    value: function init(options) {
	      var impl = void 0;
	      (0, _log.debug)(NAME, 'Options property for useVideoJS: ' + options.useVideoJS + '.');
	      if (options.hasOwnProperty('useVideoJS') && typeof options.useVideoJS === 'boolean' && options.useVideoJS) {
	        (0, _log.debug)(NAME, 'Default to RTMPSubscriber using videojs support.');
	        impl = new _red5proRtmpVideojs2.default();
	        impl.on('*', this._boundBubbleSubImplEvent);
	      } else {
	        (0, _log.debug)(NAME, 'Defaulting to RTMPSubscriber using custom live SWF.');
	        impl = new _red5proRtmpLive2.default();
	        impl.on('*', this._boundBubbleSubImplEvent);
	      }
	      if (this._view) {
	        impl.setView(this._view);
	        this._view = undefined;
	      }
	      return impl.init(options);
	    }
	  }, {
	    key: 'setView',
	    value: function setView(view) {
	      this._view = view;
	    }
	  }, {
	    key: 'bubbleSubscriberEvent',
	    value: function bubbleSubscriberEvent(subscriberEvent) {
	      this.trigger.call(this, subscriberEvent);
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return this._options;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return 'RTMPSubscriberProxy';
	    }
	  }]);
	
	  return RTMPSubscriberProxy;
	}(_eventEmitter2.default);
	
	exports.default = RTMPSubscriberProxy;

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _videojsSourceHandler = __webpack_require__(320);
	
	var _videojsSourceHandler2 = _interopRequireDefault(_videojsSourceHandler);
	
	var _promise = __webpack_require__(310);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProRTMPSubscriber';
	var videojs = _browser2.default.getVideoJs();
	var defaultMimeType = 'rtmp/flv';
	var defaultFlashVersion = '10.0.0';
	var defaultSWF = 'lib/red5pro/red5pro-video-js.swf';
	var optionsToRtmpURL = function optionsToRtmpURL(options) {
	  var protocol = options.rtmpprotocol ? options.rtmpprotocol : options.protocol;
	  var port = options.rtmpport ? options.rtmpport : options.port;
	  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
	  return protocol + '://' + options.host + ':' + port + '/' + appEndpoint + '/' + options.streamName;
	};
	
	var VideoJSSubscriber = function (_EventEmitter) {
	  _inherits(VideoJSSubscriber, _EventEmitter);
	
	  function VideoJSSubscriber() {
	    _classCallCheck(this, VideoJSSubscriber);
	
	    var _this = _possibleConstructorReturn(this, (VideoJSSubscriber.__proto__ || Object.getPrototypeOf(VideoJSSubscriber)).call(this));
	
	    _this._options = undefined;
	    _this._view = undefined;
	    _this._videojsHandler = undefined;
	    _this._boundBubbleSubscriberEvents = _this.bubbleSubscriberEvents.bind(_this);
	    return _this;
	  }
	
	  _createClass(VideoJSSubscriber, [{
	    key: 'bubbleSubscriberEvents',
	    value: function bubbleSubscriberEvents(event) {
	      this.trigger.call(this, event);
	    }
	  }, {
	    key: 'init',
	    value: function init(options) {
	      var deferred = new _promise.DeferredPromise();
	      if (!_browser2.default.supportsFlashVersion(defaultFlashVersion)) {
	        deferred.reject('Could not resolve RTMPSubscriber instance. Requires minimum Flash Player install of ' + defaultFlashVersion + '.');
	      } else if (!_browser2.default.getVideoJs()) {
	        deferred.reject('Could not resolve RTMPSubscriber instance. Requires videojs library.');
	      } else {
	        this._options = options;
	        deferred.resolve(this);
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'setView',
	    value: function setView(view) {
	      this._view = view;
	      if (this._videojsHandler !== undefined) {
	        this._videojsHandler.off('*', this._boundBubbleSubscriberEvents);
	        this._videojsHandler.disconnect();
	        this._videojsHandler = undefined;
	      }
	      if (view) {
	        this._videojsHandler = new _videojsSourceHandler2.default(this._view.view, this.getType());
	      }
	      return this;
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	      var _this2 = this;
	
	      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      var p = promise || new _promise.DeferredPromise();
	      this._options.streamName = streamName || this._options.streamName;
	      var url = optionsToRtmpURL(this._options);
	      var type = defaultMimeType;
	      var swfURL = defaultSWF;
	      if (_typeof(this._options) === 'object') {
	        type = this._options.rtmpMimeType || this._options.mimeType || type;
	        swfURL = this._options.swf || swfURL;
	      }
	      (0, _log.debug)(NAME, '[play]: URL(' + url + ').');
	      this._videojsHandler.on('*', this._boundBubbleSubscriberEvents);
	      this._videojsHandler.addSource(url, type, videojs, swfURL).then(function () {
	        p.resolve(_this2);
	      }).catch(p.reject);
	      return p.hasOwnProperty('promise') ? p.promise : p;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      (0, _log.debug)(NAME, '[stop]');
	      var deferred = new _promise.DeferredPromise();
	      try {
	        this._videojsHandler.off('*', this._boundBubbleSubscriberEvents);
	        this._videojsHandler.disconnect();
	        deferred.resolve();
	      } catch (e) {
	        deferred.reject(e.message);
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'getConnection',
	    value: function getConnection() {
	      return this._videojsHandler;
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return this._options;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return 'RTMP - VideoJS';
	    }
	  }]);
	
	  return VideoJSSubscriber;
	}(_eventEmitter2.default);
	
	exports.default = VideoJSSubscriber;

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _event = __webpack_require__(313);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _promise = __webpack_require__(310);
	
	var _liveSourceHandler = __webpack_require__(325);
	
	var _liveSourceHandler2 = _interopRequireDefault(_liveSourceHandler);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProLiveRTMPSubcriber';
	var defaultOptions = {
	  protocol: 'rtmp',
	  port: 1935,
	  width: 320, // video playback
	  height: 240, // video playback
	  embedWidth: '100%', // DOM display style
	  embedHeight: '100%', // DOM display style
	  minFlashVersion: '10.0.0',
	  swf: 'lib/red5pro/red5pro-subscriber.swf',
	  swfobjectURL: 'lib/red5pro/red5pro-subscriber.swf',
	  productInstallUrl: 'lib/swfobject/playerProductInstall.swf'
	};
	
	var R5LiveSubscriber = function (_EventEmitter) {
	  _inherits(R5LiveSubscriber, _EventEmitter);
	
	  function R5LiveSubscriber() {
	    _classCallCheck(this, R5LiveSubscriber);
	
	    var _this = _possibleConstructorReturn(this, (R5LiveSubscriber.__proto__ || Object.getPrototypeOf(R5LiveSubscriber)).call(this));
	
	    _this._options = undefined;
	    _this._view = undefined;
	    _this._sourceHandler = undefined;
	    _this._elementId = undefined;
	    _this._playbackPromise = undefined;
	    return _this;
	  }
	
	  _createClass(R5LiveSubscriber, [{
	    key: 'init',
	    value: function init(options) {
	      var self = this;
	      var deferred = new _promise.DeferredPromise();
	      var version = options.minFlashVersion || defaultOptions.minFlashVersion;
	      if (!_browser2.default.supportsFlashVersion(version)) {
	        deferred.reject('Could not resolve LiveRTMPSubscriber instance. Requires minimum Flash Player install of ' + version + '.');
	      } else {
	        this._options = Object.assign({}, defaultOptions, options);
	        try {
	          _browser2.default.injectScript(this._options.swfobjectURL).then(function () {
	            (0, _log.debug)(NAME, 'SWFObject embedded.');
	            if (self._sourceHandler) {
	              return self._sourceHandler.addSource(self._elementId, self._options);
	            }
	            return true;
	          }).then(function () {
	            deferred.resolve(self);
	            self.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_SUCCESS, self));
	          }).catch(function (err) {
	            (0, _log.error)(NAME, 'Could not embed Flash-based RTMP Player. Reason: ' + err);
	            if (self._sourceHandler) {
	              self._sourceHandler.disconnect();
	            }
	            deferred.reject(err);
	            self.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_FAILURE, self));
	          });
	        } catch (e) {
	          deferred.reject('Could not inject Flash-based Player into the page. Reason: ' + e.message);
	          self.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_FAILURE, self));
	        }
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'setView',
	    value: function setView(view, elementId) {
	      var self = this;
	      this._view = view;
	      this._elementId = elementId;
	      if (this._sourceHandler !== undefined) {
	        this._sourceHandler.disconnect();
	        this._sourceHandler = undefined;
	      }
	
	      if (view) {
	        this._sourceHandler = new _liveSourceHandler2.default(this._view.view, this.getType());
	        if (this._options) {
	          this._sourceHandler.addSource(this._elementId, this._options).catch(function () {
	            self.trigger(new _event.SubscriberEvent(_event.RTMPSubscriberEventTypes.EMBED_FAILURE, self));
	          });
	        }
	      }
	      return this;
	    }
	  }, {
	    key: '_establishExtIntHandlers',
	    value: function _establishExtIntHandlers() {
	      var _this2 = this;
	
	      var id = this._options.streamName;
	      var invokeFn = function invokeFn(label) {
	        return ['subscriber', label, id].join('_');
	      };
	      window[invokeFn('r5proConnectSuccess')] = function () {
	        return _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_SUCCESS, _this2));
	      };
	      window[invokeFn('r5proConnectFailure')] = function () {
	        return _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.CONNECT_FAILURE, _this2));
	      };
	      window[invokeFn('r5proSubscribeStop')] = function () {
	        return _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_STOP, _this2));
	      };
	      window[invokeFn('r5proSubscribeInvalidName')] = function () {
	        return _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_INVALID_NAME, _this2));
	      };
	      window[invokeFn('r5proSubscribeMetadata')] = function (metadata) {
	        return _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_METADATA, _this2, metadata));
	      };
	      window[invokeFn('r5proSubscribeStart')] = function () {
	        _this2._playbackPromise.resolve(_this2);
	        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_START, _this2));
	      };
	      window[invokeFn('r5proSubscribeFail')] = function () {
	        _this2._playbackPromise.reject("Failed to start playback stream.");
	        _this2.trigger(new _event.SubscriberEvent(_event.SubscriberEventTypes.SUBSCRIBE_FAIL, _this2));
	      };
	    }
	  }, {
	    key: 'play',
	    value: function play() {
	      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      // eslint-disable-line no-unused-vars
	      this._playbackPromise = new _promise.DeferredPromise();
	      this._establishExtIntHandlers();
	      return this._playbackPromise.promise;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      var _this3 = this;
	
	      var cb = function cb(resolve, reject) {
	        try {
	          _this3._sourceHandler.disconnect();
	          resolve();
	        } catch (e) {
	          reject(e.message);
	        }
	      };
	      this._playbackPromise = undefined;
	      return new Promise(cb);
	    }
	  }, {
	    key: 'getConnection',
	    value: function getConnection() {
	      return this._sourceHandler;
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return this._options;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return 'RTMP';
	    }
	  }]);
	
	  return R5LiveSubscriber;
	}(_eventEmitter2.default);
	
	exports.default = R5LiveSubscriber;

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	'use script';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _embed = __webpack_require__(326);
	
	var embed = _interopRequireWildcard(_embed);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _promise = __webpack_require__(310);
	
	var _log = __webpack_require__(299);
	
	var _sharedobjectHelperRtmp = __webpack_require__(327);
	
	var _sharedobjectHelperRtmp2 = _interopRequireDefault(_sharedobjectHelperRtmp);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'RTMPLiveSourceHandler';
	var toInt = function toInt(value) {
	  if (typeof value === 'string') {
	    return value.parseInt(10);
	  } else {
	    return Math.round(value);
	  }
	};
	
	var LiveSourceHandler = function () {
	  function LiveSourceHandler(video, type) {
	    var soResponder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
	
	    _classCallCheck(this, LiveSourceHandler);
	
	    this.video = video;
	    this.clone = this.video.cloneNode(true);
	    this.holder = this.video.parentNode;
	    this.playerType = type;
	    this._swfId = null;
	    this._soResponder = soResponder || new _sharedobjectHelperRtmp2.default();
	  }
	
	  _createClass(LiveSourceHandler, [{
	    key: 'cleanUp',
	    value: function cleanUp() {
	      // Return to prior DOM manipulation.
	      this.video.remove();
	      this.video = this.clone.cloneNode(true);
	      this.holder.appendChild(this.video);
	    }
	  }, {
	    key: '_setUpInitCallback',
	    value: function _setUpInitCallback(promise) {
	      var _this = this;
	
	      window.setSubscriberId = function (successId) {
	        // successId === _options.streamName
	        (0, _log.debug)(NAME, 'Embed and init() complete for subscriber swf. successId(' + successId + ').');
	        promise.resolve(successId);
	        _this._tearDownInitCallback();
	      };
	      // TODO: Setup timeout to reject?
	    }
	  }, {
	    key: '_tearDownInitCallback',
	    value: function _tearDownInitCallback() {
	      window.setActiveId = undefined;
	    }
	  }, {
	    key: 'addSource',
	    value: function addSource(swfId, options) {
	      var swfUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	      var minFlashVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	      (0, _log.debug)(NAME, '[addsource]');
	      this._swfId = swfId;
	      var soResponder = this._soResponder;
	      var deferred = new _promise.DeferredPromise();
	      options.swf = swfUrl || options.swf;
	      options.minFlashVersion = minFlashVersion || options.minFlashVersion;
	      this._setUpInitCallback(deferred);
	      embed.defineEmbedElement(this.video, this.holder).then(function (elementId) {
	        var flashvars = {
	          stream: options.streamName,
	          app: options.context ? options.app + '/' + options.context : options.app,
	          host: options.host
	        };
	        if (options.buffer && !isNaN(Number(options.buffer))) {
	          flashvars.buffer = options.buffer;
	        }
	        if (options.width && !isNaN(options.width)) {
	          flashvars.width = toInt(options.width);
	        }
	        if (options.height && !isNaN(options.height)) {
	          flashvars.height = toInt(options.height);
	        }
	        if (options.embedWidth === '100%' || options.embedHeight === '100%') {
	          flashvars.autosize = true;
	        }
	        if (typeof options.connectionParams !== 'undefined') {
	          flashvars.connectionParams = encodeURIComponent(JSON.stringify(options.connectionParams));
	        }
	        return embed.embedSwfObject(swfId, options, flashvars, _browser2.default.getSwfObject(), elementId);
	      }).then(function () {
	        soResponder.connect(swfId);
	        return true;
	      }).catch(function (e) {
	        return deferred.reject(e);
	      });
	      return deferred.promise;
	    }
	  }, {
	    key: 'connect',
	    value: function connect() {
	      (0, _log.debug)(NAME, '[connect]');
	      try {
	        _browser2.default.getEmbedObject(this._swfId).connect();
	      } catch (e) {
	        // nada.
	      }
	    }
	  }, {
	    key: 'disconnect',
	    value: function disconnect() {
	      (0, _log.debug)(NAME, '[disconnect]');
	      try {
	        _browser2.default.getEmbedObject().disconnect();
	      } catch (e) {
	        // nada.
	      }
	      this.cleanUp();
	      this._soResponder.disconnect();
	    }
	  }, {
	    key: 'addSharedObjectResponseHandler',
	    value: function addSharedObjectResponseHandler(handler) {
	      this._soResponder.addResponseHandler(handler);
	    }
	  }, {
	    key: 'removeSharedObjectResponseHandler',
	    value: function removeSharedObjectResponseHandler(handler) {
	      this._soResponder.removeResponseHandler(handler);
	    }
	  }, {
	    key: 'sendToSharedObject',
	    value: function sendToSharedObject(name, callName, message) {
	      this._soResponder.sendToSharedObject(name, callName, message);
	    }
	  }, {
	    key: 'sendPropertyToSharedObject',
	    value: function sendPropertyToSharedObject(name, key, value) {
	      this._soResponder.sendPropertyToSharedObject(name, key, value);
	    }
	  }, {
	    key: 'getRemoteSharedObject',
	    value: function getRemoteSharedObject(sharedObjectName) {
	      this._soResponder.getRemoteSharedObject(sharedObjectName);
	    }
	  }, {
	    key: 'connectToSharedObject',
	    value: function connectToSharedObject(sharedObjectName) {
	      this._soResponder.connectToSharedObject(sharedObjectName);
	    }
	  }, {
	    key: 'closeSharedObject',
	    value: function closeSharedObject(sharedObjectName) {
	      this._soResponder.closeSharedObject(sharedObjectName);
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return this.playerType;
	    }
	  }]);
	
	  return LiveSourceHandler;
	}();
	
	exports.default = LiveSourceHandler;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.embedSwfObject = exports.defineEmbedElement = undefined;
	
	var _promise = __webpack_require__(310);
	
	var defineEmbedElement = exports.defineEmbedElement = function defineEmbedElement(targetElement, targetParent) {
	  var dfd = new _promise.DeferredPromise();
	  var elementId = targetElement.id;
	  if (targetElement.nodeName.toLowerCase() === 'video') {
	    var div = document.createElement('div');
	    div.id = elementId + '_rtmp';
	    targetParent.appendChild(div);
	    targetElement.remove();
	    dfd.resolve(div.id);
	  } else {
	    dfd.resolve(elementId);
	  }
	  return dfd.promise;
	};
	
	var embedSwfObject = exports.embedSwfObject = function embedSwfObject(idName, options, flashvars, swfobject, elementId) {
	  var dfd = new _promise.DeferredPromise();
	  var params = {
	    quality: 'high',
	    bgcolor: '#000',
	    allowscriptaccess: 'always',
	    allowfullscreen: 'true'
	  };
	  var attributes = {
	    id: idName,
	    name: idName,
	    align: 'middle'
	  };
	  if (swfobject.hasFlashPlayerVersion(options.minFlashVersion)) {
	    swfobject.embedSWF(options.swf, elementId, options.embedWidth || options.width, options.embedHeight || options.height, options.minFlashVersion, options.productInstallURL, flashvars, params, attributes, dfd.resolve);
	  } else {
	    dfd.reject('Flash Player Version is not supported.');
	  }
	  return dfd.promise;
	};

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'R5ProRTMPSharedObjectHandler';
	
	var RTMPSharedObjectHandler = function () {
	  function RTMPSharedObjectHandler() {
	    _classCallCheck(this, RTMPSharedObjectHandler);
	
	    this._element = undefined;
	    this._responseHandlers = [];
	  }
	
	  _createClass(RTMPSharedObjectHandler, [{
	    key: 'addResponseHandler',
	    value: function addResponseHandler(handler) {
	      this._responseHandlers.push(handler);
	    }
	  }, {
	    key: 'removeResponseHandler',
	    value: function removeResponseHandler(handler) {
	      var i = this._responseHandlers.length;
	      var rHandler = void 0;
	      while (--i > -1) {
	        rHandler = this._responseHandlers[i];
	        if (rHandler === handler) {
	          this._responseHandlers.splice(i, 1);
	          return;
	        }
	      }
	    }
	  }, {
	    key: 'handleSharedObjectEvent',
	    value: function handleSharedObjectEvent(event) {
	      (0, _log.debug)(NAME, '[sharedobject:event]');
	      var i = void 0;
	      var length = this._responseHandlers.length;
	      var handler = void 0;
	      for (i = 0; i < length; i++) {
	        handler = this._responseHandlers[i];
	        if (handler.respond(JSON.parse(event))) {
	          break;
	        }
	      }
	    }
	  }, {
	    key: 'assignSharedObjectResponder',
	    value: function assignSharedObjectResponder(name, el) {
	      var _handleSharedObjectEvent = this.handleSharedObjectEvent.bind(this);
	      var elId = el.id.split('-').join('_');
	      var handlerName = ['handleSharedObjectEvent', elId].join('_');
	      (0, _log.debug)(NAME, '[assign:sharedobject:responder] :: ' + elId);
	      (0, _log.debug)(NAME, '[sharedoject:responder] :: ' + handlerName);
	      el.setSharedObjectResponder(name, handlerName);
	      _browser2.default.setGlobal(handlerName, _handleSharedObjectEvent);
	    }
	  }, {
	    key: 'connect',
	    value: function connect(swfId) {
	      this._element = _browser2.default.getEmbedObject(swfId);
	      if (!this._element) {
	        (0, _log.warn)('Could not locate embedded Flash object for id: ' + swfId);
	      }
	    }
	  }, {
	    key: 'disconnect',
	    value: function disconnect() {
	      while (this._responseHandlers.length > 0) {
	        this._responseHandlers.shift();
	      }
	    }
	  }, {
	    key: 'sendToSharedObject',
	    value: function sendToSharedObject(name, callName, message) {
	      (0, _log.debug)(NAME, '[sendToSharedObject]');
	      try {
	        this._element.sharedObjectSend(name, callName, typeof message === 'string' ? message : JSON.stringify(message));
	      } catch (e) {
	        (0, _log.warn)('Could not send to shared object (' + name + '). Error: ' + e.message);
	      }
	    }
	  }, {
	    key: 'sendPropertyToSharedObject',
	    value: function sendPropertyToSharedObject(name, key, value) {
	      (0, _log.debug)(NAME, '[sendPropertyToSharedObject]');
	      try {
	        this._element.sharedObjectSendProperty(name, key, value);
	      } catch (e) {
	        (0, _log.warn)('Could not send to shared object (' + name + '). Error: ' + e.message);
	      }
	    }
	  }, {
	    key: 'getRemoteSharedObject',
	    value: function getRemoteSharedObject(sharedObjectName) {
	      (0, _log.debug)(NAME, '[getRemoteSharedObject]');
	      try {
	        this.assignSharedObjectResponder(sharedObjectName, this._element);
	        this._element.getRemoteSharedObject(sharedObjectName);
	      } catch (e) {
	        (0, _log.warn)('Could not get remote shared object (' + name + '). Error: ' + e.message);
	      }
	    }
	  }, {
	    key: 'connectToSharedObject',
	    value: function connectToSharedObject(sharedObjectName) {
	      (0, _log.debug)(NAME, '[connectToSharedObject]');
	      try {
	        this._element.connectToSharedObject(sharedObjectName);
	      } catch (e) {
	        (0, _log.warn)('Could not connect to shared object (' + name + '). Error: ' + e.message);
	      }
	    }
	  }, {
	    key: 'closeSharedObject',
	    value: function closeSharedObject(sharedObjectName) {
	      (0, _log.debug)(NAME, '[disconnectToSharedObject]');
	      try {
	        this._element.disconnectFromSharedObject(sharedObjectName);
	      } catch (e) {
	        (0, _log.warn)('Could not disconnect to shared object (' + name + '). Error: ' + e.message);
	      }
	    }
	  }]);
	
	  return RTMPSharedObjectHandler;
	}();
	
	exports.default = RTMPSharedObjectHandler;

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ImplFactoryOrder = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _promise = __webpack_require__(310);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var map = new WeakMap();
	
	var pvt = function pvt(ctx) {
	  if (!map.has(ctx)) {
	    map.set(ctx, {});
	  }
	
	  return map.get(ctx);
	};
	
	var ImplFactoryOrder = exports.ImplFactoryOrder = function () {
	  function ImplFactoryOrder() {
	    var _this = this;
	
	    _classCallCheck(this, ImplFactoryOrder);
	
	    this.listorder = function () {
	      return regeneratorRuntime.mark(function listorder(list) {
	        return regeneratorRuntime.wrap(function listorder$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                if (!(list.length > 0)) {
	                  _context.next = 5;
	                  break;
	                }
	
	                _context.next = 3;
	                return list.shift();
	
	              case 3:
	                _context.next = 0;
	                break;
	
	              case 5:
	              case 'end':
	                return _context.stop();
	            }
	          }
	        }, listorder, this);
	      });
	    }();
	
	    pvt(this).find = function (iterator, map, options, promise) {
	      var initFn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
	
	      var _pvt$next = pvt(_this).next(iterator, map),
	          _pvt$next2 = _slicedToArray(_pvt$next, 2),
	          type = _pvt$next2[0],
	          Impl = _pvt$next2[1];
	
	      if (!Impl) {
	        promise.reject();
	      } else {
	        var p = void 0;
	        var src = options[type];
	        src = src || options;
	        if (initFn) {
	          p = new Impl()[initFn](src);
	        } else {
	          p = new Impl(src);
	        }
	        p.then(function (concrete) {
	          promise.resolve(concrete);
	        }).catch(function () {
	          // eslint-disable-line no-unused-vars
	          pvt(_this).find(iterator, map, options, promise, initFn);
	        });
	      }
	    };
	
	    pvt(this).next = function (order, map) {
	      var Impl = void 0;
	      var key = void 0;
	      var next = order.next();
	      if (!next.done) {
	        key = next.value;
	        Impl = map.get(key);
	      }
	      return [key, Impl];
	    };
	  }
	
	  _createClass(ImplFactoryOrder, [{
	    key: 'create',
	    value: function create(order, map, options) {
	      var initFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	      var promise = new _promise.DeferredPromise();
	      pvt(this).find(this.listorder(order.slice()), map, options, promise, initFn);
	      return promise.promise;
	    }
	  }]);
	
	  return ImplFactoryOrder;
	}();
	
	exports.default = ImplFactoryOrder;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Main entry for failover support of all publisher implementations.
	 */
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.RTCPublisher = exports.RTMPPublisher = exports.Red5ProPublisher = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _implFactoryOrder = __webpack_require__(328);
	
	var _implFactoryOrder2 = _interopRequireDefault(_implFactoryOrder);
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _red5proRtmp = __webpack_require__(330);
	
	var _red5proRtmp2 = _interopRequireDefault(_red5proRtmp);
	
	var _red5proRtc = __webpack_require__(333);
	
	var _red5proRtc2 = _interopRequireDefault(_red5proRtc);
	
	var _promise = __webpack_require__(310);
	
	var _publish = __webpack_require__(331);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProPublisher';
	var publishFactory = new _implFactoryOrder2.default();
	var publisherImpl = function () {
	  var map = new Map();
	  map.set(_publish.PublishTypes.RTMP, _red5proRtmp2.default);
	  map.set(_publish.PublishTypes.RTC, _red5proRtc2.default);
	  return map;
	}();
	
	var Red5ProPublisher = function (_EventEmitter) {
	  _inherits(Red5ProPublisher, _EventEmitter);
	
	  function Red5ProPublisher() {
	    _classCallCheck(this, Red5ProPublisher);
	
	    var _this = _possibleConstructorReturn(this, (Red5ProPublisher.__proto__ || Object.getPrototypeOf(Red5ProPublisher)).call(this));
	
	    _this._options = undefined;
	    _this._view = undefined;
	    _this._currentPublisher = undefined;
	    _this._boundBubblePublisherEvent = _this.bubblePublisherEvent.bind(_this);
	    _this._order = [_publish.PublishTypes.RTMP, _publish.PublishTypes.RTC];
	    return _this;
	  }
	
	  _createClass(Red5ProPublisher, [{
	    key: 'getPublishOrder',
	    value: function getPublishOrder() {
	      return this._order;
	    }
	  }, {
	    key: 'setPublishOrder',
	    value: function setPublishOrder(order) {
	      // Allow for string value to define single item in order.
	      order = typeof order === 'string' ? [order] : order;
	
	      // Filter out values not available in enumeration of playback types.
	      var t = order.filter(function (entry) {
	        var key = void 0;
	        for (key in _publish.PublishTypes) {
	          if (_publish.PublishTypes[key].toLowerCase() === entry.toLowerCase()) {
	            return true;
	          }
	        }
	        return false;
	      }).map(function (entry) {
	        return entry.toLowerCase();
	      });
	
	      // Define new order.
	      this._order = [].concat(_toConsumableArray(new Set(t)));
	      (0, _log.debug)(NAME, '[orderupdate]: ' + this._order);
	      return this;
	    }
	  }, {
	    key: 'setView',
	    value: function setView(publishView) {
	      this._view = publishView;
	      return this;
	    }
	  }, {
	    key: 'getPublisherFromOrder',
	    value: function getPublisherFromOrder(order, options) {
	      return publishFactory.create(order, publisherImpl, options, 'init');
	    }
	  }, {
	    key: 'init',
	    value: function init(options) {
	      var _this2 = this;
	
	      var deferred = new _promise.DeferredPromise();
	      (0, _log.debug)(NAME, '[publish]');
	      this._options = options;
	      this.getPublisherFromOrder(this._order, this._options).then(function (publisher) {
	        _this2._currentPublisher = publisher;
	        _this2._currentPublisher.setView(_this2._view);
	        _this2._currentPublisher.on('*', _this2._boundBubblePublisherEvent);
	        deferred.resolve(_this2._currentPublisher);
	      }).catch(function (err) {
	        (0, _log.warn)(NAME, '[publisherror]: Could not implement a publisher: ' + err);
	        deferred.reject(err);
	      });
	      return deferred.promise;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      var _this3 = this;
	
	      var deferred = new _promise.DeferredPromise();
	      if (!this._currentPublisher) {
	        (0, _log.warn)(NAME, '[stop]: Could not invoke stop() on undefined publisher.');
	        deferred.reject('A current publisher is not available to issue a :stop() command to.');
	      } else {
	        (0, _log.debug)(NAME, '[stop]: Invoking stop on held publisher');
	        this._currentPublisher.unpublish().then(function () {
	          (0, _log.debug)(NAME, '[stopsuccess]');
	          _this3._currentPublisher.off('*', _this3._boundBubblePublisherEvent);
	          _this3._currentPublisher = undefined;
	          deferred.resolve();
	        }).catch(function (err) {
	          (0, _log.debug)(NAME, '[stoperror]: ' + err);
	          if (_this3._currentPublisher) {
	            _this3._currentPublisher.off('*', _this3._boundBubblePublisherEvent);
	          }
	          _this3._currentPublisher = undefined;
	          deferred.reject(err);
	        });
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'bubblePublisherEvent',
	    value: function bubblePublisherEvent(publisherEvent) {
	      this.trigger.call(this, publisherEvent);
	    }
	  }, {
	    key: 'publishTypes',
	    get: function get() {
	      return _publish.PublishTypes;
	    }
	  }, {
	    key: 'currentPublisher',
	    get: function get() {
	      return this._currentPublisher;
	    }
	  }]);
	
	  return Red5ProPublisher;
	}(_eventEmitter2.default);
	
	exports.Red5ProPublisher = Red5ProPublisher;
	exports.RTMPPublisher = _red5proRtmp2.default;
	exports.RTCPublisher = _red5proRtc2.default;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _event = __webpack_require__(313);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _promise = __webpack_require__(310);
	
	var _publish = __webpack_require__(331);
	
	var _pubSourceHandler = __webpack_require__(332);
	
	var _pubSourceHandler2 = _interopRequireDefault(_pubSourceHandler);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProRTMPPublisher';
	var defaultOptions = {
	  protocol: 'rtmp',
	  port: 1935,
	  streamMode: 'live',
	  width: 320, // camera/video
	  height: 240, // camera/video
	  embedWidth: '100%', // DOM display style
	  embedHeight: '100%', // DOM display style
	  minFlashVersion: '10.0.0',
	  swf: 'lib/red5pro/red5pro-publisher.swf',
	  swfobjectURL: 'lib/swfobject/swfobject.js',
	  productInstallURL: 'lib/swfobject/playerProductInstall.swf'
	};
	
	var RTMPPublisher = function (_EventEmitter) {
	  _inherits(RTMPPublisher, _EventEmitter);
	
	  function RTMPPublisher() {
	    _classCallCheck(this, RTMPPublisher);
	
	    var _this = _possibleConstructorReturn(this, (RTMPPublisher.__proto__ || Object.getPrototypeOf(RTMPPublisher)).call(this));
	
	    _this._options = undefined;
	    _this._view = undefined;
	    _this._sourceHandler = undefined;
	    _this._elementId = undefined;
	    _this._connectFuture = undefined;
	    return _this;
	  }
	
	  _createClass(RTMPPublisher, [{
	    key: 'init',
	    value: function init(options) {
	      var self = this;
	      var deferred = new _promise.DeferredPromise();
	      var version = options.minFlashVersion || defaultOptions.minFlashVersion;
	      if (!_browser2.default.supportsFlashVersion(version)) {
	        deferred.reject('Could not resolve RTMPPublisher instance. Requires minimum Flash Player install of ' + version);
	      } else {
	        this._options = Object.assign({}, defaultOptions, options);
	        try {
	          _browser2.default.injectScript(this._options.swfobjectURL).then(function () {
	            (0, _log.debug)(NAME, 'SWFObject embedded.');
	            if (self._sourceHandler) {
	              (0, _log.debug)(NAME, 'Publish handler established.');
	              return self._sourceHandler.addSource(self._elementId, self._options);
	            } else {
	              (0, _log.debug)(NAME, 'Publish handler not established.');
	              return true;
	            }
	          }).then(function () {
	            return deferred.resolve(self);
	          }).catch(function (err) {
	            (0, _log.error)(NAME, 'Could not embed Flash-based RTMP Publisher. Reason: ' + err);
	            if (self._sourceHandler) {
	              self._sourceHandler.disconnect();
	            }
	            deferred.reject(err);
	            self.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_FAILURE, self));
	          });
	        } catch (e) {
	          deferred.reject('Could not inject Flash-based Publisher into the page. Reason: ' + e.message);
	          self.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_FAILURE, self));
	        }
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: '_setUpConnectCallback',
	    value: function _setUpConnectCallback(promise) {
	      var _this2 = this;
	
	      window.setActiveId = function (successId) {
	        // successId === _options.streamName
	        (0, _log.debug)(NAME, 'Embed and connect() complete for publisher swf. successId(' + successId + ').');
	        promise.resolve(successId);
	        _this2.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_SUCCESS, _this2));
	        _this2._tearDownConnectCallback();
	      };
	      // TODO: Setup timeout to reject?
	    }
	  }, {
	    key: '_tearDownConnectCallback',
	    value: function _tearDownConnectCallback() {
	      window.setActiveId = undefined;
	    }
	  }, {
	    key: '_establishExtIntHandlers',
	    value: function _establishExtIntHandlers() {
	      var _this3 = this;
	
	      var id = this._options.streamName;
	      var invokeFn = function invokeFn(label) {
	        return ['publisher', label, id].join('_');
	      };
	      window[invokeFn('r5proConnectSuccess')] = function () {
	        return _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_SUCCESS, _this3));
	      };
	      window[invokeFn('r5proUnpublishSuccess')] = function () {
	        return _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.UNPUBLISH_SUCCESS, _this3));
	      };
	      window[invokeFn('r5proPublishStart')] = function () {
	        return _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_START, _this3));
	      };
	      window[invokeFn('r5proPublishMetadata')] = function (metadata) {
	        return _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_METADATA, _this3, metadata));
	      };
	      window[invokeFn('r5proConnectFailure')] = function () {
	        _this3._connectFuture.reject(_event.PublisherEventTypes.CONNECT_FAILURE);
	        _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, _this3));
	      };
	      window[invokeFn('r5proPublishFail')] = function () {
	        _this3._connectFuture.reject(_event.PublisherEventTypes.PUBLISH_FAIL);
	        _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_FAIL, _this3));
	      };
	      window[invokeFn('r5proPublishInvalidName')] = function () {
	        _this3._connectFuture.reject(_event.PublisherEventTypes.PUBLISH_INVALID_NAME);
	        _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_INVALID_NAME, _this3));
	      };
	    }
	  }, {
	    key: 'publish',
	    value: function publish() {
	      var _this4 = this;
	
	      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
	      // eslint-disable-line no-unused-vars
	      var dfd = new _promise.DeferredPromise();
	      this._setUpConnectCallback(dfd);
	      this._options.streamName = streamName || this._options.streamName;
	      var publishOptions = this._options;
	      try {
	        (function () {
	          var srcHandler = _this4._sourceHandler;
	          _this4._sourceHandler.getEmbedOperation().then(function () {
	            (0, _log.debug)(NAME, '[handler:embed:complete]');
	            var el = _browser2.default.getEmbedObject(_this4._elementId);
	            if (el) {
	              _this4._establishExtIntHandlers();
	            }
	            var count = 0;
	            var limit = 1000;
	            var tryConnect = function tryConnect() {
	              var timeout = void 0;
	              timeout = setTimeout(function () {
	                try {
	                  clearTimeout(timeout);
	                  srcHandler.connect(JSON.stringify(publishOptions));
	                } catch (e) {
	                  if (count++ > limit) {
	                    throw e;
	                  } else {
	                    tryConnect();
	                  }
	                }
	              }, 300);
	            };
	            tryConnect();
	          }).catch(function (err) {
	            dfd.reject(err);
	            _this4.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, _this4));
	          });
	        })();
	      } catch (e) {
	        (0, _log.error)(NAME, '[handler:embed:error]');
	        dfd.reject('Could not initiate connection sequence. Reason: ' + e.message);
	        this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, this));
	        this._tearDownConnectCallback();
	      }
	      this._connectFuture = dfd;
	      return dfd.promise;
	    }
	  }, {
	    key: 'unpublish',
	    value: function unpublish() {
	      var deferred = new _promise.DeferredPromise();
	      try {
	        _browser2.default.getEmbedObject(this._elementId).disconnect();
	        deferred.resolve();
	      } catch (e) {
	        (0, _log.error)(NAME, 'Could not initiate disconnection sequence. Reason: ' + e.message);
	        deferred.reject(e.message);
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'send',
	    value: function send(methodName, data) {
	      this._sourceHandler.send(methodName, typeof data === 'string' ? data : JSON.stringify(data));
	    }
	  }, {
	    key: 'setView',
	    value: function setView(view, elementId) {
	      var _this5 = this;
	
	      this._view = view;
	      this._elementId = elementId;
	      if (this._sourceHandler !== undefined) {
	        this._sourceHandler.disconnect();
	        this._sourceHandler = undefined;
	      }
	      if (this._view) {
	        this._sourceHandler = new _pubSourceHandler2.default(this._view.view, this.getType());
	      }
	      if (this._options && this._sourceHandler) {
	        this._sourceHandler.addSource(this._elementId, this._options).catch(function (err) {
	          (0, _log.error)(NAME, 'Could not establish proper RTMP publisher: ' + err);
	          _this5.trigger(new _event.PublisherEvent(_event.RTMPPublisherEventTypes.EMBED_FAILURE, _this5));
	        });
	      }
	      return this;
	    }
	  }, {
	    key: 'setMediaQuality',
	    value: function setMediaQuality(quality) {
	      if (this._sourceHandler) {
	        this._sourceHandler.setMediaQuality(quality);
	      }
	    }
	  }, {
	    key: 'overlayOptions',
	    value: function overlayOptions(newOptions) {
	      this._options = Object.assign(this._options, newOptions);
	    }
	  }, {
	    key: 'getConnection',
	    value: function getConnection() {
	      return this._sourceHandler;
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return this._options;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return _publish.PublishTypes.RTMP.toUpperCase();
	    }
	  }]);
	
	  return RTMPPublisher;
	}(_eventEmitter2.default);
	
	exports.default = RTMPPublisher;

/***/ },
/* 331 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var PublishTypes = exports.PublishTypes = Object.freeze({
	  RTMP: 'rtmp',
	  RTC: 'rtc'
	});
	
	var PublishModeTypes = exports.PublishModeTypes = Object.freeze({
	  LIVE: 'live',
	  RECORD: 'record',
	  APPEND: 'append'
	});

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _embed = __webpack_require__(326);
	
	var embed = _interopRequireWildcard(_embed);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _promise = __webpack_require__(310);
	
	var _log = __webpack_require__(299);
	
	var _sharedobjectHelperRtmp = __webpack_require__(327);
	
	var _sharedobjectHelperRtmp2 = _interopRequireDefault(_sharedobjectHelperRtmp);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'R5ProPublisherSourceHandler';
	var toInt = function toInt(value) {
	  if (typeof value === 'string') {
	    return value.parseInt(10);
	  } else {
	    return Math.round(value);
	  }
	};
	
	var PublisherSourceHandler = function () {
	  function PublisherSourceHandler(video, type) {
	    var soResponder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
	
	    _classCallCheck(this, PublisherSourceHandler);
	
	    this.video = video;
	    this.clone = this.video.cloneNode(true);
	    this.holder = this.video.parentNode;
	    this.publisherType = type;
	    this._swfId = null;
	    this._embedFuture = undefined;
	    this._soResponder = soResponder || new _sharedobjectHelperRtmp2.default();
	  }
	
	  _createClass(PublisherSourceHandler, [{
	    key: 'getEmbedOperation',
	    value: function getEmbedOperation() {
	      this._embedFuture = _promise.Future.createIfNotExist(this._embedFuture);
	      return this._embedFuture.promise;
	    }
	  }, {
	    key: 'cleanUp',
	    value: function cleanUp() {
	      // Return to prior DOM manipulation.
	      this.video.remove();
	      this.video = this.clone.cloneNode(true);
	      this.holder.appendChild(this.video);
	      this._embedFuture = undefined;
	    }
	  }, {
	    key: 'addSource',
	    value: function addSource(swfId, options) {
	      var swfUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	      var minFlashVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	      (0, _log.debug)(NAME, '[addsource]');
	      var self = this;
	      this._swfId = swfId;
	      this._embedFuture = _promise.Future.createIfNotExist(this._embedFuture);
	      var deferred = this._embedFuture;
	      options.swf = swfUrl || options.swf;
	      options.minFlashVersion = minFlashVersion || options.minFlashVersion;
	      embed.defineEmbedElement(this.video, this.holder).then(function (elementId) {
	        (0, _log.debug)(NAME, '[element:complete]');
	        var flashvars = {
	          buffer: options.buffer != null ? options.buffer : 2,
	          streamMode: options.streamMode,
	          streamName: options.streamName,
	          appName: options.app,
	          host: options.host
	        };
	        if (options.context) {
	          flashvars.roomName = options.context;
	        }
	        if (options.width && !isNaN(options.width)) {
	          flashvars.width = toInt(options.width);
	        }
	        if (options.height && !isNaN(options.height)) {
	          flashvars.height = toInt(options.height);
	        }
	        if (options.embedWidth === '100%' || options.embedHeight === '100%') {
	          flashvars.autosize = true;
	        }
	        if (typeof options.connectionParams !== 'undefined') {
	          flashvars.connectionParams = encodeURIComponent(JSON.stringify(options.connectionParams));
	        }
	        return embed.embedSwfObject(swfId, options, flashvars, _browser2.default.getSwfObject(), elementId);
	      }).then(function () {
	        (0, _log.debug)(NAME, '[embed:complete]');
	        deferred.resolve(self);
	      }).catch(function (err) {
	        return deferred.reject(err);
	      });
	      return deferred.promise;
	    }
	  }, {
	    key: 'connect',
	    value: function connect(publishOptions) {
	      (0, _log.debug)(NAME, '[connect]');
	      var el = _browser2.default.getEmbedObject(this._swfId);
	      if (el) {
	        el.connect(publishOptions);
	        this._soResponder.connect(this._swfId);
	      }
	    }
	  }, {
	    key: 'disconnect',
	    value: function disconnect() {
	      (0, _log.debug)(NAME, '[disconnect]');
	      try {
	        // No invocable API for custom live flash publisher from Red5 Pro at the time.
	      } catch (e) {
	        // nada.
	      }
	      this.cleanUp();
	      this._soResponder.disconnect();
	    }
	  }, {
	    key: 'send',
	    value: function send(methodName, data) {
	      var el = _browser2.default.getEmbedObject(this._swfId);
	      if (el) {
	        el.send(methodName, data);
	      }
	    }
	  }, {
	    key: 'addSharedObjectResponseHandler',
	    value: function addSharedObjectResponseHandler(handler) {
	      this._soResponder.addResponseHandler(handler);
	    }
	  }, {
	    key: 'removeSharedObjectResponseHandler',
	    value: function removeSharedObjectResponseHandler(handler) {
	      this._soResponder.removeResponseHandler(handler);
	    }
	  }, {
	    key: 'sendToSharedObject',
	    value: function sendToSharedObject(name, callName, message) {
	      this._soResponder.sendToSharedObject(name, callName, message);
	    }
	  }, {
	    key: 'sendPropertyToSharedObject',
	    value: function sendPropertyToSharedObject(name, key, value) {
	      this._soResponder.sendPropertyToSharedObject(name, key, value);
	    }
	  }, {
	    key: 'getRemoteSharedObject',
	    value: function getRemoteSharedObject(sharedObjectName) {
	      this._soResponder.getRemoteSharedObject(sharedObjectName);
	    }
	  }, {
	    key: 'connectToSharedObject',
	    value: function connectToSharedObject(sharedObjectName) {
	      this._soResponder.connectToSharedObject(sharedObjectName);
	    }
	  }, {
	    key: 'closeSharedObject',
	    value: function closeSharedObject(sharedObjectName) {
	      this._soResponder.closeSharedObject(sharedObjectName);
	    }
	  }, {
	    key: 'setMediaQuality',
	    value: function setMediaQuality(quality) {
	      var el = _browser2.default.getEmbedObject(this._swfId);
	      if (el) {
	        if (quality.video && typeof quality.video !== 'boolean') {
	          var w = !isNaN(quality.video.width) ? toInt(quality.video.width) : Number.isNaN;
	          var h = !isNaN(quality.video.height) ? toInt(quality.video.height) : Number.isNaN;
	          el.updateResolution(w, h);
	        }
	      }
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return this.publisherType;
	    }
	  }]);
	
	  return PublisherSourceHandler;
	}();
	
	exports.default = PublisherSourceHandler;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _event = __webpack_require__(313);
	
	var _socketHelperPub = __webpack_require__(334);
	
	var _socketHelperPub2 = _interopRequireDefault(_socketHelperPub);
	
	var _webrtcHelperPub = __webpack_require__(335);
	
	var _webrtcHelperPub2 = _interopRequireDefault(_webrtcHelperPub);
	
	var _publish = __webpack_require__(331);
	
	var _promise = __webpack_require__(310);
	
	var _webrtc = __webpack_require__(318);
	
	var webrtc = _interopRequireWildcard(_webrtc);
	
	var _websocket = __webpack_require__(316);
	
	var websocket = _interopRequireWildcard(_websocket);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Default to secure settings.
	var defaultOptions = {
	  protocol: 'wss',
	  port: 8083,
	  streamType: 'webrtc',
	  streamMode: _publish.PublishModeTypes.LIVE,
	  bandwidth: {
	    audio: 56,
	    video: 512
	  }
	};
	var endpointFromOptions = function endpointFromOptions(options) {
	  var protocol = options.wsprotocol || options.protocol;
	  var port = options.wsport || options.port;
	  var appEndpoint = options.context ? [options.app, options.context].join('/') : options.app;
	  var endpoint = protocol + '://' + options.host + ':' + port + '/' + appEndpoint + '?id=' + options.streamName;
	  if (typeof options.connectionParams !== 'undefined') {
	    (function () {
	      var params = [];
	      Object.keys(options.connectionParams).forEach(function (key, index) {
	        // eslint-disable-line no-unused-vars
	        params.push([key, options.connectionParams[key]].join('='));
	      });
	      if (params.length > 0) {
	        endpoint += '&' + params.join('&');
	      }
	    })();
	  }
	  return endpoint;
	};
	
	var pubStartRegex = /(.*) starting/gi;
	var pubStopRegex = /(.*) stopping/gi;
	var NAME = 'RTCPublisher';
	var debug = function debug(message) {
	  (0, _log.debug)(NAME, message);
	};
	var warn = function warn(message) {
	  (0, _log.warn)(NAME, message);
	};
	var error = function error(message) {
	  (0, _log.error)(NAME, message);
	};
	
	var RTCPublisher = function (_EventEmitter) {
	  _inherits(RTCPublisher, _EventEmitter);
	
	  function RTCPublisher() {
	    _classCallCheck(this, RTCPublisher);
	
	    var _this = _possibleConstructorReturn(this, (RTCPublisher.__proto__ || Object.getPrototypeOf(RTCPublisher)).call(this));
	
	    _this._options = undefined;
	    _this._view = undefined;
	    _this._peerHelper = undefined;
	    _this._socketHelper = undefined;
	    _this._mediaStream = undefined;
	
	    _this._streamFuture = undefined;
	    _this._availableFuture = undefined;
	    _this._peerFuture = undefined;
	    _this._offerFuture = undefined;
	    _this._sendOfferFuture = undefined;
	    _this._trickleEndFuture = undefined;
	    _this._publishFuture = undefined;
	    _this._unpublishFuture = undefined;
	    return _this;
	  }
	
	  _createClass(RTCPublisher, [{
	    key: '_getMediaStream',
	    value: function _getMediaStream() {
	      this._streamFuture = _promise.Future.createIfNotExist(this._streamFuture);
	      return this._streamFuture.promise;
	    }
	  }, {
	    key: '_getTrickleEnd',
	    value: function _getTrickleEnd() {
	      return _promise.Future.createIfNotExist(this._trickleEndFuture);
	    }
	  }, {
	    key: 'init',
	    value: function init(options) {
	      var deferred = new _promise.DeferredPromise();
	      if (!webrtc.isSupported() || !websocket.isSupported()) {
	        deferred.reject('Cannot create WebRTC playback instance. Your environment does not support WebRTC and/or WebSockets.');
	      } else {
	        this._options = Object.assign({}, defaultOptions, options);
	        this._peerHelper = new _webrtcHelperPub2.default(this);
	        this._socketHelper = new _socketHelperPub2.default(this);
	        deferred.resolve(this);
	      }
	      return deferred.promise;
	    }
	  }, {
	    key: 'setView',
	    value: function setView(view) {
	      this._view = view;
	      return this;
	    }
	  }, {
	    key: 'attachStream',
	    value: function attachStream(media) {
	      this._streamFuture = _promise.Future.createIfNotExist(this._streamFuture);
	      this._streamFuture.resolve(media);
	      return this;
	    }
	  }, {
	    key: 'detachStream',
	    value: function detachStream() {
	      if (this._mediaStream && this._mediaStream.stop) {
	        this._mediaStream.stop();
	      } else if (this._mediaStream && this._mediaStream.getTracks) {
	        var tracks = this._mediaStream.getTracks();
	        var trackLength = tracks.length;
	        while (--trackLength > -1) {
	          if (tracks[trackLength].stop) {
	            tracks[trackLength].stop();
	          }
	        }
	      }
	      this._streamFuture = undefined;
	      this._mediaStream = undefined;
	      return this;
	    }
	  }, {
	    key: 'requestAvailability',
	    value: function requestAvailability(streamName, type) {
	      debug('[requestavailability]');
	      this._availableFuture = undefined;
	      this._availableFuture = _promise.Future.createIfNotExist(this._availableFuture);
	      // message on socket returns -> onStream(Un)Available
	      this._socketHelper.post({
	        isAvailable: streamName,
	        type: type,
	        bundle: false
	      });
	      return this._availableFuture.promise;
	    }
	  }, {
	    key: 'createPeerConnection',
	    value: function createPeerConnection(iceServers) {
	      debug('[createpeeer]');
	      this._peerFuture = undefined;
	      this._peerFuture = _promise.Future.createIfNotExist(this._peerFuture);
	      this._peerHelper.setUp(iceServers, this._peerFuture);
	      return this._peerFuture.promise;
	    }
	  }, {
	    key: 'createOffer',
	    value: function createOffer() {
	      var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	      debug('[createoffer]');
	      this._offerFuture = undefined;
	      this._offerFuture = _promise.Future.createIfNotExist(this._offerFuture);
	      this._peerHelper.createOffer(bandwidth, this._offerFuture);
	      return this._offerFuture.promise;
	    }
	  }, {
	    key: 'setRemoteDescription',
	    value: function setRemoteDescription(sdp) {
	      debug('[setremotedescription]');
	      return this._peerHelper.setRemoteDescription(sdp);
	    }
	  }, {
	    key: 'sendOffer',
	    value: function sendOffer(sdp, streamName) {
	      debug('[sendoffer]');
	      this._sendOfferFuture = undefined;
	      this._sendOfferFuture = _promise.Future.createIfNotExist(this._sendOffFuture);
	      this._socketHelper.post({
	        handleOffer: streamName,
	        data: {
	          sdp: sdp
	        }
	      });
	      return this._sendOfferFuture.promise;
	    }
	  }, {
	    key: 'sendCandidate',
	    value: function sendCandidate(candidate, streamName) {
	      debug('[sendcandidate]');
	      this._socketHelper.post({
	        handleCandidate: streamName,
	        data: {
	          candidate: candidate
	        }
	      });
	    }
	  }, {
	    key: 'requestPublish',
	    value: function requestPublish(streamName, streamMode) {
	      debug('[requestpublish]');
	      this._publishFuture = undefined;
	      this._publishFuture = _promise.Future.createIfNotExist(this._publishFuture);
	      this._socketHelper.post({
	        publish: streamName,
	        mode: streamMode
	      });
	      return this._publishFuture.promise;
	    }
	  }, {
	    key: 'requestUnpublish',
	    value: function requestUnpublish(streamName) {
	      this._unpublishFuture = undefined;
	      this._unpublishFuture = _promise.Future.createIfNotExist(this._unpublishFuture);
	      this._socketHelper.post({
	        unpublish: streamName
	      });
	      return this._unpublishFuture.promise;
	    }
	  }, {
	    key: 'publish',
	    value: function publish() {
	      var _this2 = this;
	
	      var streamName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	      var promise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      debug('[publish]');
	      this._options.streamName = streamName || this._options.streamName;
	      var p = promise || new _promise.DeferredPromise();
	      var socketPromise = new _promise.DeferredPromise();
	      var socketurl = endpointFromOptions(this._options);
	      this._trickleEndFuture = this._getTrickleEnd();
	      this._socketHelper.setUp(socketurl, socketPromise);
	      // 0. Establish socket connection.
	      socketPromise.promise
	      // 1. Wait for stream attach
	      .then(function () {
	        _this2.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_SUCCESS, _this2));
	        return _this2._getMediaStream();
	      })
	      // 2. Request available stream to publish on
	      .then(function (mediaStream) {
	        _this2._mediaStream = mediaStream;
	        _this2.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.MEDIA_STREAM_AVAILABLE, _this2, mediaStream));
	        return _this2.requestAvailability(_this2._options.streamName, _this2._options.streamType);
	      })
	      // 3. Create Peer Connection
	      .then(function () {
	        return _this2.createPeerConnection(_this2._options.iceServers);
	      })
	      // 4. Make Offer on Peer Connection
	      .then(function (connection) {
	        connection.addStream(_this2._mediaStream);
	        _this2.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.PEER_CONNECTION_AVAILABLE, _this2, connection));
	        return _this2.createOffer(_this2._options.bandwidth);
	      })
	      // 5. Send Offer
	      .then(function (sessionDescription) {
	        _this2.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.OFFER_START, _this2, sessionDescription));
	        return _this2.sendOffer(sessionDescription, _this2._options.streamName);
	      })
	      // 6. Set the session description remotely
	      .then(function (sdp) {
	        return _this2.setRemoteDescription(sdp.sdp);
	      })
	      // 7. Wait until ice trickle end
	      .then(function (sdp) {
	        _this2.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.OFFER_END, _this2, sdp));
	        return _this2._getTrickleEnd().promise;
	      })
	      // 8. Request to publish stream
	      .then(function () {
	        _this2.trigger(new _event.PublisherEvent(_event.RTCPublisherEventTypes.ICE_TRICKLE_COMPLETE, _this2));
	        return _this2.requestPublish(_this2._options.streamName, _this2._options.streamMode);
	      })
	      // 9. Results in socket message of publish (see :onPublishStatus)
	      .then(function () {
	        p.resolve(_this2);
	        _this2.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_START, _this2));
	      }).catch(function (error) {
	        p.reject(error);
	        _this2.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.CONNECT_FAILURE, _this2, error));
	      });
	      return p.hasOwnProperty('promise') ? p.promise : p;
	    }
	  }, {
	    key: 'unpublish',
	    value: function unpublish() {
	      var _this3 = this;
	
	      debug('[unpublish]');
	      var clearHelpers = function clearHelpers() {
	        if (_this3._socketHelper) {
	          _this3._socketHelper.tearDown();
	        }
	        if (_this3._peerHelper) {
	          _this3._peerHelper.tearDown();
	        }
	      };
	      this._availableFuture = undefined;
	      this._peerFuture = undefined;
	      this._offerFuture = undefined;
	      this._sendOfferFuture = undefined;
	      this._trickleEndFuture = undefined;
	      this._publishFuture = undefined;
	      var f = this.requestUnpublish(this._options.streamName);
	      f.then(function () {
	        _this3._unpublishFuture = undefined;
	        clearHelpers();
	        _this3.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.UNPUBLISH_SUCCESS, _this3));
	      });
	      return f;
	    }
	  }, {
	    key: 'mute',
	    value: function mute() {
	      this._socketHelper.post({
	        mute: true
	      });
	    }
	  }, {
	    key: 'unmute',
	    value: function unmute() {
	      this._socketHelper.post({
	        mute: false
	      });
	    }
	  }, {
	    key: 'send',
	    value: function send(methodName, data) {
	      this._socketHelper.post({
	        send: {
	          method: methodName,
	          data: typeof data === 'string' ? JSON.parse(data) : data
	        }
	      });
	    }
	  }, {
	    key: 'onStreamAvailable',
	    value: function onStreamAvailable(receipt) {
	      debug('[onstreamavailable]: ' + JSON.stringify(receipt, null, 2));
	      this._availableFuture = _promise.Future.createIfNotExist(this._availableFuture);
	      this._availableFuture.reject('Stream with name ' + this._options.streamName + ' already has a broadcast session.');
	      this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_INVALID_NAME, this));
	    }
	  }, {
	    key: 'onStreamUnavailable',
	    value: function onStreamUnavailable(receipt) {
	      // Being unavailable, is a good thing for allowing to publish using `options.streamName`
	      debug('Stream ' + this._options.streamName + ' does not exist.');
	      debug('[onstreamunavailable]: ' + JSON.stringify(receipt, null, 2));
	      this._availableFuture = _promise.Future.createIfNotExist(this._availableFuture);
	      this._availableFuture.resolve(true);
	    }
	  }, {
	    key: 'onSocketMessageError',
	    value: function onSocketMessageError(message) {
	      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      error('Error in stream playback: ' + message + '.\n[Optional detail]: ' + detail);
	      if (this._publishFuture) {
	        this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_FAIL, this));
	        this._publishFuture.reject(message);
	      }
	    }
	  }, {
	    key: 'onSDPSuccess',
	    value: function onSDPSuccess(receipt) {
	      var info = receipt ? ': ' + JSON.stringify(receipt, null, 2) : '';
	      debug('[onsdpsuccess]' + info);
	    }
	  }, {
	    key: 'onSDPError',
	    value: function onSDPError(receipt) {
	      this.trigger(new _event.PublisherEvent(_event.PublisherEventTypes.PUBLISH_FAIL, this));
	      var error = receipt ? ': ' + JSON.stringify(receipt, null, 2) : '';
	      error('[onsdperror]' + error);
	    }
	  }, {
	    key: 'onSDPAnswer',
	    value: function onSDPAnswer(sdp) {
	      debug('[sdpanswer]:: ' + JSON.stringify(sdp, null, 2));
	      this._sendOfferFuture = _promise.Future.createIfNotExist(this._sendOfferFuture);
	      this._sendOfferFuture.resolve(sdp);
	    }
	  }, {
	    key: 'onAddIceCandidate',
	    value: function onAddIceCandidate(candidate) {
	      debug('[addicecandidate]');
	      this._peerHelper.addIceCandidate(candidate).then(function () {
	        debug('[addicecandidate:success]');
	      }).catch(function (err) {
	        warn('[addicecandidate:error] - ' + err);
	      });
	    }
	  }, {
	    key: 'onIceCandidate',
	    value: function onIceCandidate(candidate) {
	      debug('[icecandidatetrickle]');
	      this.sendCandidate(candidate, this._options.streamName);
	    }
	  }, {
	    key: 'onIceCandidateTrickleEnd',
	    value: function onIceCandidateTrickleEnd() {
	      debug('[icecandidatetrickle:end]');
	    }
	  }, {
	    key: 'onSocketIceCandidateEnd',
	    value: function onSocketIceCandidateEnd() {
	      debug('[socketicecandidate:end]');
	      this._getTrickleEnd().resolve();
	      // this._trickleEndFuture = undefined
	    }
	  }, {
	    key: 'onPublisherStatus',
	    value: function onPublisherStatus(status) {
	      debug('[publisherstatus] - ' + JSON.stringify(status, null, 2));
	      var stopResult = pubStopRegex.exec(status.message);
	      var startResult = pubStartRegex.exec(status.message);
	      if (stopResult && stopResult[1] === this._options.streamName) {
	        this._unpublishFuture.resolve();
	      } else if (startResult && startResult[1] === this._options.streamName) {
	        this._publishFuture.resolve();
	      } else {
	        warn('Publisher status received, but could not handle.');
	      }
	    }
	  }, {
	    key: 'overlayOptions',
	    value: function overlayOptions(newOptions) {
	      this._options = Object.assign(this._options, newOptions);
	    }
	  }, {
	    key: 'getConnection',
	    value: function getConnection() {
	      return this._socketHelper;
	    }
	  }, {
	    key: 'getPeerConnection',
	    value: function getPeerConnection() {
	      return this._peerHelper ? this._peerHelper.connection : undefined;
	    }
	  }, {
	    key: 'getMediaStream',
	    value: function getMediaStream() {
	      return this._mediaStream;
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      return this._options;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return _publish.PublishTypes.RTC.toUpperCase();
	    }
	  }]);
	
	  return RTCPublisher;
	}(_eventEmitter2.default);
	
	exports.default = RTCPublisher;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _socketHelper = __webpack_require__(315);
	
	var _socketHelper2 = _interopRequireDefault(_socketHelper);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NAME = 'R5ProPublisherSocket';
	
	var PublisherSocketHelper = function (_SocketHelper) {
	  _inherits(PublisherSocketHelper, _SocketHelper);
	
	  function PublisherSocketHelper(responder) {
	    _classCallCheck(this, PublisherSocketHelper);
	
	    return _possibleConstructorReturn(this, (PublisherSocketHelper.__proto__ || Object.getPrototypeOf(PublisherSocketHelper)).call(this, responder, NAME));
	  }
	
	  _createClass(PublisherSocketHelper, [{
	    key: 'respond',
	    value: function respond(message) {
	      if (message.data) {
	        var json = this.getJsonFromSocketMessage(message);
	        try {
	          if (!_get(PublisherSocketHelper.prototype.__proto__ || Object.getPrototypeOf(PublisherSocketHelper.prototype), 'respond', this).call(this, message)) {
	            if (json.data !== undefined) {
	              if (json.data.sdp !== undefined) {
	                if (json.data.sdp.type === 'answer') {
	                  this._responder.onSDPAnswer(json.data);
	                }
	              }
	              if (json.data.candidate !== undefined) {
	                this._responder.onAddIceCandidate(json.data.candidate);
	              }
	              if (json.data.type === 'status') {
	                if (json.data.code === 'NetConnection.ICE.TricleCompleted' || json.data.code === 'NetConnection.ICE.TrickleCompleted') {
	                  this._responder.onSocketIceCandidateEnd();
	                } else {
	                  this._responder.onPublisherStatus(json.data);
	                }
	              }
	            }
	          }
	        } catch (e) {
	          (0, _log.error)(NAME, '[ws.onmessage] - Error in accessing message data as JSON. ' + e.message);
	          this._responder.onSocketMessageError('[ws.onmessage] - Error in accessing message data as JSON. ' + e.message);
	        }
	      } else {
	        (0, _log.warn)(NAME, '[ws.onmessage] - No Message Data.');
	      }
	    }
	  }]);
	
	  return PublisherSocketHelper;
	}(_socketHelper2.default);
	
	exports.default = PublisherSocketHelper;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _webrtc = __webpack_require__(318);
	
	var webrtc = _interopRequireWildcard(_webrtc);
	
	var _promise = __webpack_require__(310);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'R5ProPublishPeer';
	
	var PublisherPeerHelper = function () {
	  function PublisherPeerHelper(responder) {
	    _classCallCheck(this, PublisherPeerHelper);
	
	    this._responder = responder;
	    this._peerConnection = undefined;
	  }
	
	  _createClass(PublisherPeerHelper, [{
	    key: '_removeConnectionHandlers',
	    value: function _removeConnectionHandlers(connection) {
	      connection.onconnectionstatechange = undefined;
	      connection.onicecandidate = undefined;
	    }
	  }, {
	    key: '_addConnectionHandlers',
	    value: function _addConnectionHandlers(connection, promise) {
	      var _this = this;
	
	      connection.onconnectionstatechange = function () {
	        if (connection.connectionState === 'connected') {
	          (0, _log.debug)(NAME, '[peerconnection:open]');
	          if (promise) {
	            promise.resolve(_this);
	          }
	        } else if (connection.connectionState === 'failed' || connection.connectionState === 'disconnected') {
	          (0, _log.warn)(NAME, '[peerconnection:error]');
	          if (promise) {
	            promise.reject();
	          }
	        }
	      };
	
	      connection.onicecandidate = function (event) {
	        (0, _log.debug)(NAME, '[peer.onicecandidate] - Peer Candidate: ' + event.candidate);
	        if (event.candidate) {
	          _this._responder.onIceCandidate(event.candidate);
	        } else if (event.candidate === null) {
	          // null means they have finished sending candidates back and forth?
	          // Moved to notification from server on trickle end event.
	          // this._responder.onIceCandidateTrickleEnd()
	        }
	      };
	    }
	  }, {
	    key: 'createOffer',
	    value: function createOffer() {
	      var _this2 = this;
	
	      var bandwidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	      var offerPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      (0, _log.debug)(NAME, '[createoffer]');
	      var p = offerPromise || new _promise.DeferredPromise();
	      this._peerConnection.createOffer().then(function (sessionDescription) {
	        _this2.setLocalDescription(sessionDescription, bandwidth).then(function () {
	          if (bandwidth) {
	            sessionDescription.sdp = webrtc.updateBandwidth(bandwidth, sessionDescription.sdp);
	          }
	          _this2._responder.onSDPSuccess();
	          p.resolve(sessionDescription);
	        }).catch(function (err) {
	          _this2._responder.onSDPError(err);
	          p.reject(err);
	        });
	      }).catch(function (err) {
	        (0, _log.debug)(NAME, '[createoffer:error]');
	        p.reject(err);
	      });
	      return p.hasOwnProperty('promise') ? p.promise : p;
	    }
	  }, {
	    key: 'setLocalDescription',
	    value: function setLocalDescription(sessionDescription) {
	      var bandwidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      // eslint-disable-line no-unused-vars
	      (0, _log.debug)(NAME, '[setlocaldescription]');
	      return this._peerConnection.setLocalDescription(sessionDescription);
	    }
	  }, {
	    key: 'setRemoteDescription',
	    value: function setRemoteDescription(sdp) {
	      (0, _log.debug)(NAME, '[setremotedescription]');
	      return this._peerConnection.setRemoteDescription(new webrtc.RTCSessionDescription(sdp));
	    }
	  }, {
	    key: 'addIceCandidate',
	    value: function addIceCandidate(candidate) {
	      (0, _log.debug)(NAME, '[addcandidate]');
	      return this._peerConnection.addIceCandidate(candidate);
	    }
	  }, {
	    key: 'setUp',
	    value: function setUp(iceServers) {
	      var setUpPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	      this.tearDown();
	      (0, _log.debug)(NAME, '[setup]');
	      var p = setUpPromise || new _promise.DeferredPromise();
	      try {
	        var peer = new webrtc.RTCPeerConnection({
	          iceServers: iceServers,
	          rtcpMuxPolicy: 'negotiate'
	        }, {
	          optional: [{ DtlsSrtpKeyAgreement: true }, { RtpDataChannels: false }, { googCpuOveruseDetection: true }]
	        });
	        this._addConnectionHandlers(peer);
	        this._peerConnection = peer;
	        p.resolve(peer);
	      } catch (e) {
	        (0, _log.warn)(NAME, 'Could not establish a PeerConnection. ' + e.message);
	        p.reject(e.message);
	      }
	      return p.hasOwnProperty('promise') ? p.promise : p;
	    }
	  }, {
	    key: 'tearDown',
	    value: function tearDown() {
	      (0, _log.debug)(NAME, '[teardown]');
	      if (this._peerConnection) {
	        this._removeConnectionHandlers(this._peerConnection);
	        try {
	          this._peerConnection.close();
	        } catch (e) {
	          (0, _log.warn)(NAME, '[peerconnection.close] error: ' + e.message);
	        }
	      }
	    }
	  }, {
	    key: 'connection',
	    get: function get() {
	      return this._peerConnection;
	    }
	  }]);
	
	  return PublisherPeerHelper;
	}();
	
	exports.default = PublisherPeerHelper;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Red5ProSharedObject = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventEmitter = __webpack_require__(307);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _index = __webpack_require__(313);
	
	var _sharedobjectEvent = __webpack_require__(304);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'Red5ProSharedObject';
	var debug = function debug(soName, message) {
	  (0, _log.debug)([NAME, soName].join(':'), message);
	};
	var warn = function warn(soName, message) {
	  (0, _log.warn)([NAME, soName].join(':'), message);
	};
	var error = function error(soName, message) {
	  (0, _log.error)([NAME, soName].join(':'), message);
	};
	
	var SO_SUBTYPE_PROPERTY = 4;
	var SO_SUBTYPE_METHOD = 6;
	
	var decodeMessageIfJSONString = function decodeMessageIfJSONString(message) {
	  return typeof message === 'string' ? JSON.parse(message) : message;
	};
	
	var PropertyData = function () {
	  function PropertyData(key, value) {
	    _classCallCheck(this, PropertyData);
	
	    this.key = key;
	    this.value = value;
	  }
	
	  _createClass(PropertyData, [{
	    key: 'toObject',
	    value: function toObject() {
	      var obj = {};
	      obj[this.key] = this.value;
	      return obj;
	    }
	  }]);
	
	  return PropertyData;
	}();
	
	var MethodData = function () {
	  function MethodData(methodName, message) {
	    _classCallCheck(this, MethodData);
	
	    this.methodName = methodName;
	    var messageList = void 0;
	    if (Object.prototype.toString.call(message) === '[object Array]') {
	      var i = void 0;
	      var msg = void 0;
	      var length = message.length;
	      messageList = [];
	      for (i = 0; i < length; i++) {
	        msg = decodeMessageIfJSONString(message[i]);
	        if (Object.prototype.toString.call(message) === '[object Array]') {
	          messageList = messageList.concat(msg);
	        } else {
	          messageList.push(msg);
	        }
	      }
	    } else {
	      messageList = [decodeMessageIfJSONString(message)];
	    }
	    this.message = messageList.length === 1 ? messageList[0] : messageList;
	  }
	
	  _createClass(MethodData, [{
	    key: 'toObject',
	    value: function toObject() {
	      return {
	        methodName: this.methodName,
	        message: this.message
	      };
	    }
	  }]);
	
	  return MethodData;
	}();
	
	var Red5ProSharedObject = function (_EventEmitter) {
	  _inherits(Red5ProSharedObject, _EventEmitter);
	
	  function Red5ProSharedObject(name, connection) {
	    _classCallCheck(this, Red5ProSharedObject);
	
	    var _this = _possibleConstructorReturn(this, (Red5ProSharedObject.__proto__ || Object.getPrototypeOf(Red5ProSharedObject)).call(this));
	
	    _this._name = name;
	    _this._socket = connection.getConnection();
	    _this._socket.addSharedObjectResponseHandler(_this);
	    _this._onclose = _this.close.bind(_this);
	    try {
	      debug(_this._name, '[sharedobject:connect:attempt]');
	      _this._socket.getRemoteSharedObject(_this._name);
	      _browser2.default.addCloseHandler(_this._onclose, 0);
	    } catch (e) {
	      error(_this._name, '[sharedobject:connect:error]: ' + e.message);
	    }
	    return _this;
	  }
	
	  _createClass(Red5ProSharedObject, [{
	    key: 'getJsonFromSocketMessage',
	    value: function getJsonFromSocketMessage(message) {
	      try {
	        return typeof message.data === 'string' ? JSON.parse(message.data) : message.data;
	      } catch (e) {
	        warn(this._name, 'Could not parse message as JSON. Message= ' + message.data + '. Error= ' + e.message);
	      }
	      return null;
	    }
	  }, {
	    key: 'notifyOfPropertyValues',
	    value: function notifyOfPropertyValues(valueObject) {
	      if (Object.keys(valueObject).length === 0) {
	        this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.common.PROPERTY_UPDATE, this._name, {}));
	      } else {
	        var key = void 0;
	        for (key in valueObject) {
	          this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.common.PROPERTY_UPDATE, this._name, new PropertyData(key, valueObject[key]).toObject()));
	        }
	      }
	    }
	  }, {
	    key: 'notifyOfEvents',
	    value: function notifyOfEvents(events) {
	      var i = void 0,
	          event = void 0;
	      var length = events.length;
	      for (i = 0; i < length; i++) {
	        event = events[i];
	        switch (event.subtype) {
	          case SO_SUBTYPE_PROPERTY:
	            this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.common.PROPERTY_UPDATE, this._name, new PropertyData(event.attribute, event.value).toObject()));
	            return true;
	          case SO_SUBTYPE_METHOD:
	            this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.common.METHOD_UPDATE, this._name, new MethodData(event.method, event.value).toObject()));
	            return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: 'respond',
	    value: function respond(message) {
	      if (message.data) {
	        var json = this.getJsonFromSocketMessage(message);
	        if (json === null) {
	          warn(this._name, 'Determined websocket response not in correct format. Aborting message handle.');
	          return true;
	        }
	        if (json.data !== undefined) {
	          if (json.data.name === this._name) {
	            debug(this._name, '[sharedobject-response]: ' + JSON.stringify(json, null, 2));
	            if (json.data.status === 'SharedObject.Status.GetRemote' && json.data.message === 'Success') {
	              this._socket.connectToSharedObject(this._name);
	              return true;
	            } else if (json.data.status === 'SharedObject.Status.GetRemote' && json.data.message === 'Fail') {
	              this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.common.CONNECT_FAILURE, this._name));
	              return true;
	            } else if (json.data.status === 'SharedObject.Status.Connect' && json.data.message === 'Success') {
	              this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.common.CONNECT_SUCCESS, this._name));
	              return true;
	            } else if (json.data.status === 'SharedObject.Status.Connect' && json.data.message === 'Fail') {
	              this.trigger(new _index.SharedObjectEvent(_sharedobjectEvent.common.CONNECT_FAILURE, this._name));
	              return true;
	            } else if (json.data.type === 'sharedobject') {
	              if (json.data.hasOwnProperty('events')) {
	                return this.notifyOfEvents(json.data.events);
	              } else if (json.data.hasOwnProperty('value')) {
	                return this.notifyOfPropertyValues(json.data.value);
	              }
	            }
	          } else {
	            debug('Unhandled Socket exchange: ' + JSON.stringify(json, null, 2));
	          }
	        }
	      }
	      return false;
	    }
	  }, {
	    key: 'send',
	    value: function send(messageName, data) {
	      this._socket.sendToSharedObject(this._name, messageName, data);
	    }
	  }, {
	    key: 'sendProperty',
	    value: function sendProperty(key, value) {
	      this._socket.sendPropertyToSharedObject(this._name, key, value);
	    }
	  }, {
	    key: 'close',
	    value: function close() {
	      if (this._socket === undefined) {
	        warn('Socket no longer exist to close shared object properly.');
	      }
	      this._socket.closeSharedObject(this._name);
	      if (this._socket) {
	        this._socket.removeSharedObjectResponseHandler(this);
	      }
	      this._socket = undefined;
	      this._name = undefined;
	      _browser2.default.removeCloseHandler(this._onclose);
	    }
	  }, {
	    key: 'getName',
	    value: function getName() {
	      return this._name;
	    }
	  }]);
	
	  return Red5ProSharedObject;
	}(_eventEmitter2.default);
	
	exports.Red5ProSharedObject = Red5ProSharedObject;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	'use script';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PlaybackView = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'R5ProPlaybackView';
	var playbackId = 'red5pro-subscriber';
	
	var PlaybackView = exports.PlaybackView = function () {
	  function PlaybackView() {
	    var elementId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : playbackId;
	
	    _classCallCheck(this, PlaybackView);
	
	    try {
	      // Target video element.
	      this._targetElement = _browser2.default.resolveElement(elementId);
	    } catch (e) {
	      (0, _log.error)(NAME, 'Could not instantiate a new instance of Red5ProSubscriber. Reason: ' + e.message);
	      throw e;
	    }
	  }
	
	  _createClass(PlaybackView, [{
	    key: 'attachSubscriber',
	    value: function attachSubscriber(subscriber) {
	      (0, _log.debug)(NAME, '[attachsubscriber]');
	      subscriber.setView(this, _browser2.default.getElementId(this._targetElement));
	    }
	  }, {
	    key: 'attachStream',
	    value: function attachStream(mediaStream) {
	      var autoplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      (0, _log.debug)(NAME, '[attachstream]: autoplay(' + autoplay + ')');
	      _browser2.default.setVideoSource(this._targetElement, mediaStream, autoplay);
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      (0, _log.debug)(NAME, '[stop]');
	      try {
	        this._targetElement.pause();
	      } catch (e) {
	        (0, _log.warn)(NAME, 'Could not stop video element: ' + e.message);
	      }
	    }
	  }, {
	    key: 'view',
	    get: function get() {
	      return this._targetElement;
	    }
	  }]);
	
	  return PlaybackView;
	}();
	
	exports.default = PlaybackView;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _browser = __webpack_require__(309);
	
	var _browser2 = _interopRequireDefault(_browser);
	
	var _log = __webpack_require__(299);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NAME = 'R5ProPublishView';
	
	var publisherId = 'red5pro-publisher';
	
	var PublishView = function () {
	  function PublishView() {
	    var elementId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : publisherId;
	
	    _classCallCheck(this, PublishView);
	
	    try {
	      this._targetElement = _browser2.default.resolveElement(elementId);
	    } catch (e) {
	      (0, _log.error)(NAME, 'Could not instantiate a new instance of Red5ProPublisher. Reason: ' + e.message);
	      throw e;
	    }
	  }
	
	  _createClass(PublishView, [{
	    key: 'attachPublisher',
	    value: function attachPublisher(publisher) {
	      (0, _log.debug)(NAME, '[attachpublisher]');
	      publisher.setView(this, _browser2.default.getElementId(this._targetElement));
	    }
	  }, {
	    key: 'preview',
	    value: function preview(mediaStream) {
	      var autoplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      (0, _log.debug)(NAME, '[preview]: autoplay(' + autoplay + ')');
	      _browser2.default.setVideoSource(this._targetElement, mediaStream, autoplay);
	    }
	  }, {
	    key: 'view',
	    get: function get() {
	      return this._targetElement;
	    }
	  }]);
	
	  return PublishView;
	}();
	
	exports.default = PublishView;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,